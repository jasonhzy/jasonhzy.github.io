<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[df或ls卡住]]></title>
      <url>http://jasonhzy.github.io/2019/07/02/df-lock/</url>
      <content type="html"><![CDATA[<p>在Linux上有时会遇到 df 查看磁盘使用量时卡住，或者 ls 查看不了目录信息，或者cd不能进入目录中等，可以使用strace跟踪下卡在哪个环节</p>
<a id="more"></a>
<h2 id="strace-df"><a href="#strace-df" class="headerlink" title="strace df"></a>strace df</h2><p>执行strace df追踪，之后到了卡住的地方</p>
<pre><code>stat(&quot;/&quot;, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
stat(&quot;/sys/kernel/security&quot;, {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
stat(&quot;/dev/shm&quot;, {st_mode=S_IFDIR|S_ISVTX|0777, st_size=40, ...}) = 0
stat(&quot;/data/share&quot;,
</code></pre><h2 id="mount查看挂载情况"><a href="#mount查看挂载情况" class="headerlink" title="mount查看挂载情况"></a>mount查看挂载情况</h2><p>执行mount之后，可以看到/data/share目录挂载情况</p>
<pre><code>18.10.50.29:/home/data/share on /data/share type nfs4 (rw,relatime,vers=4.0,rsize=1048576,wsize=1048576,
namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=192.168.1.100,local_lock=none,
addr=18.10.50.29)
</code></pre><h2 id="umount取消挂载"><a href="#umount取消挂载" class="headerlink" title="umount取消挂载"></a>umount取消挂载</h2><p>挂载情况已知晓，由于18.10.50.29服务器已关闭或者删除，导致了卡顿的情况，因而取消挂载即可</p>
<pre><code>umount -f /data/share  
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> df </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux安装中文字体]]></title>
      <url>http://jasonhzy.github.io/2019/06/27/linux-fonts/</url>
      <content type="html"><![CDATA[<p>在Linux环境下的，经常会遇到，开发的项目中有生成带中文文字的图片在前台显示会出现方框乱码，比如PHP的GD／ImageMagick，JAVA的BufferedImage Graphics drawString中文乱码等。</p>
<a id="more"></a>
<h2 id="安装mkfontscale，mkfontdir和fc-cache命令"><a href="#安装mkfontscale，mkfontdir和fc-cache命令" class="headerlink" title="安装mkfontscale，mkfontdir和fc-cache命令"></a>安装mkfontscale，mkfontdir和fc-cache命令</h2><h3 id="Ubuntu上安装"><a href="#Ubuntu上安装" class="headerlink" title="Ubuntu上安装"></a>Ubuntu上安装</h3><pre><code>apt-get install ttf-mscorefonts-installer # 安装mkfontscale，mkfontdir
apt-get install fontconfig  # 安装fc-cache
</code></pre><h3 id="CentOS上安装"><a href="#CentOS上安装" class="headerlink" title="CentOS上安装"></a>CentOS上安装</h3><pre><code>yum install mkfontscale # 安装mkfontscale，mkfontdir
yum install fontconfig  # 安装fc-cache
</code></pre><h2 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h2><p>1、从网络上下载字体或者直接从其他计算机（windows）上拷贝<br>2、建立/usr/share/fonts/myfonts目录</p>
<pre><code>mkdir -p /usr/share/fonts/myfonts
</code></pre><p>3、把准备上传的字体上传到/usr/share/fonts/myfonts目录下</p>
<pre><code>scp /path/fontname  root@localhost:/usr/share/fonts/myfonts
</code></pre><p>4、修改字体文件的权限</p>
<pre><code>chmod -R 755 /usr/share/fonts/myfonts
</code></pre><p>5、建立字体缓存</p>
<p>（1）执行 mkfontscale，生成了fonts.scale文件<br>（2）执行 mkfontdir，生成了fonts.dir文件<br>（3）执行 fc-cache -fv</p>
<p>6、使用 fc-list 查看字体库，查看是否包含新加入的字体</p>
<p>7、(重点)如果有其他服务使用，只需要重启服务器即可，比如重启Tomcat／Apache等</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Font </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql同步复制报错故障处理]]></title>
      <url>http://jasonhzy.github.io/2019/06/06/mysql-master-slave-question/</url>
      <content type="html"><![CDATA[<p>在MySQL主从同步集群部署中，经常会遇到主从不能同步的问题，以下对常见问题及解决办法进行了归纳列举</p>
<a id="more"></a>
<h2 id="数据不一致：包括删除失败、主键重复、更新丢失"><a href="#数据不一致：包括删除失败、主键重复、更新丢失" class="headerlink" title="数据不一致：包括删除失败、主键重复、更新丢失"></a>数据不一致：包括删除失败、主键重复、更新丢失</h2><p>例如：</p>
<pre><code>#更新丢失
Last_SQL_Errno: 1032
Last_SQL_Error: Could not execute Update_rows event on table social.test; Can&apos;t find record in &apos;jason&apos;, Error_code: 1032; handler error HA_ERR_KEY_NOT_FOUND;the event&apos;s master log mysql-bin.000019, end_log_pos 4563
#主键重复
Last_SQL_Errno: 1062
Last_SQL_Error: Error &apos;Duplicate entry &apos;1&apos; for key &apos;PRIMARY&apos;&apos; on query. Default database: &apos;social&apos;. Query: &apos;INSERT INTO `social`.`tool`(`createdat`, `updatedat`) VALUES (&apos;2019-06-05 09:11:46&apos;, &apos;2019-06-05 09:11:51&apos;)&apos;
#删除失败
Last_SQL_Errno: 1032
Last_SQL_Error: Could not execute Delete_rows_v1 event on table social.player_role; Can&apos;t find record in &apos;player_role&apos;, Error_code: 1032; handler error HA_ERR_END_OF_FILE; the event&apos;s master log mysql-bin.000013, end_log_pos 20064466
</code></pre><p>在master上，用mysqlbinlog 分析下出错的binlog日志在干什么：</p>
<pre><code>[root@localhost ~]# mysqlbinlog --no-defaults -v -v --base64-output=DECODE-ROWS mysql-bin.000013 | grep -A 10 20064466
#190605  9:12:28 server id 1  end_log_pos 20064466     Delete_rows: table id 442 flags: STMT_END_F
### DELETE FROM `social`.`player_role`
### WHERE
###   @1=1 /* INT meta=0 nullable=0 is_null=0 */
###   @2=1 /* INT meta=0 nullable=0 is_null=0 */
###   @3=&apos;2019-06-04 20:10:48&apos; /* DATETIME(0) meta=0 nullable=1 is_null=0 */
###   @4=&apos;2019-06-04 20:10:48&apos; /* DATETIME(0) meta=0 nullable=1 is_null=0 */
# at 20064466
#190605  9:12:28 server id 1  end_log_pos 20064493     Xid = 414815
COMMIT/*!*/;
# at 20064493
#190605  9:13:00 server id 1  end_log_pos 20064531     GTID 0-1-9152684 trans
/*!100001 SET @@session.gtid_seq_no=9152684*//*!*/;
BEGIN
/*!*/;
# at 20064531
#190605  9:13:00 server id 1  end_log_pos 20064795     Query    thread_id=1733    exec_time=0    error_code=0
SET TIMESTAMP=1559697180.6860/*!*/;
</code></pre><p>对于主键重复／删除失败／更新丢失，更新丢失主要是缺少更新的记录，进行补充下即可，主键重复／删除失败此时可以选择忽略错误，方法如下：</p>
<pre><code>mysql&gt; stop slave;
mysql&gt; set global sql_slave_skip_counter=1;
mysql&gt; start slave;
mysql&gt; show slave status\G
</code></pre><h2 id="字段不一致：包括字段重复、丢失、不够长等"><a href="#字段不一致：包括字段重复、丢失、不够长等" class="headerlink" title="字段不一致：包括字段重复、丢失、不够长等"></a>字段不一致：包括字段重复、丢失、不够长等</h2><pre><code>#字段重复
Last_SQL_Errno: 1060
Last_SQL_Error: Error &apos;Duplicate column name &apos;del_flag&apos;&apos; on query. Default database: &apos;social&apos;. Query: &apos;ALTER TABLE `social`.`player` ADD COLUMN `del_flag` int(11) NULL AFTER `detail`&apos;
</code></pre><p>对于数据库字段的同步失败，只需要将主从数据库的字段名称、类型等调整一致即可。之后重启slave，查看主从同步是否恢复</p>
<h2 id="主从表不一致"><a href="#主从表不一致" class="headerlink" title="主从表不一致"></a>主从表不一致</h2><pre><code>Last_SQL_Errno: 1146
Last_SQL_Error: Error executing row event: &apos;Table &apos;social.player_role&apos; doesn&apos;t exist&apos;
</code></pre><p>主从提示缺少表可以进行添加，多余表可以删除，保证主从表的一致即可。之后重启slave，查看主从同步是否恢复</p>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RabbitMQ编译安装]]></title>
      <url>http://jasonhzy.github.io/2019/06/06/rabbitmq-install/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>RabbitMQ是采用 Erlang语言实现AMQP协议的消息中间件，AMQP全称是 Advanced Message Queue Protocolg，高级消息队列协议。支持多种客户端，如：Java、PHP、Python等，主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>系统环境：CentOS7<br>RabbitMQ版本：3.6.12<br>Erlang版本：20.1</p>
<p>查看 <a href="https://www.rabbitmq.com/which-erlang.html" target="_blank" rel="noopener">RabbitMQ和Erlang匹配版本</a></p>
<h2 id="安装Erlang"><a href="#安装Erlang" class="headerlink" title="安装Erlang"></a>安装Erlang</h2><p>RabbitMQ是由Erlang语言开发，所以需要先安装Erlang环境</p>
<p>1、安装依赖</p>
<pre><code>yum install gcc gcc-c++ ncurses ncurses-devel openssl openssl-devel unixODBC unixODBC-devel
</code></pre><p>2、下载安装，地址：<a href="http://www.erlang.org/downloads" target="_blank" rel="noopener">http://www.erlang.org/downloads</a> ，选择版本下载</p>
<pre><code>wget http://erlang.org/download/otp_src_20.1.tar.gz
</code></pre><p>3、解压编译安装</p>
<pre><code># 解压
tar -zxvf otp_src_20.1.tar.gz

# 配置安装路径编译代码
cd otp_src_20.1/
./configure \
--prefix=/usr/local/erlang \
--without-javac

# 安装
make &amp;&amp; make install
</code></pre><p>4、环境变量设置</p>
<pre><code>vim /etc/profile
#添加以下配置
#set erlang environment
export PATH=$PATH:/usr/local/erlang/bin
</code></pre><p>5、测试是否成功</p>
<pre><code>[root@iZj6ci19b3r6baljocdx8cZ ~]# erl
Erlang/OTP 20 [erts-9.1] [source] [64-bit] [smp:2:2] [ds:2:2:10] [async-threads:10] [hipe] [kernel-poll:false]

Eshell V9.1  (abort with ^G)
1&gt; 
1&gt; 
1&gt; halt(). #退出    
</code></pre><h2 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h2><p>1、下载安装，从官网下载，选择版本。在linux环境下需要下带有unix的，如下：</p>
<pre><code>wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.12/rabbitmq-server-generic-unix-3.6.12.tar.xz
# 解压，这里将其解压到opt目录中。解压之后进入opt目录，修改rabbitmq的文件夹
tar -xvf rabbitmq-server-generic-unix-3.6.12.tar.xz
mv rabbitmq-server-3.6.12 /usr/local/rabbitmq
</code></pre><p>2、配置环境变量</p>
<pre><code>vim /etc/profile
#添加以下配置
#set rabbitmq environment
export PATH=$PATH:/usr/local/rabbitmq/sbin
#使得文件生效
source  /etc/profile
</code></pre><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>1、启动rabbitmq</p>
<pre><code>rabbitmq-server -detached #后台启动
</code></pre><p>2、查看服务状态</p>
<pre><code>rabbitmqctl status
</code></pre><p>例如：</p>
<pre><code>[root@iZj6ci19b3r6baljocdx8cZ ~]# rabbitmqctl status
Status of node rabbit@iZj6ci19b3r6baljocdx8cZ
[{pid,19317},
 {running_applications,
     [{rabbitmq_management,&quot;RabbitMQ Management Console&quot;,&quot;3.6.12&quot;},
      {rabbitmq_web_dispatch,&quot;RabbitMQ Web Dispatcher&quot;,&quot;3.6.12&quot;},
      {cowboy,&quot;Small, fast, modular HTTP server.&quot;,&quot;1.0.4&quot;},
      ......
</code></pre><p>3、 停止RabbitMQ</p>
<pre><code>rabbitmqctl stop
</code></pre><p>4、启动插件</p>
<pre><code>rabbitmq-plugins enable rabbitmq_management
</code></pre><p>默认端口15672，对外访问即：IP:15672，默认的账号密码是guest，但是该账号只能通过localhost登录</p>
<p>1）添加用户</p>
<pre><code>rabbitmqctl add_user [username] [password]
</code></pre><p>2）添加权限</p>
<pre><code>rabbitmqctl set_permissions -p &quot;/&quot; [username] &quot;.*&quot; &quot;.*&quot; &quot;.*&quot; #&quot;/&quot;即
</code></pre><p>3）修改用户角色</p>
<pre><code>rabbitmqctl set_user_tags [username] administrator
</code></pre><p>4）修改用户密码</p>
<pre><code>rabbitmqctl change_password [username] [password]    
</code></pre><p>4）查看当前用户列表</p>
<pre><code>rabbitmqctl list_users
</code></pre><p>5）删除用户</p>
<pre><code>rabbitmqctl delete_user [username]
</code></pre>]]></content>
      
        <categories>
            
            <category> Rabbitmq </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Rabbitmq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库事务]]></title>
      <url>http://jasonhzy.github.io/2019/03/22/transaction/</url>
      <content type="html"><![CDATA[<h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>事务,它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。</p>
<a id="more"></a>
<h2 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h2><p>事务特性分为四个：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持续性（Durability）简称ACID。</p>
<pre><code>原子性（Atomicity）：事务是数据库逻辑工作单元，事务中包含的操作要么都执行成功，要么都执行失败。
一致性（Consistency）：事务执行的结果必须是使数据库数据从一个一致性状态变到另外一种一致性状态。
    当事务执行成功后就说数据库处于一致性状态。如果在执行过程中发生错误，这些未完成事务对数据库所
    做的修改有一部分已写入物理数据库，这是数据库就处于不一致状态。
隔离性（Isolation）：一个事务的执行过程中不能影响到其他事务的执行，即一个事务内部的操作及使用的
    数据对其他事务是隔离的，并发执行各个事务之间无不干扰。
持久性（Durability）：即一个事务执一旦提交，它对数据库数据的改变是永久性的。之后的其它操作不应该
    对其执行结果有任何影响。
</code></pre><h2 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h2><p>MySQL默认采用自动提交(autocommit) 模式。 即执行SQL语句后就会马上执行COMMIT操作，也就是隐式的开启了一个事务。但如果显式地开始一个事务，需使用begin、start transaction，或者执行set autocommit=0，以禁用当前会话的自动提交。对于非事务型存储引擎（例如MyISAM），修改autocommit属性是不会有影响的。</p>
<p>1、查看当前数据库autocommit的设置：</p>
<pre><code>mysql&gt; show variables like &apos;%autocommit%&apos;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| autocommit    | ON    |
+---------------+-------+
1 row in set (0.00 sec)
</code></pre><p>即为开启状态，如果是1或ON, 则表示已经开启了, 0或OFF表示禁用。</p>
<p>2、修改自动提交方式：</p>
<pre><code>set session autocommit=0 或者 set global autocommit=0
</code></pre><p>上述SQL修改会话系统变量或全局系统变量，只对当前实例有效，如果MySQL服务重启的话，这些设置就会丢失，如要永久生效，就必须在配置文件中修改系统变量。</p>
<p>3、事务控制语句：<br>1）start transaction／begin：均为显式地开启一个事务。在存储过程中，MySQL分析会自动将begin识别为begin……end。因此在存储过程中，只能使用start transaction语句来开启一个事务<br>2）commit／commit work：用来提交事务，对数据库永久性的修改。不同之处在于，commit work用来控制事务结束后的行为（可以用 select @@completion_type 查看值，默认是0或NO_CHAIN），是chain还是release的</p>
<pre><code>completion_type=0，二者等价
completion_type=1，commit work等同于commit and chain，表示马上自动开启一个相同隔离级别的事务
completion_type=2，commit work等同于commit and release。表示当事务提交后会自动断开与服务器的连接
</code></pre><p>3）rollback／rollback work：用来回滚事务，并撤销正在进行的所有未提交的修改。rollback，rollback work与commit，commit work的工作原理一样的<br>4）savepoint &lt;identifier>：在事务中创建保存点，一个事务允许有多个保存点。如果当前事务有一个同样名称的保存点，则旧的保存点被删除，新的保存点被设置。利用savepoint可以回滚指定部分事务，从而使事务处理更加灵活和精细<br>5）release savepoint &lt;identifier>：删除一个事务的保存点，不出现提交或回滚。当没有指定的保存点时，执行该语句会抛出一个异常<br>6）rollback to &lt;identifier>：事务回滚到标记点，而不回滚在此标记点之前的任何工作</p>
<h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><style>
    table th:first-of-type {
        width: 32%;
    }
    table th:nth-of-type(3) {
        width: 30%;
    }
    table th:nth-of-type(4) {
            width: 20%;
        }
</style>

<table>
<thead>
<tr>
<th>隔离级别</th>
<th style="text-align:center">脏读<br>（Dirty）</th>
<th style="text-align:center">不可重复读<br>（NonRepeatable Read）</th>
<th style="text-align:center">幻读<br>（Phantom Read）</th>
</tr>
</thead>
<tbody>
<tr>
<td>未提交读（Read Uncommitted）</td>
<td style="text-align:center">可能</td>
<td style="text-align:center">可能</td>
<td style="text-align:center">可能</td>
</tr>
<tr>
<td>已提交读（Read Committed）</td>
<td style="text-align:center">不可能</td>
<td style="text-align:center">可能</td>
<td style="text-align:center">可能</td>
</tr>
<tr>
<td>可重复读（Repeatable Read）</td>
<td style="text-align:center">不可能</td>
<td style="text-align:center">不可能</td>
<td style="text-align:center">可能</td>
</tr>
<tr>
<td>可串行化（Serializable）</td>
<td style="text-align:center">不可能</td>
<td style="text-align:center">不可能</td>
<td style="text-align:center">不可能</td>
</tr>
</tbody>
</table>
<p>脏读：是指在一个事务处理过程里读取了另一个未提交的事务中的数据。<br>不可重复读：一个事务两次读取同一行的数据，结果得到不同状态的结果，中间正好另一个事务更新了该数据，两次结果相异，不可被信任。<br>幻读／虚读：一个事务执行两次查询，第二次结果集包含第一次中没有或某些行已经被删除的数据，造成两次结果不一致，只是另一个事务在这两次查询中间插入或删除了数据造成的。幻读是事务非独立执行时发生的一种现象。</p>
<p>查看mysql的事务隔离级别：</p>
<pre><code>select @@tx_isolation 或 show variables like &apos;%tx_isolation%&apos;
</code></pre><p>例如：</p>
<pre><code>mysql&gt; show variables like &apos;%tx_isolation%&apos;;
+---------------+-----------------+
| Variable_name | Value           |
+---------------+-----------------+
| tx_isolation  | REPEATABLE-READ |
+---------------+-----------------+
1 row in set (0.00 sec)
</code></pre><p>修改事务隔离级别（当前会话内）：    </p>
<pre><code>set session transaction isolation level read uncommitted;
</code></pre><h3 id="未提交读（读取到未提交数据）"><a href="#未提交读（读取到未提交数据）" class="headerlink" title="未提交读（读取到未提交数据）"></a>未提交读（读取到未提交数据）</h3><p>事务并没有commit，但是我们仍然能读到未提交的数据。实际上当我们的数据并没有commit时，次数读取的结果是不正确的。</p>
<pre><code>mysql&gt; set session transaction isolation level read committed;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; show variables like &apos;%tx_isolation%&apos;;
+---------------+------------------+
| Variable_name | Value            |
+---------------+------------------+
| tx_isolation  | READ-UNCOMMITTED |
+---------------+------------------+
1 row in set (0.00 sec)    
</code></pre><p> <img src="/images/transaction/read-uncommitted.png" alt="transaction"> </p>
<p>开启两个事务，隔离级别均是未提交读。事务1执行更新操作（步骤1），此时事务并未提交，事务2此时可以查询到事务1未提交的更新结果（步骤2）。<br>当前事务能够查询到其他事务仲未提交的数据信息，对于这种现象我们称之为”脏读”。除此之外还可能导致不可重复读以及幻读</p>
<h3 id="提交读（可以读取其他事务提交的数据）"><a href="#提交读（可以读取其他事务提交的数据）" class="headerlink" title="提交读（可以读取其他事务提交的数据）"></a>提交读（可以读取其他事务提交的数据）</h3><p>大多数数据库默认的隔离级别，如Oracle。当前事务只能读取到其他事务提交的数据，未提交的数据读不到。</p>
<pre><code>mysql&gt; set session transaction isolation level read committed;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; show variables like &apos;%tx_isolation%&apos;;
+---------------+------------------+
| Variable_name | Value            |
+---------------+------------------+
| tx_isolation  | READ-COMMITTED |
+---------------+------------------+
1 row in set (0.00 sec)    
</code></pre><p><img src="/images/transaction/read-committed.png" alt="transaction"></p>
<p>开启两个事务，隔离级别均是提交读。事务2查询数据库得到结果（步骤1），此时事务1执行更新操作（步骤2）并提交更新（步骤3），事务2再次查询数据库得到结果（步骤4）。<br>事务2同一个在同一个事务内两次查询数据库得到结果却不相同，对于这种现象我们称之为”不可重复读”。在此隔离级别下，还可能导致幻读，如下图所示：<br><img src="/images/transaction/phantom-read.png" alt="transaction"></p>
<h3 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h3><p>当前事务可以重复读，每次读取的结果集都相同，而不管其他事务有没有提交。MySQL默认的隔离级别。<br>    mysql&gt; set session transaction isolation level repeatable read;<br>    Query OK, 0 rows affected (0.00 sec)</p>
<pre><code>mysql&gt; show variables like &apos;%tx_isolation%&apos;;
+---------------+------------------+
| Variable_name | Value            |
+---------------+------------------+
| tx_isolation  | REPEATABLE-READ |
+---------------+------------------+
1 row in set (0.00 sec)
</code></pre><p><img src="/images/transaction/repeatable-read.png" alt="transaction"><br>开启两个事务，隔离级别均是可重复读。事务2查询数据库得到结果（步骤1），此时事务1执行更新操作（步骤2）并提交更新（步骤3），事务2再次查询数据库得到结果（步骤4），从截图中可以看出步骤1和4查询的结果是一致的，满足当前可重复读的级别。</p>
<p>以下列出幻读的情况：</p>
<p>第一种：<br><img src="/images/transaction/phantom-read1.png" alt="transaction1"></p>
<p>第二种：<br><img src="/images/transaction/phantom-read2.png" alt="transaction2"></p>
<p>不可重复读和幻读区别与联系：<br>相同点：一个事务多次读取某条数据，发现读取的数据不完全相同 ，<br>不同点：不可重复读针对数据的修改造成的读不一致，而幻读针对数据的插入和删除造成的读不一致，如同发生幻觉一样</p>
<h3 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h3><pre><code>mysql&gt; set session transaction isolation level serializable;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; show variables like &apos;%tx_isolation%&apos;;
+---------------+------------------+
| Variable_name | Value            |
+---------------+------------------+
| tx_isolation  | SERIALIZABLE |
+---------------+------------------+
1 row in set (0.00 sec)
</code></pre><p><img src="/images/transaction/serializable.png" alt="transaction"><br>开启两个事务，隔离级别均是串行化。从事务2中的报错信息来看，事务1执行插入操作（步骤1）时对表加了写锁，事务2对表进行查询时，会被阻塞，从而出现超时情况。事务2再次查询（步骤3）仍然处于等待状态，当事务1提交commit（步骤4）之后，事务2即可显示查询结果。</p>
<p>四种隔离级别的加锁策略如下：</p>
<p>读未提交（Read Uncommitted）：事务读不阻塞其他事务读和写，事务写阻塞其他事务写但不阻塞读；通过对写操作加 “持续X锁”，对读操作不加锁 实现；<br>读已提交（Read Committed）：事务读不会阻塞其他事务读和写，事务写会阻塞其他事务读和写；通过对写操作加 “持续X锁”，对读操作加 “临时S锁” 实现；不会出现脏读；<br>可重复读（Repeatable Read）：事务读会阻塞其他事务事务写但不阻塞读，事务写会阻塞其他事务读和写；通过对写操作加 “持续X锁”，对读操作加 “持续S锁” 实现；<br>序列化（Serializable）：为了解决幻读问题，行级锁做不到，需使用表级锁。</p>
<p>参考资料</p>
<p><a href="http://hedengcheng.com/?p=771" target="_blank" rel="noopener">MySQL 加锁处理分析</a></p>
]]></content>
      
        <categories>
            
            <category> Transaction </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Transaction </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB搭建Replica Set]]></title>
      <url>http://jasonhzy.github.io/2019/03/19/mongodb-replicaset/</url>
      <content type="html"><![CDATA[<p>Mongodb是NoSql数据库，它的存储方式是文档式存储，并不是Key-Value形式。Mongodb的三种集群方式的搭建：Replica Set/Sharding/Master-Slave。目前已不推荐使用主从模式；副本集提供的冗余和高可用，可以读写分离，出现故障时自动切换；分片支持部署非常大的数据集，并提高系统的吞吐量。本文只简单介绍一主一备一仲裁的Replica Set方式，主备节点存储数据，仲裁节点不存储数据。</p>
<a id="more"></a>
<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><pre><code>192.168.1.40 27011 centos7 PRIMARY（主）
192.168.1.50 27011 centos7 SECONDARY（备用节点）
192.168.1.60 27011 centos7 SECONDARY／ARBITER（备用／仲裁节点）
</code></pre><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>1、创建数据文件夹</p>
<pre><code>mkdir -p /data/mongodb/logs 
mkdir -p /data/mongodb/data
mkdir -p /data/mongodb/keyfile 
</code></pre><p>2、配置文件</p>
<p>集群各节点配置文件mongodb.conf如下：</p>
<pre><code>systemLog:
  # 日志输出方式。file/syslog,如果是file，需指定path，默认是输出到标准输出流中
  destination: file
  # 日志文件的路径
  path: /data/mongodb/logs/mongodb.log
  # 是否追加方式写入日志，默认True
  logAppend: true
  # 为true时mongod/mongos 将会尝试减少日志的输出量
  quiet: false

net:
  # 设置端口
  port : 27011
  # 绑定ip地址访问mongodb，多个ip逗号分隔
  bindIp : 0.0.0.0

processManagement:
  # 是否以守护进程方式运行，默认false
  fork: true
  # pid文件路径 
  pidFilePath: /data/mongodb/mongo.pid

storage:
  journal:
    enabled: true
  # 数据库文件位置
  dbPath: /data/mongodb/data
  # 存储引擎，mmapv1/wiredTiger/inMemory 默认wiredTiger
  engine: wiredTiger
  wiredTiger:                                                              
      engineConfig:
         cacheSizeGB: 2                                                        
         # 为 true，将数据和索引会分成两个目录 index/collection 存储
         directoryForIndexes: false                                         
         # 日志压缩，默认压缩算法 snappy，可以选择 zlib
         journalCompressor: zlib
      collectionConfig:                                                       
         blockCompressor: zlib
      indexConfig:                                                                 
         prefixCompression: true

security:
  # 集群中members之间的认证模式，可选值为 “keyFile”、“sendKeyFile”、“sendX509”、“x509”，
  # 对mongod/mongos有效
  clusterAuthMode: keyFile
  # 当 clusterAuthMode 为 “keyFile” 时，此参数指定 keyfile 的位置，mongodb 需要有访问此文件的权限,
  # 一般x00即可
  keyFile: /data/mongodb/keyfile/jasonhzy.key 
  # disabled 或者 enabled, 表示是否开启用户访问控制(Access Control)
  # 在创建认证用户之前需先disabled，创建完用户之后即可设置enabled，否则不能创建用户
  authorization: enabled

replication:
   # oplogSize的大小，单位为MB，建议空闲磁盘的5%
   oplogSizeMB: 5120
   replSetName: jasonhzy
# 性能分析
operationProfiling:
   # 认定为查询速度缓慢的时间阈值，超过该时间的查询即为缓慢查询，会被记录到日志中, 单位毫秒，默认100
   slowOpThresholdMs: 100
   # operationProfiling模式: off关闭profiling/slowOp只包含慢操作日志/all记录所有操作， 默认off
   mode: off
</code></pre><p>3.启动mongodb</p>
<pre><code>mongod -f /data/mongodb/mongodb.conf  #三台均启动
</code></pre><p>4、启动mongodb之后，客户端连接mongodb</p>
<pre><code>mongo --port=27011
</code></pre><h2 id="配置副本集"><a href="#配置副本集" class="headerlink" title="配置副本集"></a>配置副本集</h2><p>客户端连接mongodb之后进行配置</p>
<p>1、配置副本集及权重</p>
<pre><code>&gt; use admin
switched to db admin
&gt; cfg = {
     _id : &quot;jasonhzy&quot;, 
     members : [
            {_id:0,host:&quot;192.168.1.40:27011&quot;, priority : 1},
            {_id:1,host:&quot;192.168.1.50:27011&quot;, priority : 1},
            {_id:2,host:&quot;192.168.1.60:27011&quot;, priority : 1, arbiterOnly:true} //仲裁节点
    ]
};
&gt; rs.initiate(cfg); #使集群cfg配置生效
{ &quot;ok&quot; : 1 }
</code></pre><p>1）参数描述<br>_id：Replica Set的名称（需与配置文件mongodb.conf中replication.replSetName保持一致）<br>priority：表示优先级别，数值越大，表示是主节点<br>arbiterOnly：true表示仲裁节点</p>
<p>2）除上述之外，另一种添加节点方式：</p>
<pre><code>添加secondary：rs.add({host: &quot;192.168.1.40:27011&quot;, priority: 1 }) 
添加仲裁点：rs.addArb(&quot;192.168.1.60:27011&quot;)
          rs.add({host:&quot;192.168.1.60:27011&quot;,arbiterOnly:true})
</code></pre><p>3）移除节点</p>
<pre><code>rs.remove({host: &quot;192.168.1.40:27017&quot;})
</code></pre><p>2、查看状态</p>
<pre><code>&gt; rs.status()
{
    &quot;set&quot; : &quot;jasonhzy&quot;,
    &quot;date&quot; : ISODate(&quot;2019-03-13T07:46:48.200Z&quot;),
    &quot;myState&quot; : 1,
    &quot;term&quot; : NumberLong(1),
    ....
    &quot;members&quot; : [
        {
            &quot;_id&quot; : 0,
            &quot;name&quot; : &quot;192.168.1.40:27011&quot;,
            &quot;health&quot; : 1,
            &quot;state&quot; : 1,
            &quot;stateStr&quot; : &quot;PRIMARY&quot;,
            &quot;uptime&quot; : 61467,
            &quot;optime&quot; : {
                &quot;ts&quot; : Timestamp(1553050134, 1),
                &quot;t&quot; : NumberLong(34)
            },
            &quot;optimeDate&quot; : ISODate(&quot;2019-03-20T02:48:54Z&quot;),
            &quot;syncingTo&quot; : &quot;&quot;,
            &quot;syncSourceHost&quot; : &quot;&quot;,
            &quot;syncSourceId&quot; : -1,
            &quot;infoMessage&quot; : &quot;&quot;,
            &quot;electionTime&quot; : Timestamp(1553049953, 1),
            &quot;electionDate&quot; : ISODate(&quot;2019-03-20T02:45:53Z&quot;),
            &quot;configVersion&quot; : 5,
            &quot;self&quot; : true,
            &quot;lastHeartbeatMessage&quot; : &quot;&quot;
        },
        {
            &quot;_id&quot; : 1,
            &quot;name&quot; : &quot;192.168.1.50:27011&quot;,
            &quot;health&quot; : 1,
            &quot;state&quot; : 2,
            &quot;stateStr&quot; : &quot;SECONDARY&quot;,
            ...
            &quot;pingMs&quot; : NumberLong(3)
            ...
        },
        {
            &quot;_id&quot; : 2,
            &quot;name&quot; : &quot;192.168.1.60:27011&quot;,
            &quot;health&quot; : 1,
            &quot;state&quot; : 7,
            &quot;stateStr&quot; : &quot;ARBITER&quot;,
            ...
            &quot;pingMs&quot; : NumberLong(6)
            ...
        }
    ],
    &quot;ok&quot; : 1
    ...
}  
</code></pre><p>参数描述：</p>
<pre><code>self: 这个信息出现在执行rs.status()函数的成员信息中
stateStr: 用户描述服务器状态的字符串。stateStr有以下几下状态:
        1. PRIMARY：主节点，可读写
        2. SECONDARY：备份节点，默认不可读
        3. ARBITER: 仲裁者
        4. STARTUP：刚加入到复制集中，配置还未加载
        5. STARTUP2：配置已加载完，初始化状态(将长期处于该状态，直到同步完所有的数据和索引)
        6. RECOVERING：正在恢复，不适用读
        7. DOWN：节点不可到达
        8. UNKNOWN：未获取其他节点状态而不知是什么状态，一般发生在只有两个成员的架构，脑裂
        9. REMOVED：移除复制集
        10. ROLLBACK：数据回滚，在回滚结束时，转移到RECOVERING或SECONDARY状态
        11. FATAL：出错。查看日志grep “replSet FATAL”找出错原因，重新做同步
uptime: 从成员可到达一直到现在经历的时间，单位是秒。
optimeDate: 每个成员oplog最后一次操作发生的时间，这个时间是心跳报上来的，因此可能会存在延迟
lastHeartbeat: 当前服务器最后一次收到其他成员心跳的时间，如果网络故障等可能这个时间会大于2秒
pingMs: 心跳从当前服务器达到某个成员所花费的平均时间
errmsg: 成员在心跳请求中返回的状态信息，通过是一些状态信息，不全是错误信息。
state: 和stateStr是重复的，都表示成员状态，只是state是内部的叫法。
health: 表示是否服务器可达，可达是1，不可达是0
optime: 与optimeDate表达的信息是一样的，只是表示方式不同，一个是用新纪元开始的毫秒数表示的，
        一个是用一种更容易阅读的方式表示。
syncingTo: 表示当前服务器从哪个节点做同步。
</code></pre><p>由于rs.status()是从执行命令成员本身的角度得出的，由于网路等故障，这份报告可能不准确或者有些过时。</p>
<p>3、修改副本集节点</p>
<pre><code>&gt; cfg = rs.conf()
{
    &quot;_id&quot; : &quot;jasonhzy&quot;,
    &quot;version&quot; : 5,
    &quot;protocolVersion&quot; : NumberLong(1),
    &quot;members&quot; : [
        {
            &quot;_id&quot; : 0,
            &quot;host&quot; : &quot;192.168.1.40:27011&quot;,
            &quot;arbiterOnly&quot; : false,
            &quot;buildIndexes&quot; : true,
            &quot;hidden&quot; : false,
            &quot;priority&quot; : 1,
            &quot;tags&quot; : {

            },
            &quot;slaveDelay&quot; : NumberLong(0),
            &quot;votes&quot; : 1
        },
        {
            &quot;_id&quot; : 1,
            &quot;host&quot; : &quot;192.168.1.50:27011&quot;,
            &quot;arbiterOnly&quot; : false,
            &quot;hidden&quot; : false,
            &quot;priority&quot; : 1,
            ...
        },
        {
            &quot;_id&quot; : 2,
            &quot;host&quot; : &quot;192.168.1.60:27011&quot;,
            &quot;arbiterOnly&quot; : true,
            &quot;hidden&quot; : false,
            &quot;priority&quot; : 1,
            ...
        }
    ],
    &quot;settings&quot; : {
        &quot;chainingAllowed&quot; : true,
        &quot;heartbeatIntervalMillis&quot; : 2000,
        &quot;heartbeatTimeoutSecs&quot; : 10,
        &quot;electionTimeoutMillis&quot; : 10000,
        &quot;catchUpTimeoutMillis&quot; : -1,
        &quot;catchUpTakeoverDelayMillis&quot; : 30000,
        &quot;getLastErrorModes&quot; : {

        },
        &quot;getLastErrorDefaults&quot; : {
            &quot;w&quot; : 1,
            &quot;wtimeout&quot; : 0
        },
        &quot;replicaSetId&quot; : ObjectId(&quot;5c88b407092b73db0f7882b9&quot;)
    }
}
&gt; cfg.members[0].host = &quot;192.168.1.30:27011&quot;
&gt; rs.reconfig(cfg)  # 强制更新副本集配置 rs.reconfig(cfg, {&quot;force&quot;: true}) 
</code></pre><p>参数描述：</p>
<pre><code>version: 每修改一次集群的配置，副本集的version都会+1
protocolVersion: 协议版本
buildIndexes: 默认为true.用来表示同步的时候是否同步索引.如果要设置为false,则必须将priority设置为0
hidden: 表示节点是否为隐藏节点,true即隐藏节点将不对外服务,只是单纯的同步信息。rs.isMaster()方法将
   无法查看到隐藏节点的信息,但是可以使用rs.status()查看.设置隐藏节点必须首先将节点的priority设置为0     
priority: 表示权重,默认为1,如果将priority设置为0那这个节点将永远无法成为primary节点
slaveDelay: 复制延迟,这个是整数,单位为秒,用来设置复制的延时.一般用来防止误操作,延迟节点必须优先级
   设置为0, hidden设置为true,然后设置slaveDelay值
votes: 表示这个节点是否有权利进行投票.
tags: 表示标记,例如可以标记这个节点的作用等
chainingAllowed:表示是否允许链式复制,即某个secondary可以作为其它的secondary的源,默认是true.
heartbeatIntervalMillis:表示heartbeat的间隔时间,默认是没个两秒钟发送一个hearbeat包.
heartbeatTimeoutSecs:表示心跳检测超时时间,默认是10秒.
electionTimeoutMillis:表示选举超时时间,默认是10秒.
</code></pre><p>复制链问题：<br>数据复制时可以从主节点直接复制，也可以从备份节点开始复制，从备份节点复制可以形成复制链，如果想禁止复制链，即所有的数据都从主节点复制，可以通过chainingAllowed属性来设置，具体步骤如下：</p>
<pre><code>config=rs.config()
config.settings.chainingAllowed=false
rs.reconfig(config) 
</code></pre><p>4、添加备份／延迟等节点<br>1）hidden（成员用于支持专用功能）：设置true后此机器在读写中都不可见，并且不会被选举为Primary，但是可以投票，一般用于备份数据</p>
<pre><code>rs.add({&quot;host&quot;:&quot;192.168.1.100:27011&quot;, &quot;priority&quot;:0, &quot;hidden&quot;:true})
</code></pre><p>2）Delayed（成员用于支持专用功能）：可以指定一个时间延迟从primary节点同步数据。主要用于处理误删除数据马上同步到从节点导致的不一致问题。</p>
<pre><code>rs.add({&quot;host&quot;:&quot;192.168.1.100:27011&quot;, &quot;priority&quot;:0, &quot;hidden&quot;:true, &quot;slaveDelay&quot;:60}) #单位 s
</code></pre><p>3）Secondary-Only:不能成为primary节点，只能作为secondary副本节点，防止一些性能不高的节点成为主节点。<br>4）Non-Voting：没有选举权的secondary节点，纯粹的备份数据节点。</p>
<style>
    table th:first-of-type {
        width: 20%;
    }
</style>

<p>具体如下：     </p>
<table>
<thead>
<tr>
<th style="text-align:left">角色</th>
<th>primary(能否)</th>
<th>客户端可见</th>
<th>参与投票</th>
<th>延迟同步</th>
<th>复制数据</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Default</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10004;</td>
</tr>
<tr>
<td style="text-align:left">Secondary-Only</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10004;</td>
</tr>
<tr>
<td style="text-align:left">Hidden</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10004;</td>
</tr>
<tr>
<td style="text-align:left">Delayed</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10004;</td>
</tr>
<tr>
<td style="text-align:left">Arbiters</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10008;</td>
</tr>
<tr>
<td style="text-align:left">Non-Voting</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10004;</td>
</tr>
</tbody>
</table>
<h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>mongodb默认是从主节点读写数据的，副本节点上不允许读，需要设置副本节点可以读：</p>
<pre><code>jasonhzy:SECONDARY&gt; db.getMongo().setSlaveOk();  # 或 rs.slaveOk();
</code></pre><p>支持的几种读取策略(Read Preferences)如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">模式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">primary</td>
<td style="text-align:left">主节点，默认模式，读操作只在主节点，如果主节点不可用，报错或者抛出异常。</td>
</tr>
<tr>
<td style="text-align:left">primaryPreferred</td>
<td style="text-align:left">首选主节点，大多情况下读操作在主节点，如果主节点不可用，如故障转移，读操作在从节点。</td>
</tr>
<tr>
<td style="text-align:left">secondary</td>
<td style="text-align:left">从节点，读操作只在从节点， 如果从节点不可用，报错或者抛出异常。</td>
</tr>
<tr>
<td style="text-align:left">secondaryPreferred</td>
<td style="text-align:left">首选从节点，大多情况下读操作在从节点，特殊情况（如单主节点架构）读操作在主节点。</td>
</tr>
<tr>
<td style="text-align:left">nearest</td>
<td style="text-align:left">最邻近节点，读操作在最邻近的成员，可能是主节点或者从节点</td>
</tr>
</tbody>
</table>
<h2 id="集群安全认证"><a href="#集群安全认证" class="headerlink" title="集群安全认证"></a>集群安全认证</h2><h3 id="集群之间的安全认证"><a href="#集群之间的安全认证" class="headerlink" title="集群之间的安全认证"></a>集群之间的安全认证</h3><p>集群之间的复制增加keyFile认证</p>
<pre><code>#生成key
openssl rand -base64 500 &gt; /data/mongodb/keyfile/jasonhzy.key
#修改权限
chmod 600 /data/mongodb/keyfile/jasonhzy.key
</code></pre><p>将该key放到集群中每一台的机器上，且必须保持一致    </p>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>在mongodb.conf启动配置文件中增加配置项：</p>
<pre><code>security:
  keyFile=/data/mongodb/keyfile/jasonhzy.key
</code></pre><h3 id="主库创建用户"><a href="#主库创建用户" class="headerlink" title="主库创建用户"></a>主库创建用户</h3><h4 id="MongoDB内建角色"><a href="#MongoDB内建角色" class="headerlink" title="MongoDB内建角色"></a>MongoDB内建角色</h4><p>1、数据库用户角色</p>
<pre><code>read：允许用户读取指定数据库
readWrite：允许用户读写指定数据库
</code></pre><p>2、数据库管理员角色</p>
<pre><code>dbAdmin：允许用户进行索引创建、删除，查看统计或访问system.profile，但没有角色和用户管理的权限。
userAdmin：提供了在当前数据库中创建和修改角色和用户的能力。
dbOwner： 提供对数据库执行任何管理操作的能力。这个角色组合了readWrite、dbAdmin和userAdmin角色
        授予的特权。
</code></pre><p>3、集群管理角色</p>
<pre><code>clusterAdmin ： 提供最强大的集群管理访问。组合clusterManager、clusterMonitor和hostManager角色的能力，
            还提供了dropDatabase操作。
clusterManager ： 在集群上提供管理和监视操作。可以访问配置和本地数据库，这些数据库分别用于分片和复制。
clusterMonitor ： 提供对监控工具的只读访问，例如MongoDB云管理器和Ops管理器监控代理。
hostManager ： 提供监视和管理服务器的能力。
</code></pre><p>4、备份恢复角色</p>
<pre><code>backup ： 提供备份数据所需的能力，使用MongoDB云管理器备份代理、Ops管理器备份代理或使用mongodump
restore ： 提供使用mongorestore恢复数据所需的能力
</code></pre><p>5、所有数据库角色</p>
<pre><code>readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限 
readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限 
userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限 
dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限
</code></pre><p>6、超级用户角色</p>
<pre><code>root：提供对readWriteAnyDatabase、dbAdminAnyDatabase、userAdminAnyDatabase、
    clusterAdmin、restore和backup的所有资源的访问
</code></pre><p>7、内部角色</p>
<pre><code>__system : 提供对数据库中任何对象的任何操作的特权
</code></pre><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><p>1、创建超级用户角色root</p>
<pre><code>jasonhzy:PRIMARY&gt; use admin
jasonhzy:PRIMARY&gt; db.createUser(  
    {  
        user:&quot;root&quot;,   
        pwd:&quot;123456&quot;,  
        roles:[{role:&quot;root&quot;,db:&quot;admin&quot;}]
    }  
);
</code></pre><p>以”forum”数据库为例，创建相应的角色用户：</p>
<pre><code>use forum //创建数据库
</code></pre><p>2、创建数据库管理员</p>
<pre><code>jasonhzy:PRIMARY&gt; use forum
jasonhzy:PRIMARY&gt; db.createUser({
    user: &quot;admin&quot;,
    pwd: &quot;123456&quot;,
    roles: [{ role: &quot;dbOwner&quot;, db: &quot;forum&quot; }]
});
</code></pre><p>3、创建数据库用户</p>
<p>1）创建一个可读写的用户</p>
<pre><code>jasonhzy:PRIMARY&gt; use forum
jasonhzy:PRIMARY&gt; db.createUser({
    user: &quot;rw&quot;,
    pwd: &quot;123456&quot;,
    roles: [{ role: &quot;readWrite&quot;, db: &quot;forum&quot; }]
});
</code></pre><p>2）创建一个只读用户 </p>
<pre><code>jasonhzy:PRIMARY&gt; use forum
jasonhzy:PRIMARY&gt; db.createUser({
    user: &quot;read&quot;,
    pwd: &quot;123456&quot;,
    roles: [{ role: &quot;read&quot;, db: &quot;forum&quot; }]
});
</code></pre><h2 id="安全停止MongoDB进程"><a href="#安全停止MongoDB进程" class="headerlink" title="安全停止MongoDB进程"></a>安全停止MongoDB进程</h2><p>MongoDB进程如果直接kill掉进程或机器突然断电等都会可能MongoDB造成数据损坏，所以在停止MongoDB服务的时候，不要用kill -9 或 killall -9 直接干掉MongoDB的进程·</p>
<p>要安全停止可以有两种信号：sigint信号，或者sigterm信号</p>
<p>如何安全kill停止：</p>
<pre><code>kill -2 8888 #其中 8888 为mongod进程号，该进程号可以通过 ps -axu |grep mongo 获取； -2 表示向mongod进程发送sigint信号
kill -4 8888 #其中 8888 为mongod进程号 ，该进程号可以通过 ps -axu |grep mongo 获取； -4 表示向mongod进程发送sigterm信号
</code></pre><p>mongod进程收到sigint信号或者sigterm信号，会做一些处理：关闭所有打开的连接，将内存数据强制刷新到磁盘，当前的操作执行完毕后在安全停止服务。</p>
<p>推荐停止方法：登录控制台使用mongod命令shutdown的安全停止方式：</p>
<pre><code>mongo -host 127.0.0.1 -port 27011
jasonhzy:PRIMARY&gt; use admin;                     --使用管理员数据库
jasonhzy:PRIMARY&gt; db.shutdownServer();           --安全关闭MongoDB
</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>1、查看oplog状态： rs.printReplicationInfo()</p>
<pre><code>jasonhzy:PRIMARY&gt; rs.printReplicationInfo()
configured oplog size:   51200MB
log length start to end: 720145secs (200.04hrs)
oplog first event time:  Wed Mar 13 2019 15:40:55 GMT+0800 (CST)
oplog last event time:   Thu Mar 21 2019 23:43:20 GMT+0800 (CST)
now:                     Thu Mar 21 2019 23:43:29 GMT+0800 (CST)
</code></pre><p>字段说明：</p>
<pre><code>configured oplog size：配置的oplog文件大小。
log length start to end：oplog日志的启用时间段。
oplog first event time：第一个事务日志的产生时间。
oplog last event time：最后一个事务日志的产生时间。
now：现在的时间。
</code></pre><p>2、查看复制节点及延迟：  rs.printSlaveReplicationInfo()</p>
<pre><code>jasonhzy:PRIMARY&gt; rs.printSlaveReplicationInfo()
source: 192.168.1.50:27011
    syncedTo: Fri Mar 22 2019 11:31:57 GMT+0800 (CST)
    0 secs (0 hrs) behind the primary 
source: 192.168.1.60:27011
    syncedTo: Fri Mar 22 2019 11:31:57 GMT+0800 (CST)
    0 secs (0 hrs) behind the primary 
</code></pre><p>3、查看服务状态详情:   db.serverStatus()</p>
<p>参考资料</p>
<p><a href="https://juejin.im/entry/58fc1d891b69e6005895eec6" target="_blank" rel="noopener">数据库高可用和分区解决方案 - MongoDB 篇</a><br><a href="http://www.cnblogs.com/kevingrace/p/5685486.html" target="_blank" rel="noopener">Mongodb主从复制/副本集/分片集群介绍</a></p>
]]></content>
      
        <categories>
            
            <category> MongoDB </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP结合MySQL／Redis秒杀系统]]></title>
      <url>http://jasonhzy.github.io/2019/03/14/php-seckill/</url>
      <content type="html"><![CDATA[<p>PHP结合MySQL或Redis简单设计的秒杀系统，在高并发情况下下单，防止商品库存超发的情况。</p>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>1、PHP5.6<br>2、Redis4.0.2<br>3、MySQL5.7</p>
<h2 id="MySQL表格"><a href="#MySQL表格" class="headerlink" title="MySQL表格"></a>MySQL表格</h2><p>创建产品表product：</p>
<pre><code>CREATE TABLE `product` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(60) NOT NULL DEFAULT &apos;&apos;,
  `num` int(11) NOT NULL DEFAULT &apos;0&apos;,
  `version` int(11) NOT NULL DEFAULT &apos;0&apos;,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4
</code></pre><p>创建订单表bill：</p>
<pre><code>CREATE TABLE `bill` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `bill_no` varchar(60) NOT NULL DEFAULT &apos;&apos;,
  `user_id` int(11) NOT NULL,
  `product_id` int(11) NOT NULL,
  `count` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `userId` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
</code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre><code>//concurrency.php
&lt;?php
    try {
        $conn = get_mysql_conn();

        $userId = rand(1, 10000);
        $bill_no = &apos;bill&apos; . (int)(microtime(true) * 1000) . $userId;
        $buy_num = 1;
        miaosha_x($conn, $userId, $bill_no, $buy_num);
        //miaosha_redis($conn, $userId, $bill_no, $buy_num);
        //miaosha_redis($conn, $userId, $bill_no, $buy_num);
    } catch (Exception $e) {
        exit($e-&gt;getMessage());
    }

    /**
     * @desc: 连接mysql
     * @return \mysqli
     * @throws \Exception
     */
    function get_mysql_conn()
    {
        $conf = array(
            &apos;host&apos; =&gt; &apos;192.168.1.40&apos;,
            &apos;db&apos; =&gt; &apos;test&apos;,
            &apos;user&apos; =&gt; &apos;jason&apos;,
            &apos;pwd&apos; =&gt; &apos;123456&apos;,
            &apos;port&apos; =&gt; 8888
        );

        $conn = new mysqli($conf[&apos;host&apos;],$conf[&apos;user&apos;],$conf[&apos;pwd&apos;],$conf[&apos;db&apos;],$conf[&apos;port&apos;]);
        if (mysqli_connect_errno()) {
            throw new Exception(mysqli_connect_error());
        }
        return $conn;
    }

    /**
     * @desc: 连接redis
     * @return \Redis
     * @throws \Exception
     */
    function get_redis_conn()
    {
        try {
            $redis = new Redis();
            $redis-&gt;pconnect(&quot;127.0.0.1&quot;, 6379); //采用localhost连接会很慢
            $redis-&gt;auth(&quot;beecloud&quot;);
            return $redis;
        } catch (Exception $e) {
            throw new Exception(&quot;Redis: &quot; . $e-&gt;getMessage());
        }
    }

    /**
     * @desc: 利用数据库的悲观锁（排它锁X）
     *
     * @param $conn
     * @param $userId
     * @param $bill_no
     * @param $buy_num
     */
    function miaosha_x($conn, $userId, $bill_no, $buy_num)
    {
        $conn-&gt;query(&apos;BEGIN&apos;);
        $sql = &quot;select * from product where id = 1 for update&quot;;
        $rs = $conn-&gt;query($sql);
        $row = $rs-&gt;fetch_assoc();
        if (!empty($row)) {
            $num = $row[&apos;num&apos;];
            $id = $row[&apos;id&apos;];
            if ($num &gt; 0) {
                $sql = &quot;update product set num = num - $buy_num where id = &quot; . $id;
                $conn-&gt;query($sql);
                if (mysqli_affected_rows($conn)) {
                    $sql = &quot;insert into bill(`user_id`, `product_id`, `bill_no`, `count`) 
                      values($userId, $id, &apos;$bill_no&apos;, $buy_num)&quot;;
                    $conn-&gt;query($sql);
                    if (!mysqli_affected_rows($conn)) {
                        $conn-&gt;query(&apos;ROLLBACK&apos;);
                    }
                }
            }
        }
        $conn-&gt;query(&apos;COMMIT&apos;);
        $conn-&gt;close();
    }

    /**
     * @desc: 利用数据库的乐观锁（共享锁S）
     *
     * @param $conn
     * @param $userId
     * @param $bill_no
     * @param $buy_num
     */
    function miaosha_s($conn, $userId, $bill_no, $buy_num)
    {
        $conn-&gt;query(&apos;BEGIN&apos;);
        $sql = &quot;select * from product where id = 1&quot;;
        $rs = $conn-&gt;query($sql);
        $row = $rs-&gt;fetch_assoc();
        if (!empty($row)) {
            $version = $row[&apos;version&apos;];
            $num = $row[&apos;num&apos;];
            $id = $row[&apos;id&apos;];
            if ($num &gt; 0) {
                //$sql = &quot;update product set num = num - 1 where id = &quot; . $id . &quot; and num = $num&quot;;
                $sql = &quot;update product set num = num - $buy_num, version = version + 1 where id = &quot; . 
                    $id . &quot; and version = $version&quot;;
                $conn-&gt;query($sql);
                if (mysqli_affected_rows($conn)) {
                    $sql = &quot;insert into bill(`user_id`, `product_id`, `bill_no`, `count`) 
                      values($userId, $id, &apos;$bill_no&apos;, $buy_num)&quot;;
                    $conn-&gt;query($sql);
                    if (!mysqli_affected_rows($conn)) {
                        $conn-&gt;query(&apos;ROLLBACK&apos;);
                    }
                }
            }
        }
        $conn-&gt;query(&apos;COMMIT&apos;);
        $conn-&gt;close();
    }

    /**
     * @desc: 利用redis实现商品秒杀下单
     *
     * @param $conn
     * @param $userId
     * @param $bill_no
     * @param $buy_num
     *
     * @throws \Exception
     */
    function miaosha_redis($conn, $userId, $bill_no, $buy_num)
    {
        $conn-&gt;query(&apos;BEGIN&apos;);
        $sql = &quot;select * from product where id = 1&quot;;
        $rs = $conn-&gt;query($sql);
        $row = $rs-&gt;fetch_assoc();
        if (!empty($row)) {
            $num = $row[&apos;num&apos;];
            $id = $row[&apos;id&apos;];

            $redis = get_redis_conn();

            $good_amount_key = &apos;product_&apos; . $id;
            //商品总数
            if (!$redis-&gt;exists($good_amount_key)) {
                $redis-&gt;setnx($good_amount_key, $num);
            }
            $good_amount = $redis-&gt;get($good_amount_key);

            $key = &apos;product_num_&apos; . $id;
            if (!($redis-&gt;incrBy($key, $buy_num) &gt; $good_amount)) {
                $sql = &quot;update product set num = num - $buy_num where id = &quot; . $id;
                $conn-&gt;query($sql);
                if (mysqli_affected_rows($conn)) {
                    $sql = &quot;insert into bill(`user_id`, `product_id`, `bill_no`, `count`) 
                      values($userId, $id, &apos;$bill_no&apos;, $buy_num)&quot;;
                    $conn-&gt;query($sql);
                    if (!mysqli_affected_rows($conn)) {
                        $conn-&gt;query(&apos;ROLLBACK&apos;);
                    }
                }
            }
            //关闭redis连接
            $redis-&gt;close();
            $conn-&gt;query(&apos;COMMIT&apos;);
            $conn-&gt;close();
        }
    }
</code></pre><h2 id="ab测试"><a href="#ab测试" class="headerlink" title="ab测试"></a>ab测试</h2><p>测试命令：</p>
<pre><code>ab -c 110 -n 1000 http://localhost/concurrency.php
</code></pre><p>参数描述：</p>
<pre><code>-n 表示请求数
-c 表示并发数 
-t 表示多少s内并发和请求
</code></pre><p>利用数据库的悲观锁（排它锁X）测试结果：</p>
<pre><code>This is ApacheBench, Version 2.3 &lt;$Revision: 1843412 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 100 requests
Completed 200 requests
Completed 300 requests
Completed 400 requests
Completed 500 requests
Completed 600 requests
Completed 700 requests
Completed 800 requests
Completed 900 requests
Completed 1000 requests
Finished 1000 requests


Server Software:        nginx
Server Hostname:        127.0.0.1
Server Port:            80

Document Path:          /concurrent.php
Document Length:        0 bytes

Concurrency Level:      110   # 并发请求数
Time taken for tests:   4.185 seconds  # 整个测试持续的时间
Complete requests:      1000  # 完成的请求数
Failed requests:        0  # 失败的请求数
Total transferred:      130000 bytes # 所有请求的响应数据长度总和，包括每个http响应数据的头信息
         和正文数据的长度。注意这里不包括http请求数据的长度，从Web服务器流向用户PC的应用层数据总长度
HTML transferred:       0 bytes # 所有请求的响应数据中正文数据的总和，也就是减去了Total transferred
         中http响应数据中头信息的长度。
Requests per second:    238.94 [#/sec] (mean) # 最重要的指标之一:吞吐率，表示当前机器的整体性能，
         值越大越好。即：Complete requests / Time taken for tests， mean表示这是一个平均值
Time per request:       460.375 [ms] (mean) # 最重要的指标之二: 用户平均请求等待时间，
         即：Time taken for tests / (Complete requests /Concurrency Level)
Time per request:       4.185 [ms] (mean, across all concurrent requests) # 服务器平均请求处理
         时间，即：Time taken for tests / Complete requests
Transfer rate:          30.33 [Kbytes/sec] received # 这些请求在单位时间内从服务器获取的数据长度，
         即：Total transferred / Time taken for tests

# 花费在连接Connect，处理Processing，等待Waiting的时间的最小min，平均值mean，标准差[+/-sd]，
# 中值median，最大表max的一个表。
Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    1   0.9      0       4
Processing:    35  435 102.9    418     805
Waiting:       35  435 102.9    418     805
Total:         39  435 102.7    419     807
WARNING: The median and mean for the initial connection time are not within a normal deviation
        These results are probably not that reliable.

Percentage of the requests served within a certain time (ms)
  50%    419 # 50%请求的响应时间在419ms内
  66%    443 # ...以此类推
  75%    455
  80%    463
  90%    549
  95%    667
  98%    748
  99%    773
 100%    807 (longest request)
</code></pre>]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu安装中文]]></title>
      <url>http://jasonhzy.github.io/2019/03/13/ubuntu-chinese/</url>
      <content type="html"><![CDATA[<p>Ubuntu系统上传的中文文件名称经常出现乱码，此时我们就需要系统支持中文环境。</p>
<a id="more"></a>
<h2 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h2><p>locale查看当前系统默认采用的字符集。</p>
<pre><code>LANG=en_US.UTF-8
LC_CTYPE=&quot;en_US.UTF- 8&quot;                 #用户所使用的语言符号及其分类
LC_NUMERIC=&quot;en_US.UTF- 8&quot;               #数字
LC_TIME=&quot;en_US.UTF-8&quot;                   #时间显示格式
LC_COLLATE=&quot;en_US.UTF-8&quot;                #比较和排序习惯
LC_MONETARY=&quot;en_US.UTF-8&quot;               #LC_MONETARY
LC_MESSAGES=&quot;en_US.UTF- 8&quot;              #信息主要是提示信息,错误信息,状态信息,标题,标签,按钮和菜单等
LC_PAPER=&quot;en_US.UTF- 8&quot;                 #默认纸张尺寸大小
LC_NAME=&quot;en_US.UTF-8&quot;                   #姓名书写方式
LC_ADDRESS=&quot;en_US.UTF-8&quot;                #地址书写方式
LC_TELEPHONE=&quot;en_US.UTF-8&quot;              #电话号码书写方式
LC_MEASUREMENT=&quot;en_US.UTF-8&quot;            #度量衡表达方式
LC_IDENTIFICATION=&quot;en_US.UTF-8&quot;         #对自身包含信息的概述
LC_ALL=
</code></pre><p>local设定的优先级关系，LC_ALL是最上级设定或者强制设定（LC_ALL的值将覆盖所有其他的locale设定），而LANG是默认设定值。 </p>
<pre><code>LC_ALL &gt; LC_* &gt;LANG
</code></pre><p>查看系统内安装的locale：</p>
<pre><code>locale -a                                   
</code></pre><h2 id="安装中文语言包"><a href="#安装中文语言包" class="headerlink" title="安装中文语言包"></a>安装中文语言包</h2><p>中文语言包：</p>
<pre><code>language-pack-zh-hans 简体中文
language-pack-zh-hans-base
language-pack-zh-hant 繁体中文
language-pack-zh-hant-base
</code></pre><p>安装命令：</p>
<pre><code>apt-get install language-pack-zh-hans language-pack-zh-hans-base
</code></pre><h2 id="配置语言环境变量"><a href="#配置语言环境变量" class="headerlink" title="配置语言环境变量"></a>配置语言环境变量</h2><p>编辑文件/etc/environment，支持中／英文环境</p>
<pre><code># 英文
LC_CTYPE=en_US.UTF-8
LC_ALL=en_US.UTF-8
LANG=en_US.UTF-8
LANGUAGE=en_US:en

# 中文
LC_CTYPE=zh_CN.UTF-8
LC_ALL=zh_CN.UTF-8
LANG=zh_CN.UTF-8
LANGUAGE=zh_CN:zh
</code></pre><p>使其生效：</p>
<pre><code>locale-gen 
或
dpkg-reconfigure locales  
</code></pre>]]></content>
      
        <categories>
            
            <category> Ubuntu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux NFS配置]]></title>
      <url>http://jasonhzy.github.io/2019/02/08/linux-nfs/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>NFS（Network File System）即网络文件系统。主要功能是通过局域网络让不同的主机系统之间可以共享文件或目录。NFS在文件传送或信息传送过程中依赖于RPC协议。NFS存储文件系统简单易用、方便部署、数据可靠、服务稳定；存放的数据都在文件系统之上，所有数据都是能看得见。但存在单点故障, 构建高可用维护麻烦；且客户端挂载无账号密码设置及数据明文，导致安全性一般。</p>
<a id="more"></a>
<h2 id="RPC协议介绍"><a href="#RPC协议介绍" class="headerlink" title="RPC协议介绍"></a>RPC协议介绍</h2><p>RPC（Remote Procedure Call）远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。其工作在TCP/UDP的111端口。建立在Socket之上的，主要是简化编程的工作在底层提供网络之间的通信。当客户端尝试使用RPC Server所提供的服务时，由于Client需要取得一个可以连接的端口（port）才能够使用RPC Server所提供的服务，因此，客户端首先去请求rpcbind，然后rpcbind将自己管理的端口映射告知客户端，好让客户端可以连接上服务，因此启动NFS之前，一定要先启动rpcbind。<br>NFS系统守护进程（rpc.nfsd和rpc.mountd）：<br>rpc.nfsd∶<br>这个 daemon 主要的功能即管理客户端是否能够登入主机的权限<br>rpc.mountd<br>这个 daemon 主要的功能即管理 NFS 的档案系统。当客户端顺利通过 rpc.nfsd 而登入主机之后，在他可以使用 NFS 服务器提供的档案之前，还要经过档案使用权限 (即-rwxrwxrwx 与 owner／group等权限) 的认证程序！除此之外还要根据NFS的设定档 /etc/exports 来比对 Client 的权限，当都通过这些权限设置之后客户端即可取得使用NFS档案的权限</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><pre><code>NFS服务端 CentOS7.4 192.168.1.60
NFS客户端 CentOS7.4 192.168.1.76 
</code></pre><h2 id="安装NFS与配置"><a href="#安装NFS与配置" class="headerlink" title="安装NFS与配置"></a>安装NFS与配置</h2><p>NFS的常用目录:</p>
<pre><code>/etc/exports        #NFS服务的主要配置文件
/usr/sbin/exportfs  #NFS服务的管理命令
/usr/sbin/showmount #客户端的查看命令
/var/lib/nfs/etab   #记录NFS分享出来的目录的完整权限设定值
/var/lib/nfs/xtab   #记录曾经登录过的客户端信息
</code></pre><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="安装服务端"><a href="#安装服务端" class="headerlink" title="安装服务端"></a>安装服务端</h4><p>检查下本地是否已经安装，如果安装则无需重复安装包：</p>
<pre><code>rpm -qa | grep rpcbind
rpm -qa | grep nfs
</code></pre><p>CentOS系统：</p>
<pre><code>#CentOS系统服务端
yum -y install nfs-utils
yum -y install rpcbind 
</code></pre><p>Ubuntu系统：</p>
<pre><code>#Ubuntu服务端
apt-get install nfs-kernel-server
</code></pre><p>将服务加入开机自启动，并启动服务：</p>
<pre><code>systemctl enable rpcbind nfs-server
systemctl start rpcbind nfs-server
</code></pre><p>查看nfs服务向rpc注册的端口信息(当前nfs-server未启动，所有没有注册端口)：</p>
<pre><code>[root@localhost ~]# rpcinfo -p
program vers proto   port  service
100000    4   tcp    111  portmapper
100000    3   tcp    111  portmapper
100000    2   tcp    111  portmapper
100000    4   udp    111  portmapper
100000    3   udp    111  portmapper
100000    2   udp    111  portmapper
</code></pre><p>如果此时启动nfs,可以发现nfs随机注册的端口如下（对于此种情况下，如果未开启防火墙，随机端口是没有问题的，一旦开启就需要将端口固定下来了）：</p>
<pre><code>[root@localhost ~]# rpcinfo -p
program vers proto   port  service
100000    4   tcp    111  portmapper
100000    3   tcp    111  portmapper
100000    2   tcp    111  portmapper
100000    4   udp    111  portmapper
100000    3   udp    111  portmapper
100000    2   udp    111  portmapper
100005    1   udp  20048  mountd
100005    1   tcp  20048  mountd
100005    2   udp  20048  mountd
100005    2   tcp  20048  mountd
100005    3   udp  20048  mountd
100005    3   tcp  20048  mountd
100003    3   tcp   2049  nfs
100003    4   tcp   2049  nfs
100227    3   tcp   2049  nfs_acl
100003    3   udp   2049  nfs
100003    4   udp   2049  nfs
100227    3   udp   2049  nfs_acl
100021    1   udp  37045  nlockmgr
100021    3   udp  37045  nlockmgr
100021    4   udp  37045  nlockmgr
100021    1   tcp  39375  nlockmgr
100021    3   tcp  39375  nlockmgr
100021    4   tcp  39375  nlockmgr
</code></pre><h4 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h4><p>NFS的防火墙很难设定规则，除了固定的nfs2049、portmapper111之外， 还有很多不固定的端口是由rpc.mountd, rpc.rquotad等服务所开启的。因此我们需要在/etc/sysconfig/nfs指定特定的端口，这样每次启动nfs时，相关服务启动的端口就会固定，如此即可设置防护墙！</p>
<h5 id="固定nfs服务端口"><a href="#固定nfs服务端口" class="headerlink" title="固定nfs服务端口"></a>固定nfs服务端口</h5><p>固定端口nfs 2049、portmapper 111，另外3个服务端口可设置为mountd 892、rpc.statd 662、 nlockmgr 32803、32769</p>
<p>配置：<br>1.修改/etc/sysconfig/nfs文件，将下列内容的注释去掉，如果没有则添加：</p>
<pre><code># TCP port rpc.lockd should listen on.
LOCKD_TCPPORT=32803
# UDP port rpc.lockd should listen on.
LOCKD_UDPPORT=32769

# Port rpc.mountd should listen on.
MOUNTD_PORT=892

# Port rpc.statd should listen on.
STATD_PORT=662
# Outgoing port statd should used. The default is port
# is random
STATD_OUTGOING_PORT=2020
</code></pre><p>端口配置完成后查看（注意重启nfs与服务器）：</p>
<pre><code>[root@localhost ~]# rpcinfo -p
program vers proto   port  service
100000    4   tcp    111  portmapper
100000    3   tcp    111  portmapper
100000    2   tcp    111  portmapper
100000    4   udp    111  portmapper
100000    3   udp    111  portmapper
100000    2   udp    111  portmapper
100005    1   udp    892  mountd
100024    1   udp    662  status
100005    1   tcp    892  mountd
100024    1   tcp    662  status
100005    2   udp    892  mountd
100005    2   tcp    892  mountd
100005    3   udp    892  mountd
100005    3   tcp    892  mountd
100003    3   tcp   2049  nfs
100003    4   tcp   2049  nfs
100227    3   tcp   2049  nfs_acl
100003    3   udp   2049  nfs
100003    4   udp   2049  nfs
100227    3   udp   2049  nfs_acl
100021    1   udp  32769  nlockmgr
100021    3   udp  32769  nlockmgr
100021    4   udp  32769  nlockmgr
100021    1   tcp  32803  nlockmgr
100021    3   tcp  32803  nlockmgr
100021    4   tcp  32803  nlockmgr
</code></pre><h5 id="CentOS7下配置"><a href="#CentOS7下配置" class="headerlink" title="CentOS7下配置"></a>CentOS7下配置</h5><p>编辑文件 /etc/firewalld/zones/public.xml：</p>
<pre><code>#vim /etc/firewalld/zones/public.xml
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;zone&gt;
  &lt;short&gt;Public&lt;/short&gt;
  &lt;description&gt;For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.&lt;/description&gt;
  &lt;service name=&quot;ssh&quot;/&gt;
  &lt;service name=&quot;http&quot;/&gt; 
  &lt;service name=&quot;https&quot;/&gt; 
  &lt;port protocol=&quot;tcp&quot; port=&quot;8080&quot;/&gt;
  &lt;port protocol=&quot;tcp&quot; port=&quot;22&quot;/&gt;
  &lt;port protocol=&quot;tcp&quot; port=&quot;111&quot;/&gt;
  &lt;port protocol=&quot;tcp&quot; port=&quot;662&quot;/&gt;
  &lt;port protocol=&quot;tcp&quot; port=&quot;892&quot;/&gt;
  &lt;port protocol=&quot;tcp&quot; port=&quot;2049&quot;/&gt;
  &lt;port protocol=&quot;tcp&quot; port=&quot;32803&quot;/&gt;
  &lt;port protocol=&quot;udp&quot; port=&quot;111&quot;/&gt;
  &lt;port protocol=&quot;udp&quot; port=&quot;662&quot;/&gt;
  &lt;port protocol=&quot;udp&quot; port=&quot;892&quot;/&gt;
  &lt;port protocol=&quot;udp&quot; port=&quot;2049&quot;/&gt;
  &lt;port protocol=&quot;udp&quot; port=&quot;32769&quot;/&gt;
&lt;/zone&gt;
</code></pre><p>注意重启防火墙</p>
<h3 id="创建共享目录"><a href="#创建共享目录" class="headerlink" title="创建共享目录"></a>创建共享目录</h3><p>创建服务端共享目录，例如：</p>
<pre><code>mkdir /data   
</code></pre><h3 id="NFS共享目录文件配置"><a href="#NFS共享目录文件配置" class="headerlink" title="NFS共享目录文件配置"></a>NFS共享目录文件配置</h3><p>/etc/exports文件内容：</p>
<pre><code>#vi /etc/exports
/data     192.168.1.76(rw,sync,secure,no_root_squash,no_all_squash)
</code></pre><p>以上配置分为三个部分：</p>
<p>第一部分就是本地要共享出去的目录。<br>第二部分为允许访问的主机（可以是一个IP，一个IP段如192.168.0.0/24、192.168.0.0/255.255.255.0，指定域名的主机 <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> ，指定域中的所有主机 <em>.example.com ，所有主机</em>）。<br>第三部分小括号里面的，为一些权限选项。权限说明：</p>
<pre><code>rw ：读写；
ro ：只读；
sync ：同步模式，内存中数据时时写入磁盘
async ：不同步，把内存中数据定期写入磁盘中
secure ：nfs通过1024以下的安全TCP/IP端口发送
insecure ：nfs通过1024以上的端口发送
no_root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，
            也拥有root权限。 显然开启这项是不安全的
root_squash：当客户端登陆NFS的身份为root用户时，将客户端的root用户及所属组都映射为匿名用户
            或用户组（默认设置）， 通常使用nobody或nfsnobody身份
subtree：若输出目录是一个子目录，则nfs服务器将检查其父目录的权限(默认设置)。
no_subtree：即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率
no_all_squash ：无论客户端登陆NFS的身份为何，都将映射为root用户（默认设置）
all_squash ：不论NFS客户端连接服务端时使用什么用户，对服务端分享的目录来说都是拥有匿名用户权限；
anonuid：匿名用户的UID值，通常是nobody或nfsnobody，可以在此处自行设定
anongid：匿名用户的GID值
</code></pre><p>配置完成后，重新加载nfs配置（exportfs -rv）或重启nfs服务。</p>
<pre><code>exportfs [-aruv]
参数说明:
-a  全部挂载（或卸载）/etc/exports文件内的设定
-r  重新挂载/etc/exports中的设置，此外同步更新/etc/exports及/var/lib/nfs/xtab中的内容
-u  卸载某一目录
-v  在export时将共享的目录显示在屏幕上
</code></pre><p>例如：</p>
<pre><code>[root@localhost /]# exportfs -rv
exporting 192.168.1.76:/data
</code></pre><h3 id="服务端验证"><a href="#服务端验证" class="headerlink" title="服务端验证"></a>服务端验证</h3><p>通过showmount -e命令如果正常显示共享目录，表示安装正常:</p>
<pre><code>[root@localhost ~]# showmount -e localhost
Export list for localhost:
/data 192.168.1.76
</code></pre><p>如果客户端已经挂载了目录，在服务端通过showmount -a命令可显示NFS客户端信息和共享目录（包含历史信息）</p>
<pre><code>[root@localhost ~]# showmount -a localhost
All mount points on localhost.localdomain:
192.168.1.76:/data
</code></pre><p>注意：挂载时如果未指定nfsvers版本，默认使用nfs支持的最新版本，目前为ver=4，如果使用此版本， showmount -a将不会显示NFS客户端信息和共享目录  </p>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h4 id="安装客户端NFS"><a href="#安装客户端NFS" class="headerlink" title="安装客户端NFS"></a>安装客户端NFS</h4><p>检查下本地是否已经安装，如果安装则无需重复安装包：</p>
<pre><code>rpm -qa | grep nfs
</code></pre><p>CentOS系统：</p>
<pre><code>#CentOS系统客户端
yum -y install nfs-utils
</code></pre><p>Ubuntu系统：</p>
<pre><code>#Ubuntu客户端
apt-get install nfs-common
</code></pre><p>启动rpcbind，无需启动nfs：</p>
<pre><code>systemctl start rpcbind 
</code></pre><h4 id="挂载NFS共享目录"><a href="#挂载NFS共享目录" class="headerlink" title="挂载NFS共享目录"></a>挂载NFS共享目录</h4><p>1、查看showmount -e IP来查看NFS共享状态：</p>
<pre><code>[root@localhost /]# showmount -e 192.168.1.60
Export list for 192.168.1.60:
/data 192.168.1.76
</code></pre><p>2、挂载NFS共享目录</p>
<p>1）创建服务端共享目录，例如：</p>
<pre><code>mkdir /test
</code></pre><p>2）挂载目录</p>
<pre><code>#临时挂载，即时生效
mount -t nfs -o nfsvers=3 192.168.1.60:/data /test

#配置永久挂载nfs文件系统，保存后重启服务器即可生效
$ vim /etc/fstab
$ 192.168.1.60:/data /test nfs defaults,nfsvers=3 0 0  
</code></pre><p>客户端执行nfsstat -m命令，查看当前所使用的nfs版本：</p>
<pre><code>[root@localhost ~]# nfsstat -m
/data from 192.168.1.60:/data
 Flags:    rw,relatime,vers=3,rsize=262144,wsize=262144,namlen=255,hard,
 proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=192.168.1.60,mountvers=3,
 mountport=892,mountproto=udp,local_lock=none,addr=192.168.1.60
</code></pre><p>3）查看挂载是否成功：</p>
<pre><code>[root@localhost /]# df -h
Filesystem               Size  Used Avail Use% Mounted on
devtmpfs                 994M     0  994M   0% /dev
tmpfs                   1000M  8.4M  992M   1% /run
/dev/mapper/centos-root  6.7G  3.5G  3.2G  53% /
/dev/sda1                497M  118M  380M  24% /boot
192.168.1.60:/data       6.2G  4.5G  1.8G  72% /test
</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="nfsstat"><a href="#nfsstat" class="headerlink" title="nfsstat"></a>nfsstat</h3><p>查看NFS的运行状态，对于调整NFS的运行有很大帮助：</p>
<pre><code>nfsstat -s #查看服务端的情况
nfsstat -c #查看客户端的情况
</code></pre><h3 id="exportfs"><a href="#exportfs" class="headerlink" title="exportfs"></a>exportfs</h3><p>启动了NFS之后又修改了/etc/exports，使用exportfs命令来使改动立刻生效</p>
<h3 id="rpcinfo"><a href="#rpcinfo" class="headerlink" title="rpcinfo"></a>rpcinfo</h3><p>查看rpc执行信息，可以用于检测rpc运行情况的工具</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h3><p>服务端NFS配置：</p>
<pre><code>#vi /etc/exports
/data  192.168.1.76(rw,sync,secure,no_root_squash,no_all_squash)
</code></pre><p>客户端创建文件：touch a，客户端显示如下：</p>
<pre><code>[root@localhost test]# touch a
[root@localhost test]# ls -al 
total 4
drwxr-xr-x.  2 root root   15 Feb 24 20:52 .
dr-xr-xr-x. 19 root root 4096 Feb 24 20:51 ..
-rw-r--r--.  1 root root    0 Feb 24 20:52 a
</code></pre><p>服务端”/data”显示如下：</p>
<pre><code>[root@localhost /]# ls -al /data
total 0
drwxr-xr-x.  2 root root  15 Feb 24 20:52 .
dr-xr-xr-x. 18 root root 236 Feb 19 00:43 ..
-rw-r--r--.  1 root root   0 Feb 24 20:52 a
</code></pre><h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3><p>服务端NFS配置：</p>
<pre><code>#vi /etc/exports
/data  192.168.1.76(rw,sync,secure,root_squash)
</code></pre><p>此时服务端”/data”的权限：</p>
<pre><code>[root@localhost /]# ls -al | grep data
drwxr-xr-x.   2 root root   15 Feb 24 20:52 data    
</code></pre><p>客户端创建文件：touch b，客户端显示如下：</p>
<pre><code>[root@localhost test]# touch b
touch: cannot touch &apos;b&apos;: Permission denied
</code></pre><p>此时客户端是不能创建，主要是因”/data”的权限：所在组group和其他用户other的权限不能写，需要修改权限：</p>
<pre><code>[root@localhost /]# chmod go+w /data
[root@localhost /]# ls -al | grep data
drwxrwxrwx.   2 root root   15 Feb 24 20:52 data
</code></pre><p>客户端再次创建文件：touch b，客户端显示如下：</p>
<pre><code>[root@localhost test]# touch b
[root@localhost test]# ls -al 
total 4
drwxrwxrwx.  2 root      root        24 Feb 24 21:03 .
dr-xr-xr-x. 19 root      root      4096 Feb 24 20:51 ..
-rw-r--r--.  1 root      root         0 Feb 24 20:52 a
-rw-r--r--.  1 nfsnobody nfsnobody    0 Feb 24 21:03 b
</code></pre><p>服务端”/data”显示如下：</p>
<pre><code>[root@bogon /]# ls -al /data
total 0
drwxrwxrwx.  2 root      root       24 Feb 24 21:03 .
dr-xr-xr-x. 18 root      root      236 Feb 19 00:43 ..
-rw-r--r--.  1 root      root        0 Feb 24 20:52 a
-rw-r--r--.  1 nfsnobody nfsnobody   0 Feb 24 21:03 b
</code></pre><h3 id="实例三"><a href="#实例三" class="headerlink" title="实例三"></a>实例三</h3><p>服务端NFS配置：</p>
<pre><code>创建group和user 
# groupadd -g 1000 jason
# useradd -u 1000 -g jason -M -s /bin/bash jason
设置共享目录权限
setfacl -m u:jason:rwx /data

#vi /etc/exports
/data  192.168.1.76(rw,sync,secure,all_squash,,anonuid=1000,anongid=1000))
</code></pre><p>此时服务端”/data”的权限：</p>
<pre><code>[root@localhost /]# ls -al | grep data
drwxr-xr-x.   2 root root   15 Feb 25 12:41 data
[root@localhost /]# getfacl /data
getfacl: Removing leading &apos;/&apos; from absolute path names
# file: data
# owner: root
# group: root
user::rwx
group::r-x
other::r-x

[root@localhost /]# setfacl -m u:jason:rwx  /data
[root@localhost /]# getfacl /data
getfacl: Removing leading &apos;/&apos; from absolute path names
# file: data
# owner: root
# group: root
user::rwx
user:jason:rwx #多出来一个用户jason的权限rwx
group::r-x
mask::rwx
other::r-x
</code></pre><p><strong> 备注：</strong> ACL（Access Control List），主要的目的是在提供传统的 owner,group,others 的 read,write,execute 权限之外的细部权限配置<br>1)、setfacl可以更精确的控制权限的分配<br>2)、getfacl取得某个文件/目录的 ACL 配置项目</p>
<p>客户端创建文件：touch a，客户端显示如下：</p>
<pre><code>[root@localhost test]# touch a
[root@localhost test]# ls -al
total 4
drwxrwxr-x.  2 root  root    15 Feb 25 12:39 .
dr-xr-xr-x. 19 root  root  4096 Feb 24 20:51 ..
#因客户端也存在uid和gid为1000的jason，所以用户和组都显示为jason，否则显示1000
-rw-r--r--.  1 jason jason    0 Feb 25 12:39 a 
</code></pre><p>服务端”/data”显示如下：</p>
<pre><code>[root@localhost data]# ls -al
total 0
drwxrwxr-x+  2 root  root   15 Feb 25 12:41 .
dr-xr-xr-x. 18 root  root  236 Feb 19 00:43 ..
-rw-r--r--.  1 jason jason   0 Feb 25 12:41 a        
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> NFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux分区与挂载]]></title>
      <url>http://jasonhzy.github.io/2019/02/07/linux-mount/</url>
      <content type="html"><![CDATA[<p>分区是将一个硬盘驱动器分成若干个逻辑驱动器，分区是把硬盘连续的区块当做一个独立的磁盘使用。分区表是一个硬盘分区的索引,分区的信息都会写进分区表。<br>通常情况下，为磁盘分区通常使用fdisk，它是对基于MBR机制分区的管理磁盘命令，但是它仅仅支持2TB以下磁盘的分区，超出2TB部分无法识别。若过超过则可以使用parted进行分区，本文主要讲解fdisk分区。</p>
<a id="more"></a>
<p>当前以虚拟机内的CentOS7为例：</p>
<h2 id="fdisk磁盘分区"><a href="#fdisk磁盘分区" class="headerlink" title="fdisk磁盘分区"></a>fdisk磁盘分区</h2><p>1、查看Linux系统上的文件系统（包含文件系统类型）的磁盘使用情况：</p>
<pre><code>df -hT
</code></pre><p>详情如下：</p>
<pre><code>[root@localhost ~]# df -hT
Filesystem              Type      Size  Used Avail Use% Mounted on
devtmpfs                devtmpfs  994M     0  994M   0% /dev
tmpfs                   tmpfs    1000M     0 1000M   0% /dev/shm
tmpfs                   tmpfs    1000M   96M  905M  10% /run
tmpfs                   tmpfs    1000M     0 1000M   0% /sys/fs/cgroup
/dev/mapper/centos-root xfs       6.7G  3.4G  3.3G  51% /
/dev/sda1               xfs       497M  118M  380M  24% /boot
tmpfs                   tmpfs     200M     0  200M   0% /run/user/0   
</code></pre><p>2、fdisk命令详情如下：</p>
<pre><code>fdisk(选项)(参数)
</code></pre><p>选项：</p>
<pre><code>-b&lt;分区大小&gt;：指定每个分区的大小；
-l：列出指定的外围设备的分区表状况；
-s&lt;分区编号&gt;：将指定的分区大小输出到标准输出上，单位为区块；
-u：搭配&quot;-l&quot;参数列表，会用分区数目取代柱面数目，来表示每个分区的起始地址；
-v：显示版本信息。
</code></pre><p>参数：</p>
<pre><code>设备文件：指定要进行分区或者显示分区的硬盘设备文件
</code></pre><p>菜单操作说明：</p>
<pre><code>a    设置可引导标记
b    编辑bsd磁盘标签
c    设置Dos操作系统兼容标记
d    删除一个分区
l   显示已知的文件系统类型，例：83为Linux分区，82为Linux swap分区
m   显示菜单和帮助信息
n   新建分区
o    建立空白的DOS分区表
p    列出当前磁盘的分区表信息
q   不保存退出
s    新建空白SUN磁盘标签
t    改变一个分区的系统ID
u    改变显示记录单位
v    进行分区检查
w    保存退出
x    附加功能
x ：扩展应用，高级功能    
</code></pre><h3 id="查看磁盘分区情况"><a href="#查看磁盘分区情况" class="headerlink" title="查看磁盘分区情况"></a>查看磁盘分区情况</h3><p>查看命令：</p>
<pre><code>fdisk -l
</code></pre><p>例如：</p>
<pre><code>[root@localhost ~]# fdisk -l
Disk /dev/sda: 8589 MB, 8589934592 bytes, 16777216 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0x000c374c

   Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048     1026047      512000   83  Linux
/dev/sda2         1026048    16777215     7875584   8e  Linux LVM

Disk /dev/sdb: 8589 MB, 8589934592 bytes, 16777216 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0xda06dd45

   Device Boot      Start         End      Blocks   Id  System

Disk /dev/mapper/centos-root: 7159 MB, 7159676928 bytes, 13983744 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes

Disk /dev/mapper/centos-swap: 859 MB, 859832320 bytes, 1679360 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
</code></pre><h3 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h3><p>1、从上述查看结果可以看出/dev/sdb可进行分区：</p>
<pre><code>fdisk /dev/sdb
</code></pre><p>其中”Device Boot      Start      End      Blocks   Id    System”描述如下：</p>
<pre><code>第一列：Device 显示了磁盘分区对应的设备文件名。
第二列：Boot 显示是否为引导分区，上图中的 /dev/sda1 就是引导分区。
第三列：Start 表示磁盘分区的起始位置。
第四列：End 表示磁盘分区的结束位置。
第五列：Sectors 表示分区占用的扇区数目。
第六列：Size 显示分区的大小。
第七列和第八列：显示的内容相同，分别是数值ID及其文字描述。 Id列显示了磁盘分区对应的ID，根据分区的不同，分区对应的ID号也不相同。
        Linux下用83表示主分区和逻辑分区，82表示swap交换分区，5表示扩展分区，8e表示LVM分区，7表示NTFS分区
</code></pre><p>2、进入交互模式后按 <strong> “m” </strong> 可列出所有命令    </p>
<pre><code>[root@localhost ~]# fdisk /dev/sdb
Welcome to fdisk (util-linux 2.23.2).

Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.

Command (m for help): m
Command action
   a   toggle a bootable flag
   b   edit bsd disklabel
   c   toggle the dos compatibility flag
   d   delete a partition
   g   create a new empty GPT partition table
   G   create an IRIX (SGI) partition table
   l   list known partition types
   m   print this menu
   n   add a new partition
   o   create a new empty DOS partition table
   p   print the partition table
   q   quit without saving changes
   s   create a new empty Sun disklabel
   t   change a partition&apos;s system id
   u   change display/entry units
   v   verify the partition table
   w   write table to disk and exit
   x   extra functionality (experts only)
</code></pre><p>3、输入<strong> “p” </strong>列出磁盘目前的分区情况：</p>
<pre><code>Command (m for help): p

Disk /dev/sdb: 8589 MB, 8589934592 bytes, 16777216 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0xda06dd45

   Device Boot      Start         End      Blocks   Id  System
</code></pre><p>可以看出尚未进行分区。</p>
<p>4、输入<strong> “n” </strong>创建新的磁盘分区：<br>1）出现两个菜单e表示扩展分区，p表示主分区<br>2）按”p”键（或直接回车，即默认）出现提示：”Partition number (1-4): “选择主分区号<br>3）输入”1”（或直接回车，即默认）表示第一个主分区<br>4）直接按回车表示”1”柱面开始分区<br>5）提示最后一个柱面或大小<br>分区的大小通过分区开始处的扇区和结束处的扇区设置的，或者输入分区的大小，如+4G（即磁盘容量为4G）；之后回车，即表示创建了第一个分区。<br>这里如果不设置结束处的扇区或输入分区大小，而是直接回车会把整个磁盘划分为一个分区，也可以创建多个分区<br>6）输入”p”可查看磁盘目前的分区情况，如果分区没有问题，可以进行保存。</p>
<pre><code>Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p): p
Partition number (1-4, default 1): 1
First sector (2048-16777215, default 2048): 
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-16777215, default 16777215): 
Using default value 16777215
Partition 1 of type Linux and of size 8 GiB is set

Command (m for help): p

Disk /dev/sdb: 8589 MB, 8589934592 bytes, 16777216 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0xda06dd45

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            2048    16777215     8387584   83  Linux
</code></pre><p>5、按<strong> “t” </strong>键可改变一个分区的系统ID</p>
<pre><code>Command (m for help): p

Disk /dev/sdb: 8589 MB, 8589934592 bytes, 16777216 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0xda06dd45

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            2048    16777215     8387584   83  Linux

Command (m for help): t       
Selected partition 1
Hex code (type L to list all codes): L

 0  Empty           24  NEC DOS         81  Minix / old Lin bf  Solaris        
 1  FAT12           27  Hidden NTFS Win 82  Linux swap / So c1  DRDOS/sec (FAT-
 2  XENIX root      39  Plan 9          83  Linux           c4  DRDOS/sec (FAT-
 3  XENIX usr       3c  PartitionMagic  84  OS/2 hidden C:  c6  DRDOS/sec (FAT-
 4  FAT16 &lt;32M      40  Venix 80286     85  Linux extended  c7  Syrinx         
 5  Extended        41  PPC PReP Boot   86  NTFS volume set da  Non-FS data    
 6  FAT16           42  SFS             87  NTFS volume set db  CP/M / CTOS / .
 7  HPFS/NTFS/exFAT 4d  QNX4.x          88  Linux plaintext de  Dell Utility   
 8  AIX             4e  QNX4.x 2nd part 8e  Linux LVM       df  BootIt         
 9  AIX bootable    4f  QNX4.x 3rd part 93  Amoeba          e1  DOS access     
 a  OS/2 Boot Manag 50  OnTrack DM      94  Amoeba BBT      e3  DOS R/O        
 b  W95 FAT32       51  OnTrack DM6 Aux 9f  BSD/OS          e4  SpeedStor      
 c  W95 FAT32 (LBA) 52  CP/M            a0  IBM Thinkpad hi eb  BeOS fs        
 e  W95 FAT16 (LBA) 53  OnTrack DM6 Aux a5  FreeBSD         ee  GPT            
 f  W95 Ext&apos;d (LBA) 54  OnTrackDM6      a6  OpenBSD         ef  EFI (FAT-12/16/
10  OPUS            55  EZ-Drive        a7  NeXTSTEP        f0  Linux/PA-RISC b
11  Hidden FAT12    56  Golden Bow      a8  Darwin UFS      f1  SpeedStor      
12  Compaq diagnost 5c  Priam Edisk     a9  NetBSD          f4  SpeedStor      
14  Hidden FAT16 &lt;3 61  SpeedStor       ab  Darwin boot     f2  DOS secondary  
16  Hidden FAT16    63  GNU HURD or Sys af  HFS / HFS+      fb  VMware VMFS    
17  Hidden HPFS/NTF 64  Novell Netware  b7  BSDI fs         fc  VMware VMKCORE 
18  AST SmartSleep  65  Novell Netware  b8  BSDI swap       fd  Linux raid auto
1b  Hidden W95 FAT3 70  DiskSecure Mult bb  Boot Wizard hid fe  LANstep        
1c  Hidden W95 FAT3 75  PC/IX           be  Solaris boot    ff  BBT            
1e  Hidden W95 FAT1 80  Old Minix      
Hex code (type L to list all codes): a6
Changed type of partition &apos;Linux&apos; to &apos;OpenBSD&apos;

Command (m for help): p

Disk /dev/sdb: 8589 MB, 8589934592 bytes, 16777216 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0xda06dd45

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            2048    16777215     8387584   a6  OpenBSD
</code></pre><p>5、按<strong> “d” </strong>键删除分区：</p>
<p>如果分区有误，可以删除重新分区。如下：</p>
<pre><code>Command (m for help): d
Selected partition 1
Partition 1 is deleted

Command (m for help): p

Disk /dev/sdb: 8589 MB, 8589934592 bytes, 16777216 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0xda06dd45

   Device Boot      Start         End      Blocks   Id  System
</code></pre><p>6、按<strong> “w” </strong>键保存退出：</p>
<p>分区结束后一定要保存，否则之前的分区不会生效</p>
<pre><code>Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.
</code></pre><p>各个参数的解析：</p>
<pre><code>1. 输入 m 显示所有命令列示。
2. 输入 p 显示硬盘分割情形，打印分区表。
3. 输入 a 设定硬盘启动区。
4. 输入 n 设定新的硬盘分割区。
　　4.1. 输入 e 硬盘为[延伸]分割区(extend)。
　　4.2. 输入 p 硬盘为[主要]分割区(primary)。
5. 输入 t 改变硬盘分割区属性。例：　　　　　　　　　　
    82: linux swap
    83：linux
    86：NTFS window分区
6. 输入 d 删除硬盘分割区属性。
7. 输入 q 结束不存入硬盘分割区属性。
8. 输入 w 结束并写入硬盘分割区属性
</code></pre><h3 id="磁盘格式化（创建文件系统）"><a href="#磁盘格式化（创建文件系统）" class="headerlink" title="磁盘格式化（创建文件系统）"></a>磁盘格式化（创建文件系统）</h3><h4 id="查看文件系统的类型"><a href="#查看文件系统的类型" class="headerlink" title="查看文件系统的类型"></a>查看文件系统的类型</h4><p>1、mount<br>查看已经挂载的文件系统类型。</p>
<pre><code>[root@localhost /]# mount | grep &quot;^/dev&quot;
/dev/mapper/centos-root on / type xfs (rw,relatime,attr2,inode64,noquota)
/dev/sda1 on /boot type xfs (rw,relatime,attr2,inode64,noquota)
</code></pre><p>2、lsblk<br>显示块设备，当使用 -f 选项时，会打印当前系统所有分区的文件系统类型。</p>
<pre><code>[root@localhost /]# lsblk -f  //lsblk -o UUID -f 
NAME            FSTYPE      LABEL UUID                                   MOUNTPOINT
sda                                                                      
|-sda1          xfs               d918cc0b-aa5b-4147-bd41-469533c0618d   /boot
`-sda2          LVM2_member       F6FzL6-RBmy-3vgL-IbSC-caU3-rIUg-9hv2jg 
  |-centos-root xfs               96b564fd-7267-4cf3-a4c2-78da91f07e2d   /
  `-centos-swap swap              4677bc0d-f76e-4af0-b078-196f86856f19   [SWAP]
sdb                                                                      
`-sdb1          ext4              32ce315d-b6a5-49a6-84c7-daaec7ac32cb   
sr0                                                         
</code></pre><p>3、file -s<br>确定磁盘上是否存在文件系统。新磁盘为原始的块储存设备，必须先在这种设备上创建文件系统，然后才能够装载并使用它们,<br>file -s 命令获取设备信息，例如其文件系统类型。如果输出仅显示 data（如以下示例输出），则说明设备上没有文件系统，您必须创建一个文件系统。</p>
<pre><code>[root@localhost /]# sudo file -s /dev/sdb
/dev/sdb: data

[root@localhost /]# sudo file -s /dev/sda1
/dev/sda1: XFS filesystem data
</code></pre><h4 id="查看当前系统支持的文件系统"><a href="#查看当前系统支持的文件系统" class="headerlink" title="查看当前系统支持的文件系统"></a>查看当前系统支持的文件系统</h4><p>1、cat /proc/filesystems</p>
<pre><code>[root@localhost /]# cat /proc/filesystems
nodev    sysfs
nodev    rootfs
...
nodev    mqueue
    xfs
    ext3
    ext2
    ext4
    iso9660
    vfat
    hfs
    hfsplus
</code></pre><p>2、cat /etc/filesystems</p>
<pre><code>[root@localhost /]# cat /etc/filesystems
xfs
ext4
ext3
ext2
...
hfs
hfsplus
*
</code></pre><p>3、ls -l /lib/modules/<code>uname -r</code>/kernel/fs (CentOS)</p>
<pre><code>[root@localhost /]# ls  -al /lib/modules/`uname -r`/kernel/fs
total 60
drwxr-xr-x 33 root root  4096 Feb 15 18:44 .
drwxr-xr-x 12 root root   118 Feb 15 18:44 ..
drwxr-xr-x  2 root root    21 Feb 15 18:44 btrfs
...
drwxr-xr-x  2 root root    22 Feb 15 18:44 exofs
drwxr-xr-x  2 root root    20 Feb 15 18:44 ext4
</code></pre><h4 id="mke2fs命令"><a href="#mke2fs命令" class="headerlink" title="mke2fs命令"></a>mke2fs命令</h4><p>系统分区之后，并不能直接使用，需要格式化。mke2fs命令是专门用于管理ext系列文件系统的一个专门的工具。其还有像mkfs.ext2，mkfs.ext3，mkfs.ext4等衍生的命令<br>命令格式：</p>
<pre><code>mke2fs [options] [device]
</code></pre><p>选项说明：</p>
<pre><code>-t 指定文件系统类型（如ext2，ext3，ext4等），则会从/etc/mke2fs.conf文件中读取默认配置；
-j：创建ext3文件系统，mkfs.ext3自带了该选项，不加-j则为ext2；
-b block-size：设置硬盘的block大小。
-L &apos;LABEL&apos;：设置卷标；
-N：设置inode节点的数量；
-m：设置为文件系统预留的块的百分比；
-c：在创建文件系统前进程硬盘自检；
</code></pre><p>例如：</p>
<pre><code>mke2fs /dev/sdb1   #创建文件系统格式为ext2
mke2fs -j /dev/sdb1 #创建文件系统格式为ext3
mke2fs -t ext4 /dev/sdb1 #创建文件系统格式为ext4

[root@localhost /]# mke2fs -t ext4 /dev/sdb1 
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
524288 inodes, 2096896 blocks
104844 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=2147483648
64 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks: 
    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done
</code></pre><p>e2fsck  -p /dev/sdb1 #检查ext2/ext3/ext4格式的文件系统：文件、扇区是否有错误，参数-p（等同 -a）是自动修复</p>
<p>格式化完成之后，便可以进行硬盘的挂载。</p>
<h3 id="磁盘挂载"><a href="#磁盘挂载" class="headerlink" title="磁盘挂载"></a>磁盘挂载</h3><p>格式化硬盘后，需要为每个分区设置挂载点，有两种方式：一种是临时挂载，重启失效；另一种开机自动挂载。</p>
<p>1、创建挂载点</p>
<pre><code>mkdir /data
</code></pre><p>作为挂载点的目录，理论上都应该是空目录。如果挂载的目录不为空，那么挂载了文件系统之后，原目录下的内容会暂时消失(被隐藏，而不是被覆盖），且不会将此前的目录容量加上，取消挂载之后，原来内容即可恢复。  </p>
<p>2、磁盘挂载</p>
<p>第一种方式：临时挂载（手动挂载），重启失效</p>
<p>命令mount可用来挂载文件系统：</p>
<pre><code>mount 要挂载的设备源 挂载目的点
</code></pre><p>例如：</p>
<pre><code>mount /dev/sdb1 /data    
</code></pre><p>常用参数：<br>不带参数的mount命令会显示所有已挂载的文件系统<br>-t　指定文件系统的类型，如：-t ext4、-t vfat<br>-o　指定挂载选项:</p>
<pre><code>ro: 以只读方式挂载；
rw: 以读写方式挂载，默认挂载选项；
async: 异步IO，数据写操作优先于内存完成，然后再根据某种策略同步至硬盘中，默认挂载选项；
sync: 同步IO；
auto/noauto: 设置设备是否支持mount的-a选项自动挂载，默认挂载为auto；
exec/noexec: 设置是否允许执行此设备上得二进制程序文件，默认挂载为exec；
suid/nosuid: 设置是否支持在此设备的文件上使用suid，默认挂载为suid；
user/nouser: 设置是否允许普通挂载此文件设备，默认挂载为nouser；
defaults: 使用预设的选项 rw, suid, dev, exec, auto, nouser, and async；
remount: 重新挂载文件系统
</code></pre><p>比如：</p>
<pre><code>mount -t ext4 -o remount,ro /dev/sdb1 /data/ #重新挂载并只读
</code></pre><p>第二种方式：开机自动挂载</p>
<p>blkid命令，可以查看硬盘设备的信息（或者采用上述的命令lsblk）：</p>
<pre><code>[root@localhost data]# blkid
/dev/sda1: UUID=&quot;d918cc0b-aa5b-4147-bd41-469533c0618d&quot; TYPE=&quot;xfs&quot; 
/dev/sda2: UUID=&quot;F6FzL6-RBmy-3vgL-IbSC-caU3-rIUg-9hv2jg&quot; TYPE=&quot;LVM2_member&quot; 
/dev/sdb1: UUID=&quot;330c5768-3bdb-4a25-9b91-626276a6d2ca&quot; TYPE=&quot;ext4&quot; 
/dev/mapper/centos-root: UUID=&quot;96b564fd-7267-4cf3-a4c2-78da91f07e2d&quot; TYPE=&quot;xfs&quot; 
/dev/mapper/centos-swap: UUID=&quot;4677bc0d-f76e-4af0-b078-196f86856f19&quot; TYPE=&quot;swap&quot;
</code></pre><p>1、编辑/etc/fstab,添加一行。<br>查看要挂载分区的UUID（Universally Unique Identifier），将UUID或者直接将对应的设备文件名写入文件中，即：</p>
<pre><code>echo &apos;UUID=&quot;F6FzL6-RBmy-3vgL-IbSC-caU3-rIUg-9hv2jg&quot; /data  ext4 defaults 0 0&apos; &gt;&gt; /etc/fstab
或者
echo &apos;/dev/sdb1 /data ext4 defaults 0 0&apos; &gt;&gt; /etc/fstab    
</code></pre><p>备注：开机自动挂载最好设置UUID，其次使用卷标，因为有时卷设备名会发生变化，导致开机启动出现异常</p>
<p>每列描述如下：    </p>
<pre><code>file system&lt;设备文件名称&gt;   mount point&lt;挂载目录&gt;    type&lt;文件系统类型&gt;  options&lt;文件系统参数&gt;  dump&lt;是否备份&gt;  pass&lt;开机时自检&gt;
</code></pre><p>第一列：可以是设备名称（比如 /dev/sda1）或标记 (LABEL=) 或 UUID (UUID=)<br>第二列：挂载点（也就是挂载目录），对于交换空间，该值应该是”none”或”swap”<br>第三列：所要挂载设备的文件系统类型。支持许多种不同的文件系统：ext2, ext3, ext4, reiserfs, xfs, jfs, smbfs, iso9660, vfat, ntfs, swap 及 auto。设置成auto类型，mount 命令会猜测使用的文件系统类型，对 CDROM 和 DVD 等移动设备是非常有用的。<br>第四列：挂载参数，即mount命令“-o”选项后可使用的参数，如defaults、rw等，通常使用defaults即可<br>第五列：备份，dump是一个用来作为备份的命令。0：不做备份 1：每天备份<br>第六列：文件系统的检查顺序。开机的过程中，系统默认会以fsck检验我们系统是否为完整；0：不检验，1：最先检验（一般根目录即”/“会选择， 设置后其他不能再使用1），2：1级别检验完成之后进行检验</p>
<p>2、/etc/fstab写入完成后，重启或者执行”mount -a”自动挂载。</p>
<p>3、最后”df -hT”查看挂载是否成功。</p>
<h3 id="取消挂载"><a href="#取消挂载" class="headerlink" title="取消挂载"></a>取消挂载</h3><p>命令umount用来卸载已挂载的文件系统，命令：</p>
<pre><code>umount 文件系统或者挂载点
</code></pre><p>例如：</p>
<pre><code>[root@localhost ~]# umount /dev/sdb1
或者
[root@localhost ~]# umount /data
</code></pre><p>如果出现下面的问题：    </p>
<pre><code>[root@localhost ~]# umount /dev/sdb1
umount: /data: target is busy.
        (In some cases useful info about processes that use
         the device is found by lsof(8) or fuser(1))
</code></pre><p>表示该文件系统正在被使用，无法卸载。在Linux系统中，只有当该文件系统上所有访问的用户或进程完成操作并退出后，这个文件系统才能被正常卸载。<br>一般情况下的原因是因为你在当前的目录中工作，这时只要退到根目录下再卸载就可以了。可以使用命令fuser／lsof查看哪些进程正在访问该文件系统，<br>之后使用kill命令将进程杀死来进行卸载。</p>
<p>1、fuser -uvm 文件系统或者挂载点，fuser显示使用指定文件或者文件系统的进程的pid</p>
<p>参数描述：</p>
<pre><code>-u：在每个进程后显示所属的用户名
-m：显示所有使用指定文件系统的进程，后面可以跟挂载点，或是dev块设备
-v：详细的输出，可以看到占用的进程和PID号
-i：杀死进程前需要用户确认（和-k一起使用）
-k：杀死访问指定文件的所有进程（效果类似rm -rf）
</code></pre><p>例如：</p>
<pre><code>[root@localhost data]# fuser -uvm  /data
                     USER        PID ACCESS COMMAND
/data:               root     kernel mount (root)/data
                     root       1037 ..c.. (root)bash
                     root       1485 F.... (root)vim
</code></pre><p>每种类型的访问(即每个pid后面)加上一个字母表示：</p>
<pre><code>c - 当前目录。表示该进程是在该目录下启动的
e - 正在运行的可执行文件
f - 打开文件。在默认显示模式下省略f
F - 打开文件进行写入。默认显示模式下省略F
r - 根目录。表示该目录是该进程的根目录
m - mmap&apos;ed文件或共享库
</code></pre><p>2、lsof 文件系统或者挂载点</p>
<pre><code>[root@localhost /]# lsof +D  /data
COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
vim     1485 root    4u   REG   8,17    12288   12 /data/.a.swp
</code></pre><p>如果出现：fuser／lsof: command not found，安装psmisc／lsof即可。</p>
<p><strong> 备注：挂载／取消挂载的限制（重点） </strong></p>
<pre><code>1、根目录是必须要先于其他mount point被挂载。因为挂载的是所有目录的根目录，其他目录都是由根目录&quot;/&quot;衍生出来的。
2、挂载点必须是已经存在的目录。
3、挂载点的指定可以任意，但必须遵守必要的系统目录架构原则
4、所有挂载点在同一时间只能被挂载一次
5、所有分区在同一时间只能被挂载一次
6、若取消挂载，必须将工作目录退出挂载点（及其子目录）之外，且当前磁盘没有发生读写等操作
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mount </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu内核升级]]></title>
      <url>http://jasonhzy.github.io/2019/02/06/ubuntu-kernel-upgrade/</url>
      <content type="html"><![CDATA[<p>随着Linux内核不断的更新，原有服务器默认内核版本比较低。业务的不断发展，也不太满足业务的需要了。这就需要我们对服务器的内核进行升级，以下就针对常用的Ubuntu进行操作</p>
<a id="more"></a>
<h2 id="检查想要安裝的kernel版本是否存在"><a href="#检查想要安裝的kernel版本是否存在" class="headerlink" title="检查想要安裝的kernel版本是否存在"></a>检查想要安裝的kernel版本是否存在</h2><pre><code>apt-cache search linux-image-\*
apt-cache search linux-headers-\*
</code></pre><h2 id="安装kernel"><a href="#安装kernel" class="headerlink" title="安装kernel"></a>安装kernel</h2><pre><code>apt-get install linux-image-X.X.X.X-generic
apt-get install linux-headers-X.X.X.X-generic
</code></pre><h2 id="安裝后更新initramfs-image，详细的man-update-initramfs"><a href="#安裝后更新initramfs-image，详细的man-update-initramfs" class="headerlink" title="安裝后更新initramfs image，详细的man update-initramfs"></a>安裝后更新initramfs image，详细的man update-initramfs</h2><pre><code>update-initramfs -u -k all 
或
update-initramfs -u -k `uname -r`
</code></pre><h2 id="更新grub清单"><a href="#更新grub清单" class="headerlink" title="更新grub清单"></a>更新grub清单</h2><pre><code>update-grub
</code></pre><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><pre><code>reboot
</code></pre><h2 id="检查内核版本（重启之后检查是否生效）"><a href="#检查内核版本（重启之后检查是否生效）" class="headerlink" title="检查内核版本（重启之后检查是否生效）"></a>检查内核版本（重启之后检查是否生效）</h2><pre><code>uname -a
</code></pre><p><strong> 补充：另一种安装方式：自行下载安装包升级内核 </strong></p>
<p>1、确定CPU是32／64位，可以用下面的命令查看</p>
<pre><code>getconf LONG_BIT
</code></pre><p>2、下载Ubuntu编译好的内核<br>下载地址：</p>
<pre><code>https://kernel.ubuntu.com/~kernel-ppa/mainline
</code></pre><p>3、使用wget命令来下载到服务器</p>
<pre><code>wget https://kernel.ubuntu.com/~kernel-ppa/mainline/v4.15.10/linux-headers-4.15.10-041510-generic_4.15.10-041510.201803152130_amd64.deb
wget https://kernel.ubuntu.com/~kernel-ppa/mainline/v4.15.10/linux-image-4.15.10-041510-generic_4.15.10-041510.201803152130_amd64.deb
</code></pre><p>4、安装下载软件包</p>
<pre><code>dpkg -i linux-headers-4.15.10-041510-generic_4.15.10-041510.201803152130_amd64.deb
dpkg -i linux-image-4.15.10-041510-generic_4.15.10-041510.201803152130_amd64.deb
</code></pre><p>5、更新grub引导装入程序，并重启服务器</p>
<pre><code>update-grub
</code></pre><p><strong> 备注：</strong><br>1、列出目前系統中已安裝哪些kernel</p>
<pre><code>dpkg --get-selections | grep linux-image
</code></pre><p>2、移除不要的Kernel</p>
<pre><code>apt-get purge linux-image-X.X.XX-XX-generic
</code></pre><p>3、Ubuntu卸载Linux Kernel</p>
<pre><code>apt-get remove linux-headers-4.4* linux-image-4.4*
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Kernel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS内核升级]]></title>
      <url>http://jasonhzy.github.io/2019/02/06/centos-kernel-upgrade/</url>
      <content type="html"><![CDATA[<p>随着Linux内核不断的更新，原有服务器默认内核版本比较低。业务的不断发展，也不太满足业务的需要了。这就需要我们对服务器的内核进行升级，以下就针对常用的CentOS进行操作</p>
<a id="more"></a>  
<h2 id="导入public-key"><a href="#导入public-key" class="headerlink" title="导入public key"></a>导入public key</h2><pre><code>rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
</code></pre><h2 id="yum源更新"><a href="#yum源更新" class="headerlink" title="yum源更新"></a>yum源更新</h2><p>访问<a href="http://elrepo.org/tiki/tiki-index.php" target="_blank" rel="noopener">ELRepo.org</a>查看与自己系统匹配的yum源然后安装</p>
<p>RHEL-7, SL-7 or CentOS-7:</p>
<pre><code>rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
</code></pre><p>RHEL-6, SL-6 or CentOS-6:</p>
<pre><code>rpm -Uvh http://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm    
</code></pre><h2 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h2><p>列出可用的内核相关包：</p>
<pre><code>yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list available
</code></pre><p>备注：mt为短期支持，lt是长期支持  </p>
<p>ml内核（mainline，安装的是最新版的内核），安装命令：</p>
<pre><code>yum --enablerepo=elrepo-kernel install kernel-ml -y 
</code></pre><p>kernel-lt（lt=long-term)，安装命令：</p>
<pre><code>yum --enablerepo=elrepo-kernel install kernel-lt -y
</code></pre><h2 id="安装头文件"><a href="#安装头文件" class="headerlink" title="安装头文件"></a>安装头文件</h2><p>查找头文件版本：</p>
<pre><code>rpm -qa kernel-headers
</code></pre><p>例如：</p>
<pre><code>[root@localhost ~]# rpm -qa kernel-headers
kernel-headers-3.10.0-693.21.1.el7.x86_64    
</code></pre><p>卸载老版本的headers，防止冲突</p>
<pre><code>yum -y remove kernel-headers-3.10.0-693.21.1.el7.x86_64
</code></pre><p>然后安装新的头文件:</p>
<pre><code>yum --enablerepo=elrepo-kernel install kernel-lt-headers -y
</code></pre><h2 id="设置GRUB默认的内核版本"><a href="#设置GRUB默认的内核版本" class="headerlink" title="设置GRUB默认的内核版本"></a>设置GRUB默认的内核版本</h2><p>打开并编辑/etc/default/grub，设置GRUB_DEFAULT=0。意思是GRUB初始化页面的第一个内核将作为默认内核</p>
<pre><code>#默认启动项，按menuentry顺序，从0开始；若要默认从第3个菜单项启动，数字改为2；若改为saved，则默认上次启动项
GRUB_DEFAULT=0
#设置进入默认启动项的等候时间，默认值5秒；若为-1则一直等待
GRUB_TIMEOUT=5
#菜单中的描述名称
GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;
GRUB_DISABLE_SUBMENU=true
#设置是否使用图形界面。前面有#注释则使用图形界面，无则使用控制台终端
GRUB_TERMINAL_OUTPUT=&quot;console&quot;
#手动添加内核启动参数
GRUB_CMDLINE_LINUX=&quot;rd.lvm.lv=centos/root rd.lvm.lv=centos/swap crashkernel=auto rhgb quiet&quot;
#设定是否创建修复模式菜单项，前面有#注释则建立修复模式，无则不建立修复模式
GRUB_DISABLE_RECOVERY=&quot;true&quot;
</code></pre><p>低版本的centos，需要编辑/etc/grub.conf文件</p>
<p>重新编译内核启动文件:</p>
<pre><code>grub2-mkconfig -o /boot/grub2/grub.cfg
</code></pre><h2 id="重启之后查看内核"><a href="#重启之后查看内核" class="headerlink" title="重启之后查看内核"></a>重启之后查看内核</h2><pre><code>uname -a
</code></pre><h2 id="删除旧版本的内核"><a href="#删除旧版本的内核" class="headerlink" title="删除旧版本的内核"></a>删除旧版本的内核</h2><p><strong> 旧内核建议保留一段时间，以防止发生异常。待新内核稳定运行一段时间时候，可以删除。 </strong></p>
<p>列出已安装的内核：</p>
<pre><code>rpm -qa | grep kernel
</code></pre><p>例如：</p>
<pre><code>[root@localhost ~]#  rpm -qa | grep kernel
kernel-lt-4.4.121-1.el7.elrepo.x86_64
kernel-headers-3.10.0-693.21.1.el7.x86_64
kernel-lt-4.4.174-1.el7.elrepo.x86_64
</code></pre><p>删除内核：</p>
<pre><code>rpm -e kernel-headers-3.10.0-693.21.1.el7.x86_64 kernel-lt-4.4.121-1.el7.elrepo.x86_64
或
yum remove kernel-headers-3.10.0-693.21.1.el7.x86_64 kernel-lt-4.4.121-1.el7.elrepo.x86_64       
</code></pre><p>备注：<br>1、导入key时，出现curl: (60) Peer’s Certificate has expired问题</p>
<p>解决方案有两种：<br>1）更新证书</p>
<pre><code>update-ca-trust
</code></pre><p>2）更新证书后问题没有解决，查看是否是系统时间过期引起的问题<br>查看系统时间：</p>
<pre><code>date
</code></pre><p>同步系统时间：</p>
<pre><code>ntpdate time.apple.com
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Kernel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux内核版本介绍与查询]]></title>
      <url>http://jasonhzy.github.io/2019/02/05/linux-kernel-version/</url>
      <content type="html"><![CDATA[<p>Linux内核版本命名在不同时期有着不同的规范，在涉及到Linux版本问题时经常容易混淆，主线版本／稳定版／长期支持版本经常搞不清楚，本文主要记录下内核版本命名的规则以及如何查看Linux系统版本信息。</p>
<a id="more"></a>
<h2 id="Linux内核（Linux-kernel）简介"><a href="#Linux内核（Linux-kernel）简介" class="headerlink" title="Linux内核（Linux kernel）简介"></a>Linux内核（Linux kernel）简介</h2><p>内核是操作系统的核心 ，其主要功能有：</p>
<pre><code>响应中断，执行中断服务程序
管理多个进程，调度和分享处理器的时间
管理进程地址空间的内存管理
网络和进程间通信等系统服务程序
</code></pre><p>内核的活动范围：</p>
<pre><code>运行于用户空间，执行用户进程
运行于内核空间，处于进程上下文，代表某个特定进程的执行
运行于内核空间，处于中断上下文，与任何进程无关，处理某个特定的中断
</code></pre><h2 id="Linux内核版本号"><a href="#Linux内核版本号" class="headerlink" title="Linux内核版本号"></a>Linux内核版本号</h2><p>第一种方式：<br>Linux 的版本号分为两部分，即内核版本与发行版本。内核版本号由3个数字组成：A.B.C。各数字含义如下：</p>
<pre><code>A：内核主版本号。这是很少发生变化，只有当发生重大变化的代码和内核发生才会发生。在历史上曾改变两次的内核：1994年的1.0及1996年的2.0。
B：内核次版本号。是指一些重大修改的内核。偶数表示稳定版本；奇数表示开发中版本。
C：内核修订版本号。是指轻微修订的内核。这个数字当有安全补丁,bug修复，新的功能或驱动程序，内核便会有变化。
</code></pre><p>第二种方式：<br>major.minor.patch-build.desc</p>
<pre><code>major : 主版本号，有结构变化才变更 
minor : 次版本号，新增功能时才发生变化，一般技术表示测试版，偶数表示生产版 
patch : 补丁包数或次版本的修改次数 
build : 编译（或构建）的次数，每次编译可能对少量程序做优化或修改，但一般没有大的（可控的）功能变化。
desc  : 当前版本的特殊信息，其信息由编译时指定，具有较大的随意性，有如下的标识是常用的： 
    rc（或r），表示发行候选版本（release candidate），rc后的数字表示该正式版本的第几个候选版本，多数情况下，各候选版本之间数字越大越接近正式版。
    smp，表示对称多处理器（Symmetric MultiProcessing）。
    pp，在Red Hat Linux中常用来表示测试版本（pre-patch）。
    EL，在Red Hat Linux中用来表示企业版Linux（Enterprise Linux）。
    mm，表示专门用来测试新的技术或新功能的版本。
    fc，在Red Hat Linux中表示Fedora Core。  
</code></pre><p>例如：<br>用命令uname -a查看内核版本号</p>
<p>1、在CentOS下如：</p>
<pre><code>Linux localhost 2.6.32-642.15.1.el6.x86_64 #1 SMP Fri Feb 24 14:31:22 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
</code></pre><p>说明如下：</p>
<pre><code>第一个组数字：2, 主版本号
第二个组数字：6, 次版本号，当前为稳定版本
第三个组数字：32, 修订版本号
第四个组数字：642.15.1，表示发型版本的补丁版本
el6：则表示我正在使用的内核是 RedHat / CentOS 系列发行版专用内核
x86_64：采用的是64位的CPU
</code></pre><p>2、在Ubuntu下如：</p>
<pre><code>Linux localhost 3.2.0-67-generic #101-Ubuntu SMP Tue Jul 15 17:46:11 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
#有的是3.2.0-67-generic-pae
</code></pre><p>说明如下：</p>
<pre><code>第一个组数字：3, 主版本号
第二个组数字：2, 次版本号，当前为稳定版本
第三个组数字：0, 修订版本号
第四个组数字：67，当前内核版本（3.2.0）的第67次微调patch
generic：当前内核版本为通用版本，另有表示不同含义的server（针对服务器）、i386（针对老式英特尔处理器）
pae（Physical Address Extension）：物理地址扩展，为了弥补32位地址在PC服务器应用上的不足而推出，表示此32位系统可以支持超过4G的内存
x86_64：采用的是64位的CPU
SMP：对称多处理机，表示内核支持多核、多处理器
Tue Jul 15 17:46:11 UTC 2014：内核的编译时间（build date）为 2014/07/15 17:46:11  
</code></pre><h2 id="内核版本分类"><a href="#内核版本分类" class="headerlink" title="内核版本分类"></a>内核版本分类</h2><p>Linux内核版本的最新发布状态，参见Linux官网：<a href="https://kernel.org/" target="_blank" rel="noopener">https://kernel.org/</a></p>
<p><img src="/images/kernel/website.png" alt="kernel website"></p>
<p>1、mainline<br>主线版本</p>
<p>2、stable<br>稳定版，由mainline在时机成熟时发布，稳定版也会在相应版本号的主线上提供bug修复和安全补丁，但内核社区人力有限，因此较老版本会停止维护，而标记为EOL(End of Life)的版本表示不再支持的版本。</p>
<p>3、longterm(Long Term Support)<br>长期支持版，长期支持版的内核不再支持时会标记EOL。</p>
<p>4、linux-next，snapshot<br>代码提交周期结束之前生成的快照 用于给Linux代码贡献者们做测试</p>
<h2 id="查看Linux内核版本命令"><a href="#查看Linux内核版本命令" class="headerlink" title="查看Linux内核版本命令"></a>查看Linux内核版本命令</h2><p>1、cat /proc/version</p>
<pre><code>[root@bogon ~]# cat /proc/version
Linux version 4.4.131-1.el7.elrepo.x86_64 (mockbuild@Build64R7) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-28) (GCC) ) #1 SMP Wed May 2 13:09:02 EDT 2018
</code></pre><p>2、uname -a</p>
<pre><code>[root@bogon ~]# uname -a
Linux bogon 4.4.131-1.el7.elrepo.x86_64 #1 SMP Wed May 2 13:09:02 EDT 2018 x86_64 x86_64 x86_64 GNU/Linux

[root@bogon ~]# uname -r
4.4.131-1.el7.elrepo.x86_64
</code></pre><h2 id="查看Linux系统版本的命令"><a href="#查看Linux系统版本的命令" class="headerlink" title="查看Linux系统版本的命令"></a>查看Linux系统版本的命令</h2><p>1、lsb_release -a（适用于所有的Linux发行版本）</p>
<p>LSB是Linux Standard Base的缩写，lsb_release命令用来显示LSB和特定版本的相关信息。如果使用该命令时不带参数，则默认加上-v参数。<br>说明：</p>
<pre><code>-v 显示版本信息。
-i 显示发行版的id。
-d 显示该发行版的描述信息。
-r 显示当前系统是发行版的具体版本号。
-c 发行版代号。
-a 显示上面的所有信息。
-h 显示帮助信息。
-s 输出简短的描述信息(仅限于redhat和fedora系统) 。
</code></pre><p>有些系统中默认并没有安装lsb_release，需要进行安装，以CentOS为例：<br>首先查找lsb_release安装包：</p>
<pre><code>[root@bogon ~]# yum provides lsb_release
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * base: mirrors.cn99.com
 * elrepo: mirrors.tuna.tsinghua.edu.cn
 * extras: centos.ustc.edu.cn
 * updates: mirrors.cn99.com
redhat-lsb-core-4.1-27.el7.centos.1.x86_64 : LSB Core module support
Repo        : base
Matched from:
Filename    : /usr/bin/lsb_release
</code></pre><p>安装：</p>
<pre><code>[root@bogon ~]# yum install -y redhat-lsb-core
</code></pre><p>2、cat /etc/redhat-release（适用于Redhat系的Linux）</p>
<pre><code>[root@bogon ~]# cat /etc/redhat-release
CentOS Linux release 7.5.1804 (Core) 
</code></pre><p>3、cat /etc/issue（适用于所有的Linux发行版本）</p>
<pre><code>root@localhost:~# cat /etc/issue
Ubuntu 14.04.5 LTS \n \l
</code></pre><p>参考资料：<br>1、<a href="https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8#%E7%89%88%E6%9C%AC%E5%91%BD%E5%90%8D" target="_blank" rel="noopener">Linux内核（维基百科）</a><br>2、<a href="https://www.ibm.com/developerworks/cn/linux/l-linux-kernel/" target="_blank" rel="noopener">Linux内核剖析</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Kernel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL源码安装]]></title>
      <url>http://jasonhzy.github.io/2019/02/01/mysql-compile-install/</url>
      <content type="html"><![CDATA[<p>MySQL源码安装，本例以在CentOS7上安装MySQL5.7为例</p>
<a id="more"></a>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><pre><code>https://dev.mysql.com/downloads/mysql/5.7.html#downloads
</code></pre><p><img src="/images/mysql-compile-install/source.jpg" alt="mysql"></p>
<h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><pre><code>yum -y install gcc gcc-c++ bison bison-devel ncurses ncurses-devel cmake openssl
</code></pre><h2 id="创建用户和组"><a href="#创建用户和组" class="headerlink" title="创建用户和组"></a>创建用户和组</h2><pre><code>groupadd mysql
useradd -g mysql -s /sbin/nologin -M mysql
</code></pre><h2 id="创建文件目录"><a href="#创建文件目录" class="headerlink" title="创建文件目录"></a>创建文件目录</h2><pre><code>mkdir -p /usr/local/mysql
mkdir -p /usr/local/boost
mkdir -p /data/mysql
</code></pre><p>修改目录权限：</p>
<pre><code>chown -R mysql:mysql /usr/local/mysql
chown -R mysql:mysql /data/mysql
</code></pre><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><pre><code>cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \
        -DMYSQL_DATADIR=/data/mysql \
        -DSYSCONFDIR=/etc \
        -DMYSQL_UNIX_ADDR=/tmp/mysql.sock \
        -DDEFAULT_CHARSET=utf8mb4 \
        -DDEFAULT_COLLATION=utf8mb4_unicode_ci \
        -DDOWNLOAD_BOOST=1  \   #若boost已经下载更改为0即可
        -DWITH_BOOST=/usr/local/boost
</code></pre><p>注意:<br>    1、编译过程需要较长的时间，需耐心等待。<br>    2、重新cmake时，由于cmake生成临时文件CMakeCache.txt，需要先删除CMakeCache.txt文件，避免不必要的错误，即</p>
<pre><code>rm CMakeCache.txt
</code></pre><h2 id="编译之后安装"><a href="#编译之后安装" class="headerlink" title="编译之后安装"></a>编译之后安装</h2><pre><code>make install
</code></pre><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>–initialize-insecure 不会生成密码<br>-–initialize 会生成一个随机密码<br>-–datadir 目标目录下不能有数据文件</p>
<p>初始化命令：</p>
<pre><code>mysqld --defaults-file=/etc/my.cnf \
    --user=mysql \
    --basedir=/usr/local/mysql \
    --datadir=/data/mysql \
    --initialize
</code></pre><p>如果需要重新初始化，清空datadir即可：</p>
<pre><code>rm -fr /data/mysql/*
</code></pre><p>备注：5.7之前的版本采用mysql_install_db初始化    </p>
<h2 id="配置mysql服务"><a href="#配置mysql服务" class="headerlink" title="配置mysql服务"></a>配置mysql服务</h2><pre><code>cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld
</code></pre><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><pre><code>service mysqld status/start/stop
或者 
systemctl enable mysqld
systemctl status/start/stop mysqld
</code></pre><h2 id="配置root登录密码"><a href="#配置root登录密码" class="headerlink" title="配置root登录密码"></a>配置root登录密码</h2><pre><code>mysql_secure_installation
</code></pre><h2 id="创建远程访问用户"><a href="#创建远程访问用户" class="headerlink" title="创建远程访问用户"></a>创建远程访问用户</h2><pre><code>grant select, insert, update, delete on jasonhzy.* to &apos;test&apos;@&apos;%&apos; identified by &apos;test&apos;;
flush privileges;
</code></pre><h2 id="配置关键参数"><a href="#配置关键参数" class="headerlink" title="配置关键参数"></a>配置关键参数</h2><pre><code>[client]
port     = 3306
socket   = /tmp/mysql.sock
﻿default-character-set = utf8mb4

[mysql]
default-character-set=utf8mb4

[mysqld]
# 监听的TCP/IP端口
port     = 3306
# mysql安装路径
basedir  = /usr/local/mysql
# 数据文件位置
datadir  = /data/mysql
# mysql socket连接文件
socket   = /tmp/mysql.sock
# mysql进程的文件
pid-file   = /data/mysql/mysql.pid
#  错误日志文件
log-error  = /data/mysql/mysql-error.log

# 字符集
character-set-client-handshake = FALSE
character-set-server = utf8mb4
collation-server = utf8mb4_unicode_ci
# init_connect = &apos;SET NAMES utf8mb4&apos;
# skip-character-set-client-handshake = true

# 禁用自动提交方式
# autocommit=0

# explicit_defaults_for_timestamp = true
# 设置时区
# default-time-zone = &apos;+8:00&apos;

# 库名、表名是否区分大小写。默认为0区分大小写。设置1不区分大小写，创建的表、数据库都以小写形式存放磁盘
# lower_case_table_names = 0

# 不在tcp/ip端口上进行监听，所有的连接都是通过本地的socket文件连
# skip-networking
# 禁用DNS查询，不能在mysql的授权表中使用主机名，只能使用IP，例如：
# grant all on test.* to root@localhost 这是不行的
skip-name-resolve

# 默认存储引擎
default-storage-engine = InnoDB

# MySQL支持4种事务隔离级别，他们分别是：
# READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE
# 若未指定，mysql默认采用的是REPEATABLE-READ，ORACLE默认的是READ-COMMITTED
transaction_isolation = REPEATABLE-READ

# 是否开启慢查询日志，1表示开启，0表示关闭
slow-query-log = 1
# 慢查询日志文件位置
slow-query-log-file= /data/mysql/mysql-slow.log
# 所有的使用了比这个时间(以秒为单位)更多的查询会被认为是慢速查询.
# long_query_time = 10
# 日志存储方式。log_output=&apos;FILE&apos;表示将日志存入文件，默认值是&apos;FILE&apos;。
# log_output=&apos;TABLE&apos;表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中。
# MySQL数据库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output=&apos;FILE,TABLE&apos;。
# 日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，
# 又需要能够获得更高的系统性能，那么建议优先记录到文件
# log_output=FILE

# 指定mysql服务所允许的最大连接进程数，若访问时经常出现&quot;Too Many Connections&quot;的错误提示，则需要增大该参数值。
max_connections = 1000
# 每个主机连接允许异常中断的次数，当超过该次数mysql服务将禁止该主机的连接请求。若让禁止的host仍可连接，方法如下：
# 1、重启mysql服务 2、flush hosts 3、mysqladmin flush-hosts -hlocalhost -P 3306 -uroot -p  
max_connect_errors = 1000000

# 服务器标识id(用于主从复制)
server-id  = 10
# 二进制日志存放路径
log_bin = mysql-bin
log_bin_index = /data/mysql/mysql-bin.index
# binlog格式，复制有3种模式STATEMENT，ROW，MIXED
binlog_format = row

# 如果你在使用链式从服务器结构的复制模式 (A-&gt;B-&gt;C),
# 你需要在服务器B上打开此项.
# 此选项打开在从线程上重做过的更新的日志,
# 并将其写入从服务器的二进制日志.
# log_slave_updates

# 独立表空间，每个表的数据和索引单独存放在以表命名的.ibd文件中，最好在安装数据库就设置，使用之后再设置可能无法重启
# 节省空间／提升性能，但单表增加过大
innodb-file-per-table  = 1

# 缓冲池大小，对Innodb表来说非常重要，一般设置为主机内存的70~80%
innodb_buffer_pool_size = 6G

# 1)为0，log buffer将每秒一次地写入log file中,并且log file的flush(刷到磁盘)操作同时进行. 当事务提交时,不做日志写入操作。
#   当MySQL Crash和OS Crash或者主机断电之后，可能会丢失上一秒的事务数据
# 2)为1，每次事务提交时MySQL都会把log buffer的数据写入log file,并且flush(刷到磁盘)中去。最安全的设置，能够保证不论
#   是MySQL Crash还是OS Crash或者是主机断电都不会丢失任何已经提交的数据
# 3)为2，每次事务提交时MySQL都会把log buffer的数据写入log file.但是flush(刷到磁盘)操作并不会同时进行。该模式下MySQL
#  会每秒定时执行一次flush(刷到磁盘)操作。MySQL Crash并不会造成数据的丢失，但是OS Crash或者是主机断电后可能丢失
# 简单说来，可选值的安全性从0-&gt;2-&gt;1递增，分别对应于mysqld进程crash可能丢失 -&gt; OS crash可能丢失 -&gt; 事务安全。
innodb_flush_log_at_trx_commit = 2

#开启gtid
gtid_mode=ON
enforce-gtid-consistency=ON

[mysqldump]                        
max_allowed_packet = 256M
# mysqldump导出大表时很有用，强制从服务器查询取得记录直接输出，而不是取得所有记录后将它们缓存到内存中。
quick
</code></pre><p>参考资料</p>
<p><a href="https://juejin.im/post/5b82e0196fb9a019f47d1823" target="_blank" rel="noopener">全面了解mysql锁机制（InnoDB）与问题排查</a><br><a href="http://hedengcheng.com/?p=771#_Toc374698307" target="_blank" rel="noopener">MySQL 加锁处理分析</a></p>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql-config-editor使用]]></title>
      <url>http://jasonhzy.github.io/2019/01/15/mysql-config-editor/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>登陆MySQL我们需要频繁输入用户名密码，自MySQL5.6+以后出现了mysql_config_editor，可以给指定的连接和密码生成一个加密文件，服务的认证信息加密保存在.mylogin.cnf文件（默认位于用户主目录）之后，MySQL客户端工具可通过读取该加密文件连接MySQL，避免重复输入登录信息，也避免敏感信息的暴露。<br>应用：<br>MySQL的登陆和备份（mysqldump）等即可实现免密操作。</p>
<a id="more"></a>
<h2 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h2><pre><code>mysql_config_editor --help
mysql_config_editor [/print/set/remove/reset] --help
</code></pre><p>如图所示：<br><img src="/images/mysql-config-editor/help.png" alt="help">    </p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><pre><code>mysql_config_editor set --login-path=test --host=localhost --user=root --port=3306 --password
</code></pre><p>其中配置项：</p>
<pre><code>-h, –host=name 添加host到登陆文件中
-G,–login-path=name 在登录文件中为login path添加名字（默认为client）
-p, –password 在登陆文件中添加密码（该密码会被mysql_config_editor自动加密）
-u, –user 添加用户名到登陆文件中
-S, –socket=/path/mysql.sock 添加sock文件路径到登陆文件中
-P, –port=3306 添加登陆端口到登陆文件中
</code></pre><p>如图所示：<br><img src="/images/mysql-config-editor/set.png" alt="set"> </p>
<h3 id="显示配置"><a href="#显示配置" class="headerlink" title="显示配置"></a>显示配置</h3><pre><code>mysql_config_editor print --login-path=test #显示执行的login-path配置
mysql_config_editor print --all             #显示所有的login-path信息
</code></pre><p>显示的密码是经过加密处理的，不必担心暴露问题</p>
<p>如图所示：<br><img src="/images/mysql-config-editor/print.png" alt="print">     </p>
<h3 id="删除配置"><a href="#删除配置" class="headerlink" title="删除配置"></a>删除配置</h3><pre><code>mysql_config_editor remove --login-path=test
</code></pre><h3 id="清空配置"><a href="#清空配置" class="headerlink" title="清空配置"></a>清空配置</h3><p>通过reset命令可以清空所有的配置信息</p>
<pre><code>mysql_config_editor reset
</code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>数据库登陆：</p>
<pre><code>mysql --login-path=test
</code></pre><p>如图所示：<br><img src="/images/mysql-config-editor/login.png" alt="login">     </p>
<p>全量备份：</p>
<pre><code>mysqldump --login-path=test --opt pre_school | gzip &gt; test.sql.gz
</code></pre>]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch集群部署]]></title>
      <url>http://jasonhzy.github.io/2018/08/10/elasticsearch/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Elasticsearch是一款稳定高效的分布式搜索和分析引擎，它的底层基于 Lucene，并提供了友好的RESTful API来对数据进行操作。Elasticsearch 在搭建企业级搜索（如日志搜索、商品搜索等）平台中很广泛，官网也提供了不少案例</p>
<a id="more"></a>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Index (索引)：Index 是名词，一个 Index 就像是传统关系数据库的 Database，它是 Elasticsearch 用来存储数据的逻辑区域<br>Document (文档)：Elasticsearch 使用 JSON 文档来表示一个对象，就像是关系数据库中一个 Table 中的一行数据<br>Type (类型)：文档归属于一种 Type，就像是关系数据库中的一个 Table<br>Field (字段)：每个文档包含多个字段，类似关系数据库中一个 Table 的列</p>
<p>Node (节点)：node 是一个运行着的 Elasticsearch 实例，一个 node 就是一个单独的 server<br>Cluster (集群)：cluster 是多个 node 的集合<br>Shard (分片)：数据分片，一个 index 可能会存在于多个 shard</p>
<!-- more -->
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>操作系统：Ubuntu14.04<br>JDK：jdk1.8.0_121<br>Elasticsearch：2.3.3</p>
<table>
<thead>
<tr>
<th>节点</th>
<th>IP</th>
<th>master</th>
<th>数据节点</th>
</tr>
</thead>
<tbody>
<tr>
<td>node-mater</td>
<td>192.168.1.10</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>node-1</td>
<td>192.168.1.11</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>node-2</td>
<td>192.168.1.12</td>
<td>否</td>
<td>是</td>
</tr>
</tbody>
</table>
<h2 id="安装与部署"><a href="#安装与部署" class="headerlink" title="安装与部署"></a>安装与部署</h2><h3 id="下载不同版本地址：elasticsearch"><a href="#下载不同版本地址：elasticsearch" class="headerlink" title="下载不同版本地址：elasticsearch"></a>下载不同版本地址：<a href="https://www.elastic.co/downloads/past-releases" target="_blank" rel="noopener">elasticsearch</a></h3><p>当前以2.3.3版本为例</p>
<h3 id="用户-目录-权限设置"><a href="#用户-目录-权限设置" class="headerlink" title="用户/目录/权限设置"></a>用户/目录/权限设置</h3><p>创建用户</p>
<pre><code>useradd es -s /sbin/nologin
</code></pre><p>新建目录, 假如/data/目录挂载的硬盘最大(100G以上)</p>
<pre><code>mkdir -p /data/elstaticsearch/logs
mkdir -p /data/elstaticsearch/data

chown -R es:es /data/elstaticsearch/logs
chown -R es:es /data/elstaticsearch/data
</code></pre><h3 id="配置内存"><a href="#配置内存" class="headerlink" title="配置内存"></a>配置内存</h3><p>修改文件./bin/elasticsearch.in.sh：</p>
<pre><code>if [ &quot;x$ES_MIN_MEM&quot; = &quot;x&quot; ]; then
    ES_MIN_MEM=5g  //最小内存，根据机器内存来定
fi
if [ &quot;x$ES_MAX_MEM&quot; = &quot;x&quot; ]; then
    ES_MAX_MEM=8g  //最大内存，根据机器内存来定，最好不要超过机器物理内存的50%
fi
</code></pre><p>linux配置文件/etc/profile中设置：</p>
<pre><code>export ES_HEAP_SIZE=8g //根据机器内存来定，一般分配不超过50%
</code></pre><h3 id="配置系统”最大打开文件数”"><a href="#配置系统”最大打开文件数”" class="headerlink" title="配置系统”最大打开文件数”"></a>配置系统”最大打开文件数”</h3><p>解决es启动的警告信息：Too many open files的问题</p>
<pre><code>　vi /etc/security/limits.conf
root soft nofile 65535
root hard nofile 65535  #或者合并为：root - nofile 65535
* soft nofile 65535
* hard nofile 65535  #或者合并为：* - nofile 65535
</code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>修改elstaticsearch的配置文件</p>
<pre><code>config/elasticsearch.yml
</code></pre><p>主节点配置</p>
<pre><code>#集群名，自定义集群名
cluster.name: jasontest

#节点名，同一集群下要求每个节点的节点名不一致
node.name: node-master
#指定该节点是否有资格被选举成为master节点
node.master: true
#允许该节点存储数据
node.data: false

#数据路径，可用逗号分隔多个路径
path.data: /data/elstaticsearch/data
#日志路径
path.logs: /data/elstaticsearch/logs

#内存锁，选项为true或false，允许 JVM 锁住内存，禁止操作系统交换出去
bootstrap.mlockall: true
#用于设置缓存类型为Soft Reference，它的主要特点是据有较强的引用功能，只有当内存不够的时候，
#才进行回收这类内存，因此在内存足够的时候，它们通常不被回收
index.cache.field.type: soft
#用于设置缓存field的最大值
index.cache.field.max_size: 50000
#用于设置filters缓存大小，可以是百分比或者确切的值，如512mb
indices.cache.filter.size: 2014mb
用于设置field data缓存大小，可以是百分比或者确切的值，如512mb
indices.fielddata.cache.size: 1024mb
#用于设置field data缓存超时时间
indices.fielddata.cache.expire: 10m

#设置绑定的ip地址,可以是ipv4或ipv6的
network.bind_host: 192.168.0.10
#设置其它节点和该节点交互的ip地址,如果不设置它会自动设置,值必须是个真实的ip地址
network.publish_host: 192.168.0.10
#同时设置bind_host和publish_host上面两个参数，一般设置其即可
network.host: 192.168.0.10
#设置对外服务的http端口,默认为9200 
http.port: 9200
#设置节点间交互的tcp端口
transport.tcp.port: 9300
#配置是否允许跨域请求
http.cors.enabled: true
#定义允许哪些源请求。可以使用正则表达式，设置为*即任何来源都可访问
http.cors.allow-origin: &quot;*&quot;

#设置当前结点等待其他结点的ping信号的超时时间，提高一点以应对网络不好的时候，防止脑裂
discovery.zen.ping.timeout: 100s
#设置当前结点发送ping信号后等待目标结点响应的时间，超过该时间，当前结点认为目标结点无法响应
discovery.zen.fd.ping_timeout: 120s
#设置重试次数，超过此次数之后，判定目标结点出现故障，停止工作
discovery.zen.fd.ping_retries: 10
#设置结点之间互相ping信号的时间间隔
discovery.zen.fd.ping_interval: 30s
#设置是否打开多播发现节点。当多播不可用或集群跨网段的时候集群通信还是选择单播
discovery.zen.ping.multicast.enabled: false
#集群中的主节点的初始列表,当节点(主节点或者数据节点)启动时使用这个列表进行探测
discovery.zen.ping.unicast.hosts: [&quot;192.168.1.10:9300&quot;,&quot;192.168.1.11:9300&quot;,&quot;192.168.1.12:9300&quot;]
#决定了要选举一个Master需要多少个节点（最少候选节点数），为了防止脑裂，最好设置为(集群中节点的数量/2 + 1)个
discovery.zen.minimum_master_nodes: 2
</code></pre><p>从节点配置，以下是一些关键配置项，其他的配置参考主节点配置并保持一致性，防止出现问题</p>
<pre><code>cluster.name: jasontest

node.name: node-1 #另一台节点即node.name: node-2，其他参数配置保持一致
node.master: false
node.data: true

path.data: /data/elstaticsearch/data
path.logs: /data/elstaticsearch/logs
</code></pre><p>以上主从节点据配置好之后，在各个节点服务器内以创建的低级权限的用户（例如：es）启动elasticsearch：</p>
<pre><code>su es
cd /opt/elasticsearch/
./bin/elasticsearch -d # -d 后台以守护进程模式运行
</code></pre><p>Elasticsearch 启动后，也启动了两个端口 9200 和 9300：</p>
<pre><code>9200 端口：HTTP RESTful 接口的通讯端口
9300 端口：TCP 通讯端口，用于集群间节点通信和与 Java 客户端通信的端口
</code></pre><h2 id="基本API"><a href="#基本API" class="headerlink" title="基本API"></a>基本API</h2><p>1.查看集群健康状态</p>
<pre><code>curl -XGET &apos;http://localhost:9200/_cluster/health?pretty&apos;
</code></pre><p>查询结果即：</p>
<pre><code>{
  &quot;cluster_name&quot; : &quot;jasontest&quot;,
  &quot;status&quot; : &quot;green&quot;,
  &quot;timed_out&quot; : false,
  &quot;number_of_nodes&quot; : 3,
  &quot;number_of_data_nodes&quot; : 2,
  &quot;active_primary_shards&quot; : 300,
  &quot;active_shards&quot; : 600,
  &quot;relocating_shards&quot; : 0,
  &quot;initializing_shards&quot; : 0,
  &quot;unassigned_shards&quot; : 0,
  &quot;delayed_unassigned_shards&quot; : 0,
  &quot;number_of_pending_tasks&quot; : 0,
  &quot;number_of_in_flight_fetch&quot; : 0,
  &quot;task_max_waiting_in_queue_millis&quot; : 0,
  &quot;active_shards_percent_as_number&quot; : 10.0
}
</code></pre><p>各参数说明：</p>
<pre><code>cluster_name：这是集群的名称。
timeout：这是一个布尔值，指示REST API是否触发了调用中设置的超时。
number_of_nodes：这表示集群中的节点数。
number_of_data_nodes：可以存储数据的节点数
active_primary_shards：活动的主分片数; 执行写操作的master分片的数量
active_shards：显示活动分片的数量。 这些分片可以用于搜索。
relocating_shards：显示正在重定位的分片数，从节点迁移到另一个节点。 这主要是由于集群节点的平衡。
initializing_shards：显示初始化状态下的分片数。 初始化过程在分片启动时完成。 在变得活跃状态之前，这是一个暂态，它由几个步骤组成，其中最重要的是如下：
    复制分片数据复制（如果是另一个副本）
    检查Lucene索引
    根据需要处理事务日志
unassigned_shards：未分配给节点的分片数。 这通常是由于设置的副本数大于节点数。 在启动期间，尚未初始化或初始化的分片将在此计数。
delayed_unassigned_shards：这将显示分配的分片数，但是它们的节点被配置为延迟分配。 您可以访问https://www.elastic.co/guide/en/elasticsearch/reference/5.0/delayed-allocation.html获取有关延迟分片分配的更多信息。
number_of_pending_tasks：这是集群级别的待处理任务数，例如集群状态更新，创建索引和分片重定位。 它很少是0以外的任何东西。
number_of_in_flight_fetch：必须在分片中执行的集群更新数。 因为集群更新是异步的，这个数字是跟踪分片中还需要执行的数量。
task_max_waiting_in_queue_millis：这是某些集群任务在队列中等待的最长时间。 它很少是0以外的任何东西。如果值不同于0，这意味着集群的某些资源饱和了或者类似的问题
active_shards_percent_as_number：这是集群中，集群所需要的活动分片数量占总数的百分比。 在生产环境中，除了一些搬迁和分片初始化之外，它几乎与100％不同。
</code></pre><p>elasticsearch 集群健康状况返回颜色取值：</p>
<pre><code>green
    所有的主分片和副本分片都已分配。你的集群是 100% 可用的。
yellow
    所有的主分片已经分片了，但至少还有一个副本是缺失的。不会有数据丢失，所以搜索结果依然是完整的。不过，你的高可用性在某种程度上被弱化。如果更多的分片消失，你就会丢数据了。把yellow想象成一个需要及时调查的警告。
red
    至少一个主分片（以及它的全部副本）都在缺失中。这意味着你在缺少数据：搜索只能返回部分数据，而分配到这个分片上的写入请求会返回一个异常。
</code></pre><p>2.查看集群节点情况</p>
<pre><code>curl -XGET &apos;http://localhost:9200/_cat/nodes?v&apos; # v代表输出表头
</code></pre><p>查询结果即：    </p>
<pre><code>host        ip          heap.percent ram.percent load node.role master name        
192.168.1.12 192.168.1.12           29          99 2.93 d         -      node-2      
192.168.1.10 192.168.1.10           27          86 0.67 -         *      node-master 
192.168.1.11 192.168.1.11           22          99 7.36 d         -      node-1
</code></pre><p>3.查看节点详细信息</p>
<pre><code>curl -XGET http://localhost:9200/_nodes/process?pretty
</code></pre><p>查询结果即：    </p>
<pre><code>{
  &quot;cluster_name&quot; : &quot;jasontest&quot;,
  &quot;nodes&quot; : {
    &quot;WaqiU7wS3ObAc5f5mgf8Q&quot; : {
      &quot;name&quot; : &quot;node-2&quot;,
      &quot;transport_address&quot; : &quot;192.168.1.11:9300&quot;,
      &quot;host&quot; : &quot;192.168.1.11&quot;,
      &quot;ip&quot; : &quot;192.168.1.11&quot;,
      &quot;version&quot; : &quot;2.3.3&quot;,
      &quot;build&quot; : &quot;218bdf1&quot;,
      &quot;http_address&quot; : &quot;192.168.1.11:9200&quot;,
      &quot;attributes&quot; : {
        &quot;master&quot; : &quot;false&quot;
      },
      &quot;process&quot; : {
        &quot;refresh_interval_in_millis&quot; : 1000,
        &quot;id&quot; : 20891,
        &quot;mlockall&quot; : false
      }
    },
    &quot;Ac9Wd8dpSwGymkUOsU6RYg&quot; : {
    ......
    &quot;attributes&quot; : {
       &quot;master&quot; : &quot;true&quot;
    },
    &quot;EdSfAdEWR5fSDGse8bgsl&quot; : {
    ......
</code></pre><p>4.查看unassigned shards</p>
<pre><code>curl -s http://localhost:9200/_cat/shards | grep UNASSIGNED
curl -X GET localhost:9200/_cat/shards?h=index,shard,prirep,state,unassigned.reason| grep UNASSIGNED #unassigned shards的详情
</code></pre><p>查询结果即（第一列表示索引名，第二列表示分片编号，第三列p是主分片、r是副本）：</p>
<pre><code>es1     3 r UNASSIGNED
es1     2 r UNASSIGNED
es1     1 r UNASSIGNED
es1     0 r UNASSIGNED    
</code></pre><p>5.处理中Elasticsearch集群yellow和red状态   </p>
<p>查看是哪个索引的status是red／yellow导致了集群都red／yellow了，查找API即：</p>
<pre><code>curl -X GET &apos;http://localhost:9200/_cluster/health?level=indices&amp;pretty&apos; #格式化显示， 或者使用python -m json.tool格式化
curl -X GET &apos;http://localhost:9200/_cluster/health?level=indices&apos; | grep red #可以看到索引信息
</code></pre><p>修复导致了集群状态red／yellow的unassigned shards索引：</p>
<pre><code>curl -XPOST &apos;http://localhost:9200/_cluster/reroute&apos; -d &apos;{
    &quot;commands&quot; : [ {
          &quot;allocate&quot; : {
              &quot;index&quot; : &quot;es1&quot;,
              &quot;shard&quot; : 0,
              &quot;node&quot; : &quot;EdSfAdEWR5fSDGse8bgsl&quot;,
              &quot;allow_primary&quot; : true
          }
        }
    ]
}&apos;        
</code></pre><p>注意：其中_cluster/reroute这个API中参数node，可根据_nodes/process接口查询到，尝试使用其中的数据节点</p>
<p>6.删除索引<br>1）命令格式：</p>
<pre><code>curl -XDELETE http://localhost:9200/索引名称
</code></pre><p>例如：删除索引”data-2018.08.10”</p>
<pre><code>$ curl -XDELETE http://localhost:9200/data-2018.08.10
{&quot;acknowledged&quot;:true} #表示删除成功
</code></pre><p>2）一次删除多个索引，中间用逗号隔开<br>例如：删除index1，index2两个索引</p>
<pre><code>$ curl -XDELETE http://localhost:9200/index1,index2
{&quot;acknowledged&quot;:true} #表示删除成功
</code></pre><p>3）模糊匹配删除<br>例如：删除以”data-2018.08”为前缀的索引即”data-2018.08.*”    </p>
<pre><code>$ curl -XDELETE http://localhost:9200/data-2018.08.*
{&quot;acknowledged&quot;:true} #表示删除成功
</code></pre><p>4）使用通配符，删除所有的索引<br>命令：</p>
<pre><code>curl -XDELETE http://localhost:9200/_all
或 curl -XDELETE http://localhost:9200/*
</code></pre><p>_all ,<em> 通配所有的索引， 通常不建议使用通配符，误删了后果就很严重了。<br>为了安全起见，可以在配置文件中设置禁用_all和</em>通配符</p>
<pre><code>action.destructive_requires_name = true 
</code></pre>]]></content>
      
        <categories>
            
            <category> Elasticsearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP OPcache]]></title>
      <url>http://jasonhzy.github.io/2018/07/16/php-opcache/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>OPcache的前身是Optimizer+（于2013年3月中旬更名为Opcache），Zend开发的一款闭源但可以免费使用的PHP优化加速组件。OPcache通过将PHP脚本预编译的字节码存储到共享内存中来提升PHP的性能，存储预编译字节码的好处就是 省去了每次加载和解析 PHP 脚本的开销。<br>PHP 5.5.0及后续版本中已经绑定了OPcache扩展。对于PHP 5.2，5.3 和 5.4 版本可以使用<a href="https://pecl.php.net/package/ZendOpcache" target="_blank" rel="noopener">PECL</a>扩展中的OPcache库</p>
</blockquote>
<a id="more"></a>
<h2 id="常用的配置"><a href="#常用的配置" class="headerlink" title="常用的配置"></a>常用的配置</h2><h3 id="opcache-revalidate-freq"><a href="#opcache-revalidate-freq" class="headerlink" title="opcache.revalidate_freq"></a>opcache.revalidate_freq</h3><p>设置缓存的过期时间（单位是秒），当这个时间达到后，opcache会检查你的代码是否改变，如果改变了PHP会重新编译它，生成新的opcode，并且更新缓存。为“0”表示每次请求都会检查PHP代码是否更新</p>
<h3 id="opcache-validate-timestamps"><a href="#opcache-validate-timestamps" class="headerlink" title="opcache.validate_timestamps"></a>opcache.validate_timestamps</h3><p>如果启用（设置为1），那么OPcache会每隔opcache.revalidate_freq设定的秒数检查脚本(文件的时间戳)是否更新<br>如果禁用（设置为0），opcache.revalidate_freq被忽略，PHP文件永远不会被检查。这意味着如果修改了你的代码，然后更新到服务器上，再在浏览器上请求更新的代码对应的功能，会看不到更新的效果，必须得重新加载（重启apache或者nginx等）</p>
<h3 id="opcache-max-accelerated-files"><a href="#opcache-max-accelerated-files" class="headerlink" title="opcache.max_accelerated_files"></a>opcache.max_accelerated_files</h3><p>设置内存中最多可以缓存多少个PHP文件。这个选项必须得设置得足够大，大于你的项目中的所有PHP文件的总和。真实的取值是在质数集合{ 223, 463, 983, 1979, 3907, 7963, 16229, 32531, 65407, 130987 } 中找到的第一个大于等于设置值的质数。 设置值取值范围最小值是 200，最大值在 PHP 5.5.6 之前是 100000，PHP 5.5.6 及之后是 1000000<br>可以运行“find . -type f -print | grep php | wc -l”这个命令来快速计算你的代码库中的PHP文件数</p>
<h3 id="opcache-memory-consumption"><a href="#opcache-memory-consumption" class="headerlink" title="opcache.memory_consumption"></a>opcache.memory_consumption</h3><p>OPcache共享内存存储大小。用于存储预编译的opcode（以MB为单位），通过调用opcache_get_status()来获取opcache使用的内存总量，可据此进行相应的调整</p>
<h3 id="opcache-interned-strings-buffer"><a href="#opcache-interned-strings-buffer" class="headerlink" title="opcache.interned_strings_buffer"></a>opcache.interned_strings_buffer</h3><p>用来存储驻留字符串的内存量（单位是MB），这个选项则会把这个特性提升一个层次——默认情况下这个不可变的内存区域只会存在于单个php-fpm的进程中，如果设置了这个选项，那么它将会在所有的php-fpm进程中共享。在比较大的应用中，这可以非常有效地节约内存，提高应用的性能。</p>
<blockquote>
<p>什么是驻留字符串呢？PHP解释器在背后会找到相同字符串的多个实例，把这个字符串保存在内存中，如果再次使用相同的字符串，PHP解释器会使用指针，这么做的目的是节省内存。默认情况下，PHP驻留字符串会隔离在各个PHP进程中，这个设置能让PHP-FPM进程池把所有进程驻留字符串存储到共享的缓冲区中，以便在PHP-FPM进程池中的多个进程之间引用驻留字符串，这样能节省更多内存。 </p>
</blockquote>
<p>例如，如果你在代码中使用了100次字符串“basketball”，在PHP内部只会在第一使用这个字符串的时候分配一个不可变的内存区域来存储这个字符串，其他的99次使用都会直接指向这个内存区域。</p>
<h3 id="opcache-fast-shutdown"><a href="#opcache-fast-shutdown" class="headerlink" title="opcache.fast_shutdown"></a>opcache.fast_shutdown</h3><p>若启用，则会使用快速停止续发事件。 所谓快速停止续发事件是指依赖 Zend 引擎的内存管理模块 一次释放全部请求变量的内存，而不是依次释放每一个已分配的内存块。<br>该指令已在PHP 7.2.0中被删除。快速关机序列的一个变种已经被集成到PHP中，并且如果可能的话将被自动使用</p>
<p>opcache在php.ini的设置如下：<br>[opcache]<br>zend_extension=/path/opcache.so<br>opcache.revalidate_freq=10<br>opcache.validate_timestamps=1<br>opcache.max_accelerated_files=7963<br>opcache.memory_consumption=128<br>opcache.interned_strings_buffer=8<br>opcache.fast_shutdown=1</p>
<h2 id="opcache相关的几个函数"><a href="#opcache相关的几个函数" class="headerlink" title="opcache相关的几个函数"></a>opcache相关的几个函数</h2><p>opcache_compile_file — 无需运行，即可编译并缓存PHP脚本<br>opcache_get_configuration — 获取php.ini中的配置信息<br>opcache_get_status — 获取缓存的状态信息<br>opcache_invalidate — 废除脚本缓存<br>opcache_is_script_cached — 一个php文件是否被缓存<br>opcache_reset — 重置情况所有的缓存内容</p>
<p>参考资料</p>
<p>1.<a href="https://www.zybuluo.com/phper/note/1016714" target="_blank" rel="noopener">Opcode是啥以及如何使用好Opcache</a><br>2.<a href="http://php.net/manual/zh/opcache.configuration.php#ini.opcache.max-accelerated-files" target="_blank" rel="noopener">PHP手册-基本配置</a><br>3.<a href="https://gywbd.github.io/posts/2016/1/best-config-for-zend-opcache.html" target="_blank" rel="noopener">zend opcache</a></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql支持utf8mb4]]></title>
      <url>http://jasonhzy.github.io/2018/07/10/mysql-utf8mb4/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MySQL在5.5.3之后增加了utf8mb4的编码，mb4即4-Byte UTF-8 Unicode Encoding，专门用来兼容四字节的unicode。utf8mb4为utf8的超集并兼容utf8，比utf8能表示更多的字符</p>
<a id="more"></a>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>当我们在表中插入emoji表情符号时，就会出现如下的问题，</p>
<pre><code>SQLSTATE[HY000]: General error: 1366 Incorrect string value: &apos;\xF0\x9F\x98\x83\xF0\x9F...&apos; for column &apos;name&apos; at row 1
</code></pre><p>mysql的编码utf8最多支持3个字节, 其中已经包括我们日常能见过的绝大多数字体. 但3个字节远远不够容纳所有的文字, 日常用的emoji表情是4个字节，采用utf8mb4正好解决了这个问题</p>
<h2 id="创建备份"><a href="#创建备份" class="headerlink" title="创建备份"></a>创建备份</h2><p>在要升级的服务器上备份所有数据库，安全第一！</p>
<pre><code>mysqldump -uroot -proot --all-databases &gt; path/example.sql
</code></pre><h2 id="检测MySQL-Server版本"><a href="#检测MySQL-Server版本" class="headerlink" title="检测MySQL Server版本"></a>检测MySQL Server版本</h2><p>在<a href="https://dev.mysql.com/doc/relnotes/mysql/5.5/en/news-5-5-3.html" target="_blank" rel="noopener">MySQL 5.5.3</a>版本中增加了对utfmb4的支持，所以需升级的版本即Mysql5.5.3+</p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><pre><code>vim /etc/my.cnf
# 对本地的mysql客户端的配置
[client]
default-character-set = utf8mb4

# 对其他远程连接的mysql客户端的配置
[mysql]
default-character-set = utf8mb4

# 本地mysql服务的配置
[mysqld]
character-set-client-handshake = FALSE
character-set-server = utf8mb4
collation-server = utf8mb4_unicode_ci
</code></pre><p>修改之后重启mysql    </p>
<h2 id="检查MySQL是否启用了utf8mb4"><a href="#检查MySQL是否启用了utf8mb4" class="headerlink" title="检查MySQL是否启用了utf8mb4"></a>检查MySQL是否启用了utf8mb4</h2><pre><code>mysql&gt; SHOW VARIABLES WHERE Variable_name LIKE &apos;character\_set\_%&apos; OR Variable_name LIKE &apos;collation%&apos;;
+--------------------------+----------------------------------+
| Variable_name            | Value                            |
+--------------------------+----------------------------------+
| character_set_client     | utf8mb4                          |
| character_set_connection | utf8mb4                          |
| character_set_database   | utf8mb4                          |
| character_set_filesystem | binary                           |
| character_set_results    | utf8mb4                          |
| character_set_server     | utf8mb4                          |
| character_set_system     | utf8                             |
| character_sets_dir       | /usr/local/mysql/share/charsets/ |
| collation_connection     | utf8mb4_unicode_ci               |
| collation_database       | utf8mb4_unicode_ci               |
| collation_server         | utf8mb4_unicode_ci               |
+--------------------------+----------------------------------+
</code></pre><h2 id="utf8mb4-general-ci／utf8mb4-unicode-ci区别"><a href="#utf8mb4-general-ci／utf8mb4-unicode-ci区别" class="headerlink" title="utf8mb4_general_ci／utf8mb4_unicode_ci区别"></a>utf8mb4_general_ci／utf8mb4_unicode_ci区别</h2><p>准确性：<br>    1、utf8mb4_unicode_ci是基于标准的Unicode来排序和比较，能够在各种语言之间精确排序<br>    2、utf8mb4_general_ci没有实现Unicode排序规则，在遇到某些特殊语言或者字符集，排序结果可能不一致。<br>性能：<br>    1、utf8mb4_general_ci在比较和排序的时候更快<br>    2、utf8mb4_unicode_ci在特殊情况下，Unicode排序规则为了能够处理特殊字符的情况，实现了略微复杂的排序算法。</p>
<p>总结：unicode_ci的精确度高于general_ci，unicode_ci的速度慢于general_ci</p>
<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><h3 id="字符集参数"><a href="#字符集参数" class="headerlink" title="字符集参数"></a>字符集参数</h3><p>1、参数详解：</p>
<pre><code>character_set_client: 客户端请求数据的字符集
character_set_connection: 服务器收到查询语句后转换成的字符集
character_set_database: 数据库使用的字符集
character_set_filesystem: 把os上文件名转化成此字符集，即把character_set_client
                    转换character_set_filesystem，默认binary是不做任何转换的
character_set_results: 查询结果的字符集，即返回给客户端的字符集
character_set_server: 服务器使用的字符集
character_set_system: 系统字符集，总是utf8，不需要设置，是为存储系统元数据(字段名等)的字符集
以 collation_ 开头的: 描述字符序
</code></pre><p>2、字符集转换流程：</p>
<p><img src="/images/mysql-charset/process.png" alt="charset">  </p>
<p>1) mysql Server收到请求时将请求数据从character_set_client转换为character_set_connection<br>2) 进行内部操作前将请求数据从character_set_connection转换为内部操作字符集,步骤如下<br>    A. 使用每个数据字段的CHARACTER SET设定值；<br>    B. 若上述值不存在，则使用对应数据表的字符集设定值<br>    C. 若上述值不存在，则使用对应数据库的字符集设定值；<br>    D. 若上述值不存在，则使用character_set_server设定值。<br>3) 最后将操作结果从内部操作字符集转换为character_set_results</p>
<h3 id="字符集修改"><a href="#字符集修改" class="headerlink" title="字符集修改"></a>字符集修改</h3><h4 id="修改database默认的字符集"><a href="#修改database默认的字符集" class="headerlink" title="修改database默认的字符集"></a>修改database默认的字符集</h4><pre><code>ALTER DATABASE database_name CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
</code></pre><h4 id="修改table的字符集"><a href="#修改table的字符集" class="headerlink" title="修改table的字符集"></a>修改table的字符集</h4><pre><code>ALTER TABLE table_name DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
</code></pre><h4 id="修改column默认的字符集"><a href="#修改column默认的字符集" class="headerlink" title="修改column默认的字符集"></a>修改column默认的字符集</h4><pre><code>ALTER TABLE table_name CHANGE column_name column_name VARCHAR(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;     
</code></pre><h2 id="修复-amp-优化所有数据表-数据库引擎MyISAM"><a href="#修复-amp-优化所有数据表-数据库引擎MyISAM" class="headerlink" title="修复&amp;优化所有数据表(数据库引擎MyISAM)"></a>修复&amp;优化所有数据表(数据库引擎MyISAM)</h2><pre><code>mysqlcheck -u root -p --auto-repair --optimize --all-databases
</code></pre><p>参考资料</p>
<ol>
<li><a href="https://mathiasbynens.be/notes/mysql-utf8mb4" target="_blank" rel="noopener">How to support full Unicode in MySQL databases</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-conversion.html" target="_blank" rel="noopener">Converting Between 3-Byte and 4-Byte Unicode Character Sets</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建SFTP]]></title>
      <url>http://jasonhzy.github.io/2018/06/26/ssh-sftp/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SFTP即安全文件传输协议（Secure File Transfer Protocol），一个独立的SSH封装协议包，SFTP本身没有单独的守护进程，必须使用sshd守护进程（端口号默认是22）来完成相应的连接操作，使用加密传输认证信息和传输的数据，所以SFTP是一种比较安全的传输方式。 但由于这种传输方式使用了加密/解密技术，效率比普通的FTP要低得多。在对网络安全性要求更高时，可代替FTP使用。</p>
<a id="more"></a>
<h2 id="SFTP搭建"><a href="#SFTP搭建" class="headerlink" title="SFTP搭建"></a>SFTP搭建</h2><h3 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h3><p>当我们为SFTP配置chroot环境后，只有被许可的用户可以访问，并被限制到他们的家目录（“chroot监狱”，chroot jail或chroot prison）中，所以需要确认是否支持chroot。<br>服务器OpenSSH-Server版本最低4.8p1，因为配置权限需要版本添加的新配置项 ChrootDirectory 来完成。<br>查看OpenSSH版本，命令如下：</p>
<pre><code>$ ssh -V
OpenSSH_7.4p1, OpenSSL 1.0.2k-fips  26 Jan 2017
</code></pre><h3 id="创建用户信息"><a href="#创建用户信息" class="headerlink" title="创建用户信息"></a>创建用户信息</h3><p>添加用户组：</p>
<pre><code>groupadd sftpusers
</code></pre><p>添加用户：</p>
<pre><code>useradd -g sftpusers -d /download  -s /sbin/nologin -M jason #单个用户
useradd -g sftpusers -d /download  -s /sbin/nologin -M jack  #单个用户
useradd -d /files  -s /sbin/nologin -M manager               #作为管理员角色

# 参数注解
-g              # 加入用户组
-d              # 指定用户登入时的目录
-s              # 指定用户登入后所使用的shell
/sbin/nologin   # 用户不允许登录
-M              # 不要自动建立用户的登入目录   
</code></pre><h3 id="修改sshd-config配置文件-重点"><a href="#修改sshd-config配置文件-重点" class="headerlink" title="修改sshd_config配置文件(重点)"></a>修改sshd_config配置文件(重点)</h3><pre><code>$ vim /etc/ssh/sshd_config
#Subsystem sftp /usr/libexec/openssh/sftp-server  #此行注释

Subsystem sftp internal-sftp             # 指定使用sftp服务使用系统自带的internal-sftp
AllowTcpForwarding no                    # 禁止用户使用端口转发
X11Forwarding no                         # 禁止用户使用端口转发

#适用于多用户／组情况
Match Group sftpusers                    # 匹配sftpusers组的用户,若要匹配多个组,可用逗号分开
ChrootDirectory /home/sftpdir/files/u%   # 限制用户的根目录（非文件所在目录）, %u 代表用户名, %h 表示用户根目录
ForceCommand internal-sftp               # 只能用于sftpusers登录

#适用于单个用户情况
Match User manager              # 匹配manager用户,若要匹配多个用户,可用逗号分开
ChrootDirectory /home/sftpdir   # 限制用户的根目录（非文件所在目录）
ForceCommand internal-sftp      # 只能用于manager登录
</code></pre><p>通过如上配置，即可将组（即组内用户）限定在/home/sftpdir/files/u%目录下，管理员用户限定在/home/sftpdir目录下</p>
<h3 id="配置目录和权限-重点"><a href="#配置目录和权限-重点" class="headerlink" title="配置目录和权限(重点)"></a>配置目录和权限(重点)</h3><pre><code>mkdir -p /home/sftpdir/files/jason/download
mkdir -p /home/sftpdir/files/jack/download

chmod -R 755 /home/sftpdir/files/jason/download
chmod -R 755 /home/sftpdir/files/jack/download

chown -R root:root /home/sftpdir/files/jason
chown -R root:root /home/sftpdir/files/jack

# 普通用户下载的文件所在的目录download，chown设置的两种情况：
# 1.涉及到管理员角色，chown设置
# 由于上述755权限设置，即可满足普通用户（sftpusers组，r-x）仅仅可以下载，不能上传，管理员角色（manager，rw-）可上传下载
chown -R manager:sftpusers /home/sftpdir/files/jason/download
chown -R manager:sftpusers /home/sftpdir/files/jack/download

# 2.不涉及到管理员角色，仅仅是普通用户，chown设置
# 由于上述755权限设置，即可满足普通用户（sftpusers组，rw-）可上传下载
chown -R jason:sftpusers /home/sftpdir/files/jason/download
chown -R jack:sftpusers /home/sftpdir/files/jack/download
</code></pre><p>目录的权限设定有两个要点，遵循这两个原则：<br>1.由ChrootDirectory指定的目录开始一直往上到系统根目录为止的目录拥有者都只能是root<br>2.由ChrootDirectory指定的目录开始一直往上到系统根目录为止都不可以具有群组写入权限（最大权限755）</p>
<h3 id="配置完成后重启ssh"><a href="#配置完成后重启ssh" class="headerlink" title="配置完成后重启ssh"></a>配置完成后重启ssh</h3><pre><code>service sshd reload
或
systemctl reload sshd.service
</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>不涉及管理员，测试普通用户：</p>
<pre><code>$ sftp jason@192.168.1.58
jason@192.168.1.58&apos;s password: 
Connected to 192.168.1.58.
sftp&gt; pwd    
Remote working directory: /download
sftp&gt; ls -al
drwxr-xr-x    2 1002     1003           21 Jun 23 08:52 .
drwxr-xr-x    3 0        0              20 Jun 23 08:49 ..
-rw-r--r--    1 1002     1002            0 Jun 23 06:28 test.txt
sftp&gt; put /Users/jason/Sites/zabbix.tar.gz zabbix.tar.gz
Uploading /Users/jason/Sites/zabbix.tar.gz to /download/zabbix.tar.gz
/Users/jason/Sites/zabbix.tar.gz        100% 6862KB   2.2MB/s   00:03    
sftp&gt; ls -al
drwxr-xr-x    2 1002     1003           21 Jun 23 08:52 .
drwxr-xr-x    3 0        0              20 Jun 23 08:49 ..
-rw-r--r--    1 1002     1002            0 Jun 23 06:28 test.txt
-rw-r--r--    1 1002     1002      7026672 Jul  6 04:13 zabbix.tar.gz
</code></pre><p>测试管理员：</p>
<pre><code>$ sftp manager@192.168.1.58
manager@192.168.1.58&apos;s password: 
Connected to 192.168.1.58.
sftp&gt; pwd    
Remote working directory: /files
sftp&gt; ls -al
drwxr-xr-x    2 1002     1003           21 Jun 23 08:52 .
drwxr-xr-x    3 0        0              20 Jun 23 08:49 ..
-rw-r--r--    1 1002     1002            0 Jun 23 06:28 test.txt
sftp&gt; put /Users/jason/Sites/zabbix.tar.gz jason/download/zabbix.tar.gz
Uploading /Users/jason/Sites/zabbix.tar.gz to /files/jason/download/zabbix.tar.gz
/Users/jason/Sites/zabbix.tar.gz        100% 6862KB   2.2MB/s   00:03    
sftp&gt; ls -al jason/download
drwxr-xr-x    2 1002     1003           21 Jun 23 08:52 .
drwxr-xr-x    3 0        0              20 Jun 23 08:49 ..
-rw-r--r--    1 1002     1002            0 Jun 23 06:28 test.txt
-rw-r--r--    1 1008     1009      7026672 Jul  6 04:13 zabbix.tar.gz
</code></pre>]]></content>
      
        <categories>
            
            <category> SSH </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SFTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zabbix监控nginx]]></title>
      <url>http://jasonhzy.github.io/2018/05/15/zabbix-nginx/</url>
      <content type="html"><![CDATA[<p>nginx和php-fpm一样内建了一个状态页，利用状态页得到的各项参数，使用zabbix实现对nginx状态监控</p>
<a id="more"></a>
<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>在配置的server内添加location</p>
<pre><code>location /status {
    stub_status on;
    access_log off;
    allow 127.0.0.1;
    deny all;
}
</code></pre><p>需要安装插件http_stub_status_module，编译安装即：</p>
<pre><code>./configure --with-http_stub_status_module 
</code></pre><h2 id="nginx-status数值的含义说明"><a href="#nginx-status数值的含义说明" class="headerlink" title="nginx status数值的含义说明"></a>nginx status数值的含义说明</h2><style>
    table th:first-of-type {
        width: 20%;
    }
</style>

<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Active connections</td>
<td>当前的活动连接数，包含处于等待状态的连接</td>
</tr>
<tr>
<td>accepts</td>
<td>接收到的客户端发来的连接数</td>
</tr>
<tr>
<td>handled</td>
<td>已经处理完成的连接数，一般情况下它和accepts值相同，如果不同说明nginx性能出现瓶颈</td>
</tr>
<tr>
<td>requests</td>
<td>客户端请求总数</td>
</tr>
<tr>
<td>reading</td>
<td>正在读取请求头信息的连接数</td>
</tr>
<tr>
<td>writing</td>
<td>正在发送响应报文的连接数</td>
</tr>
<tr>
<td>waiting</td>
<td>处于闲置状态正等待客户端发送请求的连接数</td>
</tr>
</tbody>
</table>
<p>浏览器或者curl指令查看nginx status:</p>
<pre><code>[root@localhost ~]# curl http://localhost/status
Active connections: 1 
server accepts handled requests
 201 201 1630 
Reading: 0 Writing: 1 Waiting: 0
</code></pre><h2 id="监控nginx"><a href="#监控nginx" class="headerlink" title="监控nginx"></a>监控nginx</h2><h3 id="zabbix-agent客户端脚本"><a href="#zabbix-agent客户端脚本" class="headerlink" title="zabbix agent客户端脚本"></a>zabbix agent客户端脚本</h3><p>/etc/zabbix/script/nginx_status.sh</p>
<pre><code>#!/bin/bash

SERVER=&apos;127.0.0.1:8080&apos;

case $1 in
  ping)
    /usr/sbin/pidof nginx | wc -l
    ;;
  active)
    /usr/bin/curl &quot;http://$SERVER/status&quot; 2&gt;/dev/null | grep &apos;Active&apos; | awk &apos;{print $NF}&apos;
    ;;
  reading)
    /usr/bin/curl &quot;http://$SERVER/status&quot; 2&gt;/dev/null | grep &apos;Reading&apos; | awk &apos;{print $2}&apos;
    ;;
  writing)
    /usr/bin/curl &quot;http://$SERVER/status&quot; 2&gt;/dev/null | grep &apos;Writing&apos; | awk &apos;{print $4}&apos;
    ;;
  waiting)
    /usr/bin/curl &quot;http://$SERVER/status&quot; 2&gt;/dev/null | grep &apos;Waiting&apos; | awk &apos;{print $6}&apos;
    ;;
  accepts)
    /usr/bin/curl &quot;http://$SERVER/status&quot; 2&gt;/dev/null | awk NR==3 | awk &apos;{print $1}&apos;
    ;;
  handled)
    /usr/bin/curl &quot;http://$SERVER/status&quot; 2&gt;/dev/null | awk NR==3 | awk &apos;{print $2}&apos;
    ;;
  requests)
    /usr/bin/curl &quot;http://$SERVER/status&quot; 2&gt;/dev/null | awk NR==3 | awk &apos;{print $3}&apos;
    ;;
  *)
   echo &quot;Usage: %0 {active | reading | writing| waiting| accepts | handled | requests}&quot;
   ;;
esac
</code></pre><h3 id="zabbix-agent客户端配置"><a href="#zabbix-agent客户端配置" class="headerlink" title="zabbix agent客户端配置"></a>zabbix agent客户端配置</h3><p>/etc/zabbix/zabbix_agentd.d/userparameter_nginx.conf</p>
<pre><code>#Monitor Nginx status
UserParameter=nginx.status[*],/etc/zabbix/script/nginx_status.sh $1   
</code></pre><h3 id="zabbix-web端配置"><a href="#zabbix-web端配置" class="headerlink" title="zabbix web端配置"></a>zabbix web端配置</h3><p>配置请参考 <a href="https://jasonhzy.github.io/2018/05/12/zabbix-redis/">zabbix自动发现规则监控redis（主从哨兵）</a></p>
<p>下载：<a href="/download/zabbix/nginx/zbx_nginx_templates.xml">nginx监控模板</a>    </p>
]]></content>
      
        <categories>
            
            <category> zabbix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
            <tag> zabbix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zabbix监控php-fpm]]></title>
      <url>http://jasonhzy.github.io/2018/05/13/zabbix-phpfpm/</url>
      <content type="html"><![CDATA[<p>通过启用php-fpm的status页面，使用zabbix来获取各数据参数以达到监控php-fpm性能状态</p>
<a id="more"></a>
<h2 id="php-fpm配置"><a href="#php-fpm配置" class="headerlink" title="php-fpm配置"></a>php-fpm配置</h2><p>配置文件php-fpm.conf</p>
<pre><code>pm.status_path = /fpmstatus
ping.path = /fpmping
ping.response = pong
</code></pre><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>在配置的server内添加location</p>
<pre><code>location ~ ^/(fpmstatus|fpmping) {    
     fastcgi_pass 127.0.0.1:9000;
     include fastcgi.conf;
     access_log off;
     allow 127.0.0.1;
     deny all;
}  
</code></pre><h2 id="php-fpm-status的含义"><a href="#php-fpm-status的含义" class="headerlink" title="php-fpm status的含义"></a>php-fpm status的含义</h2><style>
    table th:first-of-type {
        width: 20%;
    }
</style>

<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>pool</td>
<td>php-fpm pool的名称，大多数情况下为www</td>
</tr>
<tr>
<td>process manager</td>
<td>进程管理方式，现今大多都为dynamic，不要使用static</td>
</tr>
<tr>
<td>start time</td>
<td>启动时间</td>
</tr>
<tr>
<td>start since</td>
<td>运行时长，单位秒</td>
</tr>
<tr>
<td>accepted conn</td>
<td>pool接收到的请求数</td>
</tr>
<tr>
<td>listen queue</td>
<td>请求等待的连接数，如果不为0，需要增加php-fpm进程数</td>
</tr>
<tr>
<td>max listen queue</td>
<td>从启动到现在处于等待连接的最大数量</td>
</tr>
<tr>
<td>listen queue len</td>
<td>socket等待队列长度</td>
</tr>
<tr>
<td>idle processes</td>
<td>空闲进程数</td>
</tr>
<tr>
<td>active processes</td>
<td>活跃进程数</td>
</tr>
<tr>
<td>total processess</td>
<td>进程总数</td>
</tr>
<tr>
<td>max active process</td>
<td>从php-fpm启动到现在最大的活跃进程数</td>
</tr>
<tr>
<td>max children reached</td>
<td>当pm试图启动更多的children进程时，却达到了进程数的限制，达到一次记录一次，如果不为0，需要增加php-fpm pool进程的最大数</td>
</tr>
<tr>
<td>slow requests</td>
<td>当启用了php-fpm slow-log功能时，如果出现php-fpm慢请求这个计数器会增加，一般不当的Mysql查询会触发这个值</td>
</tr>
</tbody>
</table>
<p>php-fpm状态页可以通过带参数实现个性化，可以带参数json、xml、html、full，并且前三个参数可分别和full组合，即：</p>
<pre><code>#单个参数访问，如：
curl http://localhost/fpmstatus
curl http://localhost/fpmstatus?json
curl http://localhost/fpmstatus?xml
curl http://localhost/fpmstatus?html
curl http://localhost/fpmstatus?full
#组合形式，如：
curl http://localhost/fpmstatus?html&amp;full
</code></pre><p>full详解: </p>
<pre><code>pid – 进程PID，可以单独kill这个进程
state – 当前进程的状态 (Idle, Running, …)
start time – 进程启动的日期
start since – 当前进程运行时长
requests – 当前进程处理了多少个请求
request duration – 请求时长（单位微妙）
request method – 请求方法 (GET, POST, …)
request URI – 请求URI
content length – 请求内容长度 (仅用于 POST)
user – 用户 (PHP_AUTH_USER) (如果没设置为‘-’)
script – PHP脚本 (如果没设置为‘-’)
last request cpu – 最后一个请求CPU使用率。
last request memory － 最后一个请求使用的内存    
</code></pre><h2 id="监控fpm"><a href="#监控fpm" class="headerlink" title="监控fpm"></a>监控fpm</h2><h3 id="zabbix-agent客户端脚本"><a href="#zabbix-agent客户端脚本" class="headerlink" title="zabbix agent客户端脚本"></a>zabbix agent客户端脚本</h3><p>/etc/zabbix/script/phpfpm_status.sh</p>
<pre><code>#!/bin/bash

SERVER=&apos;127.0.0.1:80&apos;

/usr/bin/curl -s &quot;http://127.0.0.1/fpmstatus?xml&quot; | grep &quot;&lt;$1&gt;&quot; | awk -F&apos;&gt;|&lt;&apos; &apos;{print $3}&apos;
</code></pre><h3 id="zabbix-agent客户端配置"><a href="#zabbix-agent客户端配置" class="headerlink" title="zabbix agent客户端配置"></a>zabbix agent客户端配置</h3><p>/etc/zabbix/zabbix_agentd.d/userparameter_phpfpm.conf</p>
<pre><code>#Monitor php-fpm status
UserParameter=phpfpm.status[*],/etc/zabbix/script/phpfpm_status.sh $1   
</code></pre><h3 id="zabbix-web端配置"><a href="#zabbix-web端配置" class="headerlink" title="zabbix web端配置"></a>zabbix web端配置</h3><p>配置请参考 <a href="https://jasonhzy.github.io/2018/05/12/zabbix-redis/">zabbix自动发现规则监控redis（主从哨兵）</a></p>
<p>下载：<a href="/download/zabbix/php/zbx_phpfpm_templates.xml">phpfpm监控模板</a>  </p>
]]></content>
      
        <categories>
            
            <category> zabbix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> php-fpm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zabbix自动发现规则监控redis（主从哨兵）]]></title>
      <url>http://jasonhzy.github.io/2018/05/12/zabbix-redis/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Zabbix是一个企业级的分布式开源监控方案。能够监控各种网络参数以及服务器健康性和完整性。支持灵活的通知机制，提供出色的报告和数据可视化功能</p>
<a id="more"></a>
<h2 id="Zabbix组成"><a href="#Zabbix组成" class="headerlink" title="Zabbix组成"></a>Zabbix组成</h2><ul>
<li>服务端server：核心组件，agent可以向它报告可用性和完整性信息和统计数据。该server所有的配置，数据和业务数据都存在数据库中</li>
<li>数据库存储：配置信息和Zabbix收集到的数据都被存储在数据库中，支持MySQL，PostgreSQL</li>
<li>Web界面：提供了基于Web的访问界面(采用PHP语言编写)</li>
<li>Proxy代理服务器：proxy可以替server收集性能和可用性的数据。proxy是一个可选择部署的部分，但它可以减轻zabbix server的负载压力</li>
<li>客户端agent：zabbix agent被部署在监控的目标上，能够主动监控本地的资源和应用程序，并收集到的数据汇报给zabbix server</li>
</ul>
<h2 id="Zabbix安装"><a href="#Zabbix安装" class="headerlink" title="Zabbix安装"></a>Zabbix安装</h2><p>请参考<a href="https://www.zabbix.com/download" target="_blank" rel="noopener">安装文档</a></p>
<p>环境：centos7系统，MySQL数据库，Zabbix3.4</p>
<p>192.168.1.60 centos7 zabbix-server<br>192.168.1.49 centos7 zabbix-agent</p>
<p>1.添加rpm包：</p>
<pre><code>rpm -i http://repo.zabbix.com/zabbix/3.4/rhel/6/x86_64/zabbix-release-3.4-1.el6.noarch.rpm
</code></pre><p>2.安装Zabbix server, frontend, agent</p>
<pre><code>yum install zabbix-server-mysql zabbix-web-mysql zabbix-agent
</code></pre><p>3.安装数据库Mysql，并导入数据</p>
<p>1）为zabbix server创建授权用户zabbix</p>
<pre><code>grant all privileges on zabbix.* to &apos;zabbix&apos;@&apos;localhost&apos; identified by &apos;password&apos;;     
</code></pre><p>2）导入数据</p>
<pre><code>#zcat 显示压缩包中文件的内容
zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix
</code></pre><p>3）为zabbix server配置数据库连接信息，修改/etc/zabbix/zabbix_server.conf</p>
<pre><code>DBName=zabbix
DBUser=zabbix
DBPassword=zabbix        
</code></pre><p>4.为zabbix agent配置，修改/etc/zabbix/zabbix_agentd.conf</p>
<pre><code>Server=192.168.1.60 #服务端IP
ServerActive=192.168.1.60 #服务端IP
Hostname=192.168.1.49  #被监控agent的IP或主机名
</code></pre><p>5.PHP相关配置</p>
<p>修改/etc/httpd/conf.d/zabbix.conf</p>
<pre><code>php_value max_execution_time 300
php_value memory_limit 128M
php_value post_max_size 16M
php_value upload_max_filesize 2M
php_value max_input_time 300
php_value always_populate_raw_post_data -1
php_value date.timezone Asia/Shanghai
</code></pre><p>或者直接修改php.ini文件</p>
<h2 id="监控redis"><a href="#监控redis" class="headerlink" title="监控redis"></a>监控redis</h2><h3 id="自动发现脚本"><a href="#自动发现脚本" class="headerlink" title="自动发现脚本"></a>自动发现脚本</h3><p>1）添加自动发现脚本/etc/zabbix/script/redis_monitor.py<br>自动发现脚本的内容即：</p>
<pre><code>#!/usr/bin/env python
import os
import json

t=os.popen(&quot;netstat -nltp|awk -F: &apos;/redis-server/&amp;&amp;/LISTEN/{print $2}&apos;|awk &apos;{print $1}&apos;| grep -v grep | grep -v &apos;^$&apos;&quot;)
ports = []
for port in  t.readlines():
        r = os.path.basename(port.strip())
        ports += [{&apos;{#REDISPORT}&apos;:r}]
print json.dumps({&apos;data&apos;:ports}, sort_keys=True, indent=4, separators=(&apos;,&apos;,&apos;:&apos;))
</code></pre><p>2）添加redis监控的配置文件/etc/zabbix/zabbix_agentd.d/userparameter_redis.conf，内容即：</p>
<pre><code>[root@localhost ~]# cat  /etc/zabbix/zabbix_agentd.d/userparameter_redis.conf
UserParameter=redis.discovery[*],/etc/zabbix/scripts/redis_monitor.py discovery $1
UserParameter=redis.ping[*],/etc/zabbix/scripts/redis_monitor.py ping $1
UserParameter=redis.item[*],/etc/zabbix/scripts/redis_monitor.py info $1 $2
UserParameter=sentinel.ping[*], /etc/zabbix/scripts/redis_monitor.py sentinel_ping $1
UserParameter=sentinel.item[*],/etc/zabbix/scripts/redis_monitor.py sentinel_info $1 $2
</code></pre><p>获取redis／sentinel服务端口</p>
<pre><code>/etc/zabbix/scripts/redis_monitor.py discovery redis #获取redis服务端口
/etc/zabbix/scripts/redis_monitor.py discovery sentinel #获取sentinel服务端口
</code></pre><p>执行脚本，例如获取redis端口：</p>
<pre><code>[root@localhost ~]# /etc/zabbix/scripts/redis_monitor.py discovery redis 
{
    &quot;data&quot;:[
        {
            &quot;{#REDISPORT}&quot;:&quot;6379&quot;
        }
    ]
}    
</code></pre><h3 id="Zabbix-web内配置"><a href="#Zabbix-web内配置" class="headerlink" title="Zabbix web内配置"></a>Zabbix web内配置</h3><p>1）添加redis模板<br>在zabbix web页面：配置-&gt;模板<br><img src="/images/redis/zabbix/redis-template.png" alt="zabbix redis temp"></p>
<p>2）添加应用集<br>zabbix web页面：配置-&gt;模板-&gt;redis模板名（点选）-&gt;应用集<br><img src="/images/redis/zabbix/redis-application.png" alt="zabbix redis app"></p>
<p>3）添加自动发现规则<br>监控列表：<br><img src="/images/redis/zabbix/zabbix-rule-list.png" alt="zabbix redis item list"> </p>
<p>zabbix web页面：配置-&gt;模板-&gt;redis模板名（点选）-&gt;自动发现规则-&gt;创建发现规则<br><img src="/images/redis/zabbix/redis-rule.png" alt="zabbix redis rule"></p>
<p>3）添加监控项<br>zabbix web页面：配置-&gt;模板-&gt;redis模板名（点选）-&gt;自动发现规则-&gt;自动发现规则名称（点选）-&gt;监控项原型-&gt;创建监控项<br><img src="/images/redis/zabbix/zabbix-add-item.png" alt="zabbix redis item">  </p>
<p>检测监控项是否成功，在zabbix server端利用zabbix_get测试：</p>
<pre><code>[root@localhost ~]# zabbix_get -s 192.168.1.49 -k &apos;redis.item[maxmemory,6379]&apos;
524288000
</code></pre><p>注意：<br>(1)、默认管理账号：Admin／zabbix<br>(2)、zabbix-get是Zabbix服务端的一个命令，用于检测agent端的配置是否正确，很方便地知道key是否能正常获取到数据<br>如果zabbix-get没有安装，可以进行安装</p>
<pre><code>yum install zabbix_get -y
</code></pre><p>(3)、 创建监控项中的”信息类型（Data Type）”，选择合适的数据类型，注意与获取的数据数据类型保持一致。我们在创建图表时采用的监控项数据类型必须是numeric(unsigned/float)   </p>
<p>4）添加主机<br>在zabbix web页面：配置-&gt;主机<br><img src="/images/redis/zabbix/zabbix-hosts-list.png" alt="zabbix redis hosts list"><br><img src="/images/redis/zabbix/zabbix-hosts.png" alt="zabbix redis add hosts"></p>
<p>5）为主机添加模板<br>在zabbix web页面：配置-&gt;主机-&gt;选择为此添加模板的主机-&gt;模板选项<br><img src="/images/redis/zabbix/zabbix-add-temp.png" alt="zabbix redis add temp"></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1、zabbix server／agent以zabbix或者root用户启动问题</p>
<p>以zabbix用户启动（推荐）</p>
<pre><code>zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf #启动客户端agent
zabbix_server -c /etc/zabbix/zabbix_server.conf #启动服务端
</code></pre><p>以root用户启动</p>
<pre><code>systemctl start zabbix_agentd.service
systemctl start zabbix_server.service
</code></pre><p>当以root用户启动时，需要设置/etc/zabbix/zabbix_agentd.conf内参数：</p>
<pre><code>AllowRoot=1    
</code></pre><p>2、日志文件/var/log/zabbix/zabbix_agentd.log出现如下问题：</p>
<pre><code>no active checks on server [192.168.1.60:10051]: host [xxxxx] not found
</code></pre><p>在zabbix web页面Configuration-&gt;Hosts（配置-&gt;主机）页面更改Host name和zabbix_agentd.conf里面的Hostname一样，查看zabbix_agentd.conf文件中的Hostname    </p>
<pre><code>### Option: Hostname
#       Unique, case sensitive hostname.
#       Required for active checks and must match hostname as configured on the server.
#       Value is acquired from HostnameItem if undefined.
#
# Mandatory: no
# Default:
# Hostname=
</code></pre><p>再次重启zabbix-agent服务即可</p>
<p>4、SELinux配置</p>
<pre><code>#查询SElinux策略内各项规则的布尔值
[root@localhost ~]# getsebool -a
httpd_can_connect_zabbix --&gt; off
zabbix_can_network --&gt; off
httpd_can_network_connect_db --&gt; off 

#修改策略
setsebool -P httpd_can_connect_zabbix on
setsebool -P zabbix_can_network on
setsebool -P httpd_can_network_connect_db on
</code></pre><p>4、zabbix的图表中有些乱码</p>
<p>寻找windows中的字体源， 上传某一个字体到zabbix服务器中的指定目录/usr/share/zabbix/fonts/，比如字体“楷体 常规”<br>修改/usr/share/zabbix/include/defines.inc.php，将关键字“graphfont”改为“simkai”  </p>
<pre><code>define(&apos;ZBX_GRAPH_FONT_NAME&apos;,           &apos;graphfont&apos;); // font file name
define(&apos;ZBX_FONT_NAME&apos;, &apos;graphfont&apos;);

#或命令行替换
sed -i  &apos;s/graphfont/simkai/g&apos;  /usr/share/zabbix/include/defines.inc.php
</code></pre><p>5、日志文件/var/log/zabbix/zabbix_server.log出现如下类似的错误，即是获取的数据数据类型和设置监控项的数据类型不匹配导致的</p>
<pre><code>15714:20180514:075327.276 error reason for &quot;192.168.1.49:redis.item[maxmemory,6379]&quot; changed: Value &quot;/opt/redis/redis-4.0.2/src/redis-cli 
-h localhost -p 6379 -a 123456 info 2&gt;/dev/null | grep -w maxmemory | cut -d: -f2 
524288000&quot; of type &quot;string&quot; is not suitable for value type &quot;Numeric (unsigned)&quot;
</code></pre><p>附录：</p>
<p>1、<a href="/download/zabbix/redis/userparameter_redis.conf">redis监控配置文件</a><br>2、<a href="/download/zabbix/redis/redis_monitor.py">redis监控脚本</a><br>3、<a href="/download/zabbix/redis/zbx_redis_templates.xml">redis监控模板</a>   </p>
]]></content>
      
        <categories>
            
            <category> zabbix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zabbix采用percona监控mysql主从]]></title>
      <url>http://jasonhzy.github.io/2018/05/10/zabbix-percona-mysql/</url>
      <content type="html"><![CDATA[<p>zabbix自带的默认模板template db mysql对mysql的监控相当简单，而percona监控插件对mysql的监控比较全面，但由于是php开发，因此要在agent安装php环境，本文主要介绍使用percona-monitoring-plugins监控mysql。<br><a id="more"></a></p>
<h2 id="安装zabbix-agent"><a href="#安装zabbix-agent" class="headerlink" title="安装zabbix-agent"></a>安装zabbix-agent</h2><pre><code>#centos7 mysql zabbix3.4
rpm -i http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm 
yum install zabbix-agent
</code></pre><p>下载地址：<a href="https://www.zabbix.com/download" target="_blank" rel="noopener">zabbix download</a></p>
<h2 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h2><pre><code>yum install php php-mysql -y
</code></pre><h2 id="安装percona-zabbix-templates"><a href="#安装percona-zabbix-templates" class="headerlink" title="安装percona-zabbix-templates"></a>安装percona-zabbix-templates</h2><pre><code>yum install https://www.percona.com/downloads/percona-monitoring-plugins/percona-monitoring-plugins-1.1.8/binary/redhat/7/x86_64/percona-zabbix-templates-1.1.8-1.noarch.rpm
</code></pre><p>下载地址：<a href="https://www.percona.com/downloads/percona-monitoring-plugins/" target="_blank" rel="noopener">percona-monitoring-plugins</a>   </p>
<p>复制配置文件至zabbix_agent相关目录下</p>
<pre><code>cp /var/lib/zabbix/percona/templates/userparameter_percona_mysql.conf /etc/zabbix/zabbix_agentd.d/
</code></pre><p>重启生效</p>
<pre><code>service zabbix-agent restart
</code></pre><p>数据库添加只读账户</p>
<pre><code>grant process,super,replication client on *.* to &apos;zabbixmoniter&apos;@&apos;%&apos; identified by &apos;zabbix&apos;;
</code></pre><p>由于监控mysql需要使用show processlist 及主从相关命令，因此需要给zabbix权限以process,super,replication client等权限。修改脚本参数:</p>
<pre><code>$ vim  /var/lib/zabbix/percona/scripts/ss_get_mysql_stats.php
&lt;?php
...
$mysql_user = &apos;zabbixmoniter&apos;;
$mysql_pass = &apos;zabbix&apos;;
$mysql_port = 3306;
$mysql_flags = 0;
</code></pre><p>在mysql slave的agent里面测试脚本是否生效（输出1即表示成功）：</p>
<pre><code>sh /var/lib/zabbix/percona/scripts/get_mysql_stats_wrapper.sh running-slave
</code></pre><p>问题：ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: NO)<br>方案1：在my.cnf配置用户名密码、sock路径                                                                                                                                                                                                                        </p>
<pre><code>vim /usr/local/mysql/etc/my.cnf
[mysql]
user=zabbixmoniter
password=zabbix
socket=/var/lib/mysql/mysql.sock
</code></pre><p>方案2：修改/var/lib/zabbix/percona/scripts/get_mysql_stats_wrapper.sh文件</p>
<pre><code>RES=`HOME=~zabbix mysql -e &apos;SHOW SLAVE STATUS\G&apos; | egrep &apos;(Slave_IO_Running|Slave_SQL_Running):&apos; | awk -F: &apos;{print $2}&apos; | tr &apos;\n&apos; &apos;,&apos;`
改为
RES=`HOME=~zabbix mysql -uzabbixmoniter -pzabbix  -e &apos;SHOW SLAVE STATUS\G&apos; | egrep &apos;(Slave_IO_Running|Slave_SQL_Running):&apos; | awk -F: &apos;{print $2}&apos; | tr &apos;\n&apos; &apos;,&apos;`
</code></pre><p>在zabbix server上测试</p>
<pre><code>zabbix_get -s 192.168.1.49 -p 10050 -k MySQL.Threads-connected
zabbix_get -s 192.168.1.49 -p 10050 -k MySQL.running-slave
</code></pre><p>问题1：rm: cannot remove ‘/tmp/localhost-mysql_cacti_stats.txt’: Operation not permitted<br>修改日志权限：</p>
<pre><code>chown zabbix.zabbix /tmp/localhost-mysql_cacti_stats.txt 
</code></pre><p>问题2：zabbix_get: command not found<br>安装zabbix-get：</p>
<pre><code>yum install zabbix-get
</code></pre>]]></content>
      
        <categories>
            
            <category> zabbix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[持续集成Jenkins]]></title>
      <url>http://jasonhzy.github.io/2018/05/03/jenkins/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Jenkins前身是Hudson(Sun开发)，2010年从Hudson分支出来。由于Sun被Oracle收购，并拥有Hudson的商标所有权。2011年1月11日，“Hudson”改名为“Jenkins”，分支出来的Jenkins免费且开源，而Hudson用于商业用途，二者都在继续开发中。<br>Jenkins是一款流行的开源持续集成(Continuous Integration)工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。无需人工干预，减少重复过程以节省时间、费用和工作量。具有易安装、易配置、跨平台、支持安装多种第三方插件等特点。</p>
<a id="more"></a>
<h2 id="持续集成-Continuous-Integration"><a href="#持续集成-Continuous-Integration" class="headerlink" title="持续集成(Continuous Integration)"></a>持续集成(Continuous Integration)</h2><p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，团队每个成员每天集成一次或多次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。保证产品快速迭代，同时还能保持高质量<br>优点：</p>
<ul>
<li>快速发现问题，并作出响应； </li>
<li>最大限度地减少风险，降低修复错误代码的成本； </li>
<li>将重复性的手工流程自动化，让工程师更加专注于代码； </li>
<li>保持频繁部署，快速生成可部署的软件； </li>
<li>提高项目的能见度，方便团队成员了解项目的进度和成熟度； </li>
<li>增强开发人员对软件产品的信心，帮助建立更好的工程师文化</li>
</ul>
<h2 id="持续交付-Continuous-Delivery"><a href="#持续交付-Continuous-Delivery" class="headerlink" title="持续交付 (Continuous Delivery)"></a>持续交付 (Continuous Delivery)</h2><p>持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。持续交付优先于整个产品生命周期的软件部署，建立在高水平自动化持续集成之上。<br>优点：</p>
<ul>
<li>快速发布。能够应对业务需求，并更快地实现软件价值。</li>
<li>编码-&gt;测试-&gt;上线-&gt;交付的频繁迭代周期缩短，同时获得迅速反馈；</li>
<li>高质量的软件发布标准。整个交付过程标准化、可重复、可靠，</li>
<li>整个交付过程进度可视化，方便团队人员了解项目成熟度；</li>
<li>更先进的团队协作方式。从需求分析、产品的用户体验到交互 设计、开发、测试、运维等角色密切协作，相比于传统的瀑布式软件团队，更少浪费。</li>
</ul>
<h2 id="持续集成-Continuous-Integration-1"><a href="#持续集成-Continuous-Integration-1" class="headerlink" title="持续集成(Continuous Integration)"></a>持续集成(Continuous Integration)</h2><p>持续部署是指当交付的代码通过评审之后，自动部署到生产环境中。持续部署是持续交付的最高阶段。这意味着，所有通过了一系列的自动化测试的改动都将自动部署到生产环境。它也可以被称为“Continuous Release”<br>实际上，产品在从需求到部署的过程中，会经历若干种不同的环境，例如QA环境、各种自动化测试运行环境、生产环境等。这些环境的搭建、配置、管理，产品在不同环境中的具体部署，状况是比较非常复杂的，从头到尾地全自动持续部署的确困难。那么，如果能做到持续交付，保证代码在模拟环境没问题，也就基本成功完成了</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Red Hat/Fedora/CentOS:</p>
<pre><code>wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo 
rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
yum install jenkins -y
</code></pre><p>Ubuntu/Debian:</p>
<pre><code>wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
deb https://pkg.jenkins.io/debian-stable binary/
apt-get update 
apt-get install jenkins -y
</code></pre><p>下载jenkins.war包: </p>
<pre><code>Jenkins下载地址：https://jenkins.io/download/
运行：java –jar jenkins.war --httpPort=8080 (默认端口)
</code></pre><p>Docker Jenkins: </p>
<pre><code>docker run --name jenkins --restart=always \
    -p 8080:8080 \
    -v /var/www/myjenkins:/var/jenkins_home \
    -d jenkinsci/blueocean
</code></pre><p>针对采用jenkins镜像安装遇到的问题：</p>
<pre><code>[root@localhost ~]# docker logs myjenkins
#错误日志如下
Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?
touch: cannot touch &apos;/var/jenkins_home/copy_reference_file.log&apos;: Permission denied
</code></pre><p>检查”/var/jenkins_home”目录权限，当前用户是”jenkins”而且”/var/jenkins_home”目录是属于jenkins用户拥有的</p>
<pre><code>[root@localhost ~]# docker run -ti --rm --entrypoint=&quot;/bin/bash&quot; docker.io/jenkinsci/blueocean  -c &quot;whoami &amp;&amp; id&quot;
jenkins
uid=1000(jenkins) gid=1000(jenkins) groups=1000(jenkins)
</code></pre><p>而宿主机本地数据卷/var/www/jenkins目录的拥有者是root用户，解决方案：<br>1.把当前目录的拥有者赋值给uid 1000，再启动jenkins容器(或者修改宿主机本地数据卷目录权限777)</p>
<pre><code>chown -R 1000 /var/www/myjenkins
</code></pre><p>2.让容器中以root用户启动</p>
<pre><code>docker run --name jenkins --restart=always -u 0 \
        -p 8080:8080 \
        -v /var/www/myjenkins:/var/jenkins_home \
        -d jenkinsci/blueocean
</code></pre><p>3.注意开启SELinux情况<br>1）关闭宿主机的selinux<br>2）在宿主机上添加 selinux 规则</p>
<pre><code>chcon -Rt svirt_sandbox_file_t /path/to/volume #man docker-run 查看
</code></pre>]]></content>
      
        <categories>
            
            <category> Jenkins </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ifconfig]]></title>
      <url>http://jasonhzy.github.io/2018/04/12/ifconfig/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ifconfig， 全称是network interfaces configuring。是linux中用于显示或配置网络设备（网络接口卡）的命令</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>有些最小化安装CentOS等Linux发行版的时候会默认不安装ifconfig等命令。此时终端运行ifconfig命令就会出错，ifconfig这个命令来源于net-tools，则安装即可：</p>
<pre><code>yum install net-tools 
</code></pre><p>查看当前网络接口的情况</p>
<pre><code>[root@localhost ~]# ifconfig
enp0s3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.1.46  netmask 255.255.255.0  broadcast 192.168.1.255
        inet6 fe80::a00:27ff:fe7a:9880  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 08:00:27:7a:98:80  txqueuelen 1000  (Ethernet)
        RX packets 2792  bytes 437764 (427.5 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 711  bytes 161168 (157.3 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        loop  txqueuelen 0  (Local Loopback)
        RX packets 12  bytes 1020 (1020.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 12  bytes 1020 (1020.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
</code></pre><h2 id="执行ifconfig无输出"><a href="#执行ifconfig无输出" class="headerlink" title="执行ifconfig无输出"></a>执行ifconfig无输出</h2><p>检查 /sbin/ifconfig            </p>
<p>通常情况下，ifconfig如果有显示，但没有某一项的信息（比如识别不到网卡）时，可以先检查/etc/sysconfig/network-scripts/下的配置文件是否正确<br>ifconfig及/sbin/ifconfig没有任何的输出，因此先检查了下/sbin/ifconfig文件。发现有以下错误：</p>
<pre><code>[root@localhost ~]# ls -al /sbin/ifconfig
-rwxr-xr-x. 1 root root 0 May 11 15:53 /sbin/ifconfig
[root@localhost ~]# file /sbin/ifconfig
/sbin/ifconfig: empty
</code></pre><p>简单的解决方案就是从其它服务器内复制一份到当前服务器，再次执行即可</p>
<h2 id="在CentOS最小化服务器版本中如何查找网卡IP和其它详细信息"><a href="#在CentOS最小化服务器版本中如何查找网卡IP和其它详细信息" class="headerlink" title="在CentOS最小化服务器版本中如何查找网卡IP和其它详细信息"></a>在CentOS最小化服务器版本中如何查找网卡IP和其它详细信息</h2><p>CentOS7最小化系统中，由于没有ifconfig，可以使用”ip addr”和”ip link”命令来查找网卡详情，统计数据可以使用”ip -s link”</p>
<p>例如要查看网卡信息：</p>
<pre><code>[root@localhost ~]# ip addr
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 08:00:27:7a:98:80 brd ff:ff:ff:ff:ff:ff
    inet 192.168.1.46/24 brd 192.168.1.255 scope global dynamic enp0s3
       valid_lft 84522sec preferred_lft 84522sec
    inet6 fe80::a00:27ff:fe7a:9880/64 scope link 
       valid_lft forever preferred_lft forever
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ifconfig </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu恢复模式]]></title>
      <url>http://jasonhzy.github.io/2018/04/11/ubuntu-recovery/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>忘记root的密码或Ubuntu无法正常启动情况，这时候需修改某些文件让系统正常启动，我们可以进入recovery的单用户模式，获得修改文件的权限。</p>
<a id="more"></a>
<h2 id="重启系统，进入以下菜单，选中Advanced-options"><a href="#重启系统，进入以下菜单，选中Advanced-options" class="headerlink" title="重启系统，进入以下菜单，选中Advanced options"></a>重启系统，进入以下菜单，选中Advanced options</h2><p><img src="/images/ubuntu/recovery/ubuntu-gnu.png" alt="ubuntu gnu"></p>
<h2 id="上述选中后按下回车键，出现如下图所示，选中以recovery-mode结尾的Ubuntu-with-Linux-4-4-0-42-generic-recovery-mode"><a href="#上述选中后按下回车键，出现如下图所示，选中以recovery-mode结尾的Ubuntu-with-Linux-4-4-0-42-generic-recovery-mode" class="headerlink" title="上述选中后按下回车键，出现如下图所示，选中以recovery mode结尾的Ubuntu, with Linux 4.4.0-42-generic (recovery mode)"></a>上述选中后按下回车键，出现如下图所示，选中以recovery mode结尾的Ubuntu, with Linux 4.4.0-42-generic (recovery mode)</h2><p><img src="/images/ubuntu/recovery/ubuntu-recovery.png" alt="ubuntu recovery"></p>
<h2 id="上述选中后按下回车键开始启动系统，进入Recovery-Mode，一段时间后出现如下图所示界面"><a href="#上述选中后按下回车键开始启动系统，进入Recovery-Mode，一段时间后出现如下图所示界面" class="headerlink" title="上述选中后按下回车键开始启动系统，进入Recovery Mode，一段时间后出现如下图所示界面"></a>上述选中后按下回车键开始启动系统，进入Recovery Mode，一段时间后出现如下图所示界面</h2><p><img src="/images/ubuntu/recovery/ubuntu-root.png" alt="ubuntu recovery"></p>
<p>选中”Drop to root shell prompt”并回车即可进入系统，输入root用户密码。此时的系统根分区是只读挂载的。为了变成可读/可写的，你还需要输入如下命令：</p>
<pre><code>mount -o remount,rw /
</code></pre><p>若/home, /boot, /tmp或者其他挂载点是挂载在另外一些分区上，可以通过下面命令挂载进行挂载：</p>
<pre><code>mount --all
</code></pre><p>获得修改文件的权限之后，即可进行相关操作    </p>
<p>参考资料：</p>
<ul>
<li><a href="https://wiki.ubuntu.com/RecoveryMode" target="_blank" rel="noopener">ubuntu RecoveryMode</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7单用户模式(紧急修复)]]></title>
      <url>http://jasonhzy.github.io/2018/04/10/centos7-recovery/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>忘记root的密码或CentOS7无法正常启动情况，这时候需修改某些文件让系统正常启动，我们可以进入recovery的单用户模式，获得修改文件的权限。</p>
<a id="more"></a>
<h2 id="重启系统，进入以下菜单，并按e键进行修改"><a href="#重启系统，进入以下菜单，并按e键进行修改" class="headerlink" title="重启系统，进入以下菜单，并按e键进行修改"></a>重启系统，进入以下菜单，并按e键进行修改</h2><p><img src="/images/centos/recovery/centos7-edit.png" alt="centos e"></p>
<h2 id="定位到ro（ro-readonly-只读）"><a href="#定位到ro（ro-readonly-只读）" class="headerlink" title="定位到ro（ro=readonly 只读）"></a>定位到ro（ro=readonly 只读）</h2><p><img src="/images/centos/recovery/centos7-ro.png" alt="centos ro"></p>
<h2 id="ro改成”rw-init-sysroot-bin-sh”，-完成之后按ctrl-x"><a href="#ro改成”rw-init-sysroot-bin-sh”，-完成之后按ctrl-x" class="headerlink" title="ro改成”rw init=/sysroot/bin/sh”， 完成之后按ctrl+x"></a>ro改成”rw init=/sysroot/bin/sh”， 完成之后按ctrl+x</h2><p><img src="/images/centos/recovery/centos7-rw.png" alt="centos rw"></p>
<p>进入单用户模式后，并不是真正的咱们正常使用的linux系统，需要切换到正常系统中去，即：</p>
<pre><code>chroot /sysroot/
</code></pre><p>执行操作后，即可进行文件修改等操作，例如更改用户密码：</p>
<pre><code>passwd root
touch /.autorelabel （为了使selinux生效）
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker搭建LNMP环境]]></title>
      <url>http://jasonhzy.github.io/2018/03/27/docker-lnmp/</url>
      <content type="html"><![CDATA[<p>为了学习docker多容器的使用，以搭建Linux+Nginx+Mysql+PHP为例，讲述docker的详细搭建过程。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>下载需要的nginx(v1.12.2)，mysql(latest)，php(5.6.34-fpm)镜像</p>
<a id="more"></a>
<pre><code>docker pull nginx:1.12.2
docker pull php:5.6.34-fpm
docker pull mysql
</code></pre><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p>创建mysql容器</p>
<pre><code>docker run --name mysql
    -p 3306:3306
    -v /Users/jason/Desktop/mysql:/var/lib/mysql  #数据库数据挂载
    -e MYSQL_ROOT_PASSWORD=123456 #初始化mysql的root密码
    -d mysql  
</code></pre><p>创建php的fpm容器</p>
<pre><code>docker run --name fpm 
    -p 9000:9000
    --link mysql:mysql
    -v /Users/jason/Sites:/Users/jason/Sites  #运行项目代码目录挂载
    -d php:5.6.34-fpm
</code></pre><p>创建nginx容器</p>
<pre><code>docker run --name nginx
    -p 80:80
    -p 443:443
    -v /Users/jason/Source/conf.d:/etc/nginx/conf.d
    --link fpm:fpm
    --volumes-from fpm
    -d nginx:1.12.2
</code></pre><p>查看创建的各容器：<br><img src="/images/docker/case-lnmp/containers-list.png" alt="containers ps"></p>
<h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><pre><code>server {
        listen       80 default_server;
        server_name  localhost;

        charset utf-8;
        error_log /var/log/nginx/error_log;
        #access_log  /var/log/nginx/access_log  main;

        root   /var/www/web;
        index  index.php index.html index.htm;

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        location ~ \.php$ {
            include        fastcgi.conf;
            fastcgi_pass   fpm:9000;  #fpm创建的容器名称／docker-compose服务名称
            fastcgi_index  index.php;
        }
}
</code></pre><h2 id="php连接Mysql"><a href="#php连接Mysql" class="headerlink" title="php连接Mysql"></a>php连接Mysql</h2><pre><code>&lt;?php
    $conf = array(
        &apos;host&apos;  =&gt; &apos;mysql&apos;, //容器名称／docker-compose服务名称
        &apos;db&apos;    =&gt; &apos;beecloud&apos;,
        &apos;user&apos;  =&gt; &apos;root&apos;,
        &apos;pwd&apos;   =&gt; &apos;123456&apos;,
        &apos;port&apos;  =&gt; 3306
    );

    try{
        $conn = new mysqli( $conf[&apos;host&apos;], $conf[&apos;user&apos;], $conf[&apos;pwd&apos;], $conf[&apos;db&apos;], $conf[&apos;port&apos;]);
        if(mysqli_connect_errno()){
            exit(mysqli_connect_error());
        }

        mysqli_query($conn,&quot;set names utf8&quot;);
        $sql = &quot;SELECT * FROM bank&quot;;
        $rs = $conn-&gt;query($sql);

        $data = array();
        while ($row = $rs-&gt;fetch_assoc()){
            $data[] = $row;
        }
        echo &apos;&lt;pre&gt;&apos;;
        print_r($data);die;
    }catch(Exception $e){
        echo $e-&gt;getMessage();
    }
</code></pre><p>在使用进行数据库连接时，提示缺少mysqli模块，即：</p>
<pre><code>Fatal error: Class &apos;mysqli&apos; not found in /var/www/web/mysql.php on line 12
</code></pre><p>进入容器php -m查看确实没有。PHP官方镜像提供了几个工具命令来帮助安装扩展，只是安装扩展前需要手动安装相应的依赖。<br>用docker-php-ext-install 安装PHP内核提供的扩展，安装可用php扩展名的选项:</p>
<p><img src="/images/docker/case-lnmp/docker-php-ext.png" alt="docker php ext"></p>
<p>如：安装扩展mysql</p>
<pre><code>docker-php-ext-install mysql
</code></pre><p><img src="/images/docker/case-lnmp/docker-install-mysql.png" alt="docker php ext-mysql"></p>
<p>用docker-php-ext-configure 自定义配置安装扩展时的配置参数，如：</p>
<pre><code>docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
</code></pre><p>用docker-php-ext-enable 可以将 extension=xxxxx.so加入php配置文件中如：<br>安装redis，但是发现docker-php-ext-install不包含redis，先使用pecl install redis 下载编译并安装</p>
<p><img src="/images/docker/case-lnmp/pecl-redis.png" alt="docker pecl redis"><br>(省略中间过程。。。)<br><img src="/images/docker/case-lnmp/enable-redis.png" alt="docker enbale redis"></p>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker私有仓库]]></title>
      <url>http://jasonhzy.github.io/2018/03/20/docker-registry/</url>
      <content type="html"><![CDATA[<p>官方的Docker Hub是一个用于管理公共镜像的，我们可以找到想要的镜像，也可以把我们自己的镜像推送上去。但有时候，我们的使用场景需要拥有一个私有的镜像仓库来管理我们自己的镜像。这个可以通过开源软件Registry搭建私有仓库。<br>搭建私有仓库的优点：<br>1、部署快捷，镜像不必从Docker Hub下载，只需从私有仓库下载即可<br>2、私有镜像，包含敏感信息，不方便公开对外，可在公司内部使用</p>
<a id="more"></a>
<h2 id="搭建私有仓库"><a href="#搭建私有仓库" class="headerlink" title="搭建私有仓库"></a>搭建私有仓库</h2><p>下载镜像registry</p>
<pre><code>docker pull registry
</code></pre><p>创建用户密码文件，用于docker的登陆</p>
<pre><code>docker run --entrypoint htpasswd registry -Bbn testuser testpassword &gt; /etc/ssl/docker/registry.htpasswd
</code></pre><p>启动容器</p>
<pre><code>docker run -p 127.0.0.1:5000:5000 --restart=always --name=registry #--restart：docker服务重启后重启此容器
    -v /etc/ssl/docker:/etc/ssl/docker
    -e &quot;REGISTRY_AUTH=htpasswd&quot;
    -e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Docker Registry&quot;
    -e &quot;REGISTRY_AUTH_HTPASSWD_PATH=/etc/ssl/docker/registry.htpasswd&quot;
    -e &quot;REGISTRY_STORAGE_DELETE_ENABLED=true&quot; #上传的镜像是否允许删除
    -v /var/docker/registry:/var/lib/registry
    -d registry

-d：后台运行
-p：将容器的5000端口映射到宿主机的5000端口
--restart：docker服务重启后重启此容器
--name：容器名称
-e: 设置环境变量
-v：将容器内的/var/docker/registry映射到宿主机的/var/lib/registry目录
</code></pre><h2 id="上传镜像到私有仓库"><a href="#上传镜像到私有仓库" class="headerlink" title="上传镜像到私有仓库"></a>上传镜像到私有仓库</h2><p>登陆私有仓库</p>
<pre><code>docker login www.example.com
</code></pre><p>例如将本地的registry上传到仓库</p>
<pre><code>REPOSITORY           TAG      IMAGE ID       CREATED             SIZE
docker.io/registry   latest   d1fd7d86a825   2 months ago        33.3 MB 
</code></pre><p>修改镜像tag    </p>
<pre><code>docker tag docker.io/registry www.example.com/registry
</code></pre><p>查看</p>
<pre><code>$ docker ps -a    
REPOSITORY                  TAG      IMAGE ID       CREATED             SIZE
docker.io/registry          latest   d1fd7d86a825   2 months ago        33.3 MB 
www.example.com/registry    latest   d1fd7d86a825   2 months ago        33.3 MB
</code></pre><p>上传镜像</p>
<pre><code>docker push  www.example.com/registry
</code></pre><h2 id="获取私有仓库镜像"><a href="#获取私有仓库镜像" class="headerlink" title="获取私有仓库镜像"></a>获取私有仓库镜像</h2><pre><code>docker pull  www.example.com/registry
</code></pre><p>如果出现</p>
<pre><code>docker pull www.example.com/registry
Trying to pull repository www.example.com/registry ... 
Pulling repository d www.example.com/registry
Error: image registry not found    
</code></pre><p>则需要先登陆到私有仓库，即： docker login <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a>   </p>
<h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><p>获取上传镜像的digest</p>
<pre><code>$ curl -H &quot;Accept: application/vnd.docker.distribution.manifest.v2+json&quot; -I -X HEAD -u&lt;user:password&gt; https://www.example.com/v2/&lt;image name&gt;/manifests/&lt;image tag&gt;        
HTTP/1.1 200 OK
Server: nginx/1.13.10
Date: Thu, 22 Mar 2018 06:33:38 GMT
Content-Type: application/vnd.docker.distribution.manifest.v2+json
Content-Length: 948
Connection: keep-alive
Docker-Content-Digest: sha256:28507809a90c80fa49c05ef87227835d569a0f84dd76f4be655394c8d1ca230e  #即为当前镜像的digest
Docker-Distribution-Api-Version: registry/2.0
Etag: &quot;sha256:28507809a90c80fa49c05ef87227835d569a0f84dd76f4be655394c8d1ca230e&quot;
X-Content-Type-Options: nosniff
Docker-Distribution-Api-Version: registry/2.0
</code></pre><p>获取镜像tag    </p>
<pre><code>$ curl -u&lt;user:password&gt;  https://www.example.com/v2/&lt;image name&gt;/tags/list
</code></pre><p>获取镜像列表 </p>
<pre><code>$ curl -u&lt;user:password&gt;  https://www.example.com/v2/_catalog 
</code></pre><p>删除镜像</p>
<pre><code>curl -X DELETE -u&lt;user:password&gt; https://www.example.com/v2/&lt;image name&gt;/manifests/&lt;digest&gt;    
</code></pre><p>执行grabage-collect并且重启(垃圾回收, 释放本地空间)</p>
<pre><code>docker exec registry /bin/registry garbage-collect /etc/docker/registry/config.yml #registry即容器名，也可以是容器ID
docker restart registry
</code></pre><p>垃圾回收之后, /v2/_catalog查看仍然存在，直接删除/var/docker/registry/docker/registry/v2/repositories/registry即可    </p>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[k8s集群环境部署]]></title>
      <url>http://jasonhzy.github.io/2018/03/15/k8s/</url>
      <content type="html"><![CDATA[<h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><style>
    table th:first-of-type {
        width: 20%;
    }
</style>

<p>三台虚拟机，系统环境均为Centos7，对应节点名称及IP地址如下</p>
<table>
<thead>
<tr>
<th>主机名</th>
<th>IP</th>
<th>组件</th>
</tr>
</thead>
<tbody>
<tr>
<td>k8s-master</td>
<td>192.168.1.34</td>
<td>etcd <br> kube-apiserver <br> kube-controller-manager <br> kube-scheduler</td>
</tr>
<tr>
<td>k8s-node1</td>
<td>192.168.1.33</td>
<td>kubelet <br> kube-proxy <br> docker</td>
</tr>
<tr>
<td>k8s-node2</td>
<td>192.168.1.32</td>
<td>kubelet <br> kube-proxy <br> docker</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="master节点"><a href="#master节点" class="headerlink" title="master节点"></a>master节点</h3><p>安装etcd：<br>etcd作为一个持久化的配置中心和存储服务中心，k8s运行依赖etcd，需要先部署etcd<br>修改/etc/etcd/etcd.conf文件：</p>
<pre><code>#[Member]
#ETCD_CORS=&quot;&quot;
#数据存放位置
ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;
#ETCD_WAL_DIR=&quot;&quot;
#ETCD_LISTEN_PEER_URLS=&quot;http://localhost:2380&quot;
#监听客户端地址
ETCD_LISTEN_CLIENT_URLS=&quot;http://0.0.0.0:2379&quot;
#ETCD_MAX_SNAPSHOTS=&quot;5&quot;
#ETCD_MAX_WALS=&quot;5&quot;
#节点名称
ETCD_NAME=&quot;master&quot;
#ETCD_SNAPSHOT_COUNT=&quot;100000&quot;
#ETCD_HEARTBEAT_INTERVAL=&quot;100&quot;
#ETCD_ELECTION_TIMEOUT=&quot;1000&quot;
#ETCD_QUOTA_BACKEND_BYTES=&quot;0&quot;
#ETCD_MAX_REQUEST_BYTES=&quot;1572864&quot;
#ETCD_GRPC_KEEPALIVE_MIN_TIME=&quot;5s&quot;
#ETCD_GRPC_KEEPALIVE_INTERVAL=&quot;2h0m0s&quot;
#ETCD_GRPC_KEEPALIVE_TIMEOUT=&quot;20s&quot;
#
#[Clustering]
#ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;http://localhost:2380&quot;
#通知客户端地址
ETCD_ADVERTISE_CLIENT_URLS=&quot;http://etcd:2379&quot;
</code></pre><p>配置kubernetes:<br>在/etc/kubernetes 目录中有以下几个文件:</p>
<pre><code>apiserver: api配置文件,提供和外部交互的接口
config: 主配置文件
controller-manager: 集群管理配置文件, 承担了master的主要功能，如管理node，pod，replication，service，namespace等
scheduler: scheduler配置文件,调度器，监听etcd中的pod目录变更，然后通过调度算法分配node
</code></pre><p>apiserver配置:</p>
<pre><code># The address on the local server to listen to.
KUBE_API_ADDRESS=&quot;--insecure-bind-address=0.0.0.0&quot; # kube启动时绑定的地址

# The port on the local server to listen on.
KUBE_API_PORT=&quot;--port=8080&quot;

# Port minions listen on
#KUBELET_PORT=&quot;--kubelet-port=10250&quot;

# Comma separated list of nodes in the etcd cluster
KUBE_ETCD_SERVERS=&quot;--etcd-servers=http://192.168.1.34:2379&quot; # kube调用etcd的url

# Address range to use for services
KUBE_SERVICE_ADDRESSES=&quot;--service-cluster-ip-range=172.17.0.0/16&quot; # 此地址是docker容器的地址段

# default admission control policies
#KUBE_ADMISSION_CONTROL=&quot;--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota&quot;
KUBE_ADMISSION_CONTROL=&quot;--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ResourceQuota&quot;

# Add your own!
KUBE_API_ARGS=&quot;&quot;
</code></pre><p>config配置：</p>
<pre><code># logging to stderr means we get it in the systemd journal
KUBE_LOGTOSTDERR=&quot;--logtostderr=true&quot;

# journal message level, 0 is debug
KUBE_LOG_LEVEL=&quot;--v=0&quot;

# Should this cluster be allowed to run privileged docker containers
KUBE_ALLOW_PRIV=&quot;--allow-privileged=false&quot;

# How the controller-manager, scheduler, and proxy find the apiserver
KUBE_MASTER=&quot;--master=http://192.168.1.34:8080&quot;    
</code></pre><p>controller-manager scheduler 两个文件采用默认配置即可.</p>
<p>启动：</p>
<pre><code>[root@k8s-master ~]# systemctl start flanneld.service
[root@k8s-master ~]# systemctl start kube-apiserver.service
[root@k8s-master ~]# systemctl start kube-controller-manager.service
[root@k8s-master ~]# systemctl start kube-scheduler.service
</code></pre><h3 id="node节点"><a href="#node节点" class="headerlink" title="node节点"></a>node节点</h3><p>配置kubernetes node:</p>
<p>在/etc/kubernetes目录下出现以下文件:</p>
<pre><code>config: kubernetes 主配置文件
kubelet: kubelet node配置文件
proxy: kubernetes proxy 配置文件
</code></pre><p>kubelet配置：   </p>
<pre><code># The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)
KUBELET_ADDRESS=&quot;--address=0.0.0.0&quot;

# The port for the info server to serve on
# KUBELET_PORT=&quot;--port=10250&quot;

# You may leave this blank to use the actual hostname
KUBELET_HOSTNAME=&quot;--hostname-override=192.168.1.33&quot; #特别注意这个，在另一个node2节点上，要改为192.168.1.32

# location of the api-server
KUBELET_API_SERVER=&quot;--api-servers=http://192.168.1.34:8080&quot;

# pod infrastructure container
KUBELET_POD_INFRA_CONTAINER=&quot;--pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest&quot;

# Add your own!
KUBELET_ARGS=&quot;&quot;
</code></pre><p>config配置：</p>
<pre><code># logging to stderr means we get it in the systemd journal
KUBE_LOGTOSTDERR=&quot;--logtostderr=true&quot;

# journal message level, 0 is debug
KUBE_LOG_LEVEL=&quot;--v=0&quot;

# Should this cluster be allowed to run privileged docker containers
KUBE_ALLOW_PRIV=&quot;--allow-privileged=false&quot;

# How the controller-manager, scheduler, and proxy find the apiserver
KUBE_MASTER=&quot;--master=http://192.168.1.34:8080&quot;
</code></pre><p>proxy 配置默认即可</p>
<p>启动：</p>
<pre><code>[root@k8s-node-1 ~]# systemctl start flanneld.service
[root@k8s-node-1 ~]# systemctl start kubelet.service
[root@k8s-node-1 ~]# systemctl start kube-proxy.service
</code></pre><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>master和node均安装flannel</p>
<p>配置Flannel（在master、node上均编辑/etc/sysconfig/flanneld）</p>
<pre><code># etcd url location.  Point this to the server where etcd runs
FLANNEL_ETCD_ENDPOINTS=&quot;http://192.168.1.34:2379&quot;

# etcd config key.  This is the configuration key that flannel queries
# For address range assignment
FLANNEL_ETCD_PREFIX=&quot;/flannel/network&quot;

# Any additional options that you want to pass
#FLANNEL_OPTIONS=&quot;&quot;
</code></pre><p>配置etcd中关于flannel的key（仅在master上操作）    </p>
<p>Flannel使用Etcd进行配置，来保证多个Flannel实例之间的配置一致性，所以需要在etcd上进行如下配置：</p>
<pre><code>[root@k8s-master ~]# etcdctl mk /flannel/network/config &apos;{ &quot;Network&quot;: &quot;172.17.0.0/16&quot; }&apos;
{ &quot;Network&quot;: &quot;172.17.0.0/16&quot; }
</code></pre><p>备注：</p>
<ol>
<li>注意防火墙iptables，INPUT／OUPUT／FORWARD是否为ACCEPT     </li>
</ol>
]]></content>
      
        <categories>
            
            <category> Kubernetes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker常用命令]]></title>
      <url>http://jasonhzy.github.io/2018/03/06/docker-command/</url>
      <content type="html"><![CDATA[<h2 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h2><p>Docker是由PaaS提供商dotCloud在2013年创建的一款开源应用引擎，Docker可以自动将任何应用打包成轻量、可移植、自包涵的容器引擎。开发者构建的应用可以一次构建全平台运行，包括本地开发机器、生产环境、虚拟机和云等。<br>Docker一个基于LinuX Container（LXC）技术之上构建的Container容器引擎，源代码托管在GitHub上，基于Go语言并遵从Apache2.0协议开源。它提供了一种在安全、可重复的环境中自动部署软件的方式。<br>Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p>
<a id="more"></a>
<h2 id="docker优势"><a href="#docker优势" class="headerlink" title="docker优势"></a>docker优势</h2><p>对比传统虚拟机总结</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>容器</th>
<th>虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td>启动</td>
<td>秒级</td>
<td>分钟级</td>
</tr>
<tr>
<td>硬盘使用    一般为</td>
<td>MB</td>
<td>一般为 GB</td>
</tr>
<tr>
<td>性能</td>
<td>接近原生</td>
<td>弱于</td>
</tr>
<tr>
<td>系统支持量</td>
<td>单机支持上千个容器</td>
<td>一般几十个</td>
</tr>
</tbody>
</table>
<p><img src="/images/docker/docker-virtual.png" alt="docker virtual"></p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>三个基本组件：镜像、容器、仓库</p>
<p>1.镜像<br>Docker镜像（Image）就是一个只读的模版。镜像可以用来创建Docker容器</p>
<p>2.容器<br>Docker利用容器（Container）来运行应用<br>容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台<br>可以把容器看做是一个简易版的Linux环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p>
<p>3.仓库<br>仓库（Repository）是集中存放镜像文件的场所。有时候会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分。<br>    实际上，仓库注册服务器上往往存放着多个仓库，每个仓库又包含了多个镜像，每个镜像有不同的标签（tag）<br>仓库分为公有（Public）/私有仓库（Private）两种形式</p>
<h2 id="搭建docker"><a href="#搭建docker" class="headerlink" title="搭建docker"></a>搭建docker</h2><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>ubuntu安装docker</p>
<pre><code>wget -qO- https://get.docker.com/ | sh 或者 curl -sSL https://get.docker.com/ | sh
</code></pre><p>centos安装docker    </p>
<pre><code>yum install docker -y
</code></pre><p>mac下安装docker: 可以下载安装包安装</p>
<h3 id="启用／停止／重启docker"><a href="#启用／停止／重启docker" class="headerlink" title="启用／停止／重启docker"></a>启用／停止／重启docker</h3><pre><code>service docker start/stop/reload
或者
systemctl start/stop/reload  docker.service 
</code></pre><!-- more -->    
<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><pre><code>docker search [IMAGE NAME]
</code></pre><h3 id="查询镜像"><a href="#查询镜像" class="headerlink" title="查询镜像"></a>查询镜像</h3><h3 id="下载镜像-以安装centos7为例"><a href="#下载镜像-以安装centos7为例" class="headerlink" title="下载镜像(以安装centos7为例)"></a>下载镜像(以安装centos7为例)</h3><pre><code>docker pull centos:latest
</code></pre><p>下载完毕，利用docker images查看:</p>
<pre><code>REPOSITORY          TAG     IMAGE ID      CREATED      SIZE
docker.io/centos    latest  2d194b392dd1  2 hours ago  195.4 MB
</code></pre><p>备注：镜像版本<strong><a href="https://hub.docker.com/" target="_blank" rel="noopener">下载来源</a></strong>, 可以查看支持的镜像，例如：</p>
<p><img src="/images/docker/docker-iso.png" alt="docker-iso"></p>
<h3 id="修改镜像REPOSITORY／TAG"><a href="#修改镜像REPOSITORY／TAG" class="headerlink" title="修改镜像REPOSITORY／TAG"></a>修改镜像REPOSITORY／TAG</h3><pre><code>docker tag 原REPOSITORY:TAG 自义定名:自定义TAG名  #实际上是新建了镜像
docker tag IMAGE ID(镜像id) REPOSITORY:TAG  #实际上是新建了镜像
</code></pre><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><pre><code>docker rmi REPOSITORY #删除的即：REPOSITORY名称:latest（lastest是默认TAG）
docker rmi REPOSITORY:TAG
docker rmi [IMAGE ID]

#清理所有悬挂（&lt;none&gt;）镜像：
docker image prune  #docker image prune -a 清理所有无用镜（慎用)
docker rmi $(docker images -qf &quot;dangling=true&quot;)
</code></pre><p>例如：当存在IMAGE ID相同的多个镜像，删除某一个时：</p>
<pre><code>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
centos/lnmp         v1.0.0              1b5426efccfe        35 minutes ago      536 MB
jasonhzy/lnmp       v1.0.0              1b5426efccfe        35 minutes ago      536 MB
</code></pre><p> 删除其中一个即： </p>
<pre><code>docker rmi  centos/lnmp:v1.0.0 
</code></pre><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>查看运行的容器</p>
<pre><code>docker ps
</code></pre><p>例如：</p>
<pre><code>CONTAINER ID  IMAGE         COMMAND      CREATED         STATUS        PORTS  NAMES
86d91c2b5295  2d194b392dd1  &quot;/bin/bash&quot;  2 minutes ago   Up 2 minutes         goofy_jennings    
</code></pre><p>查看所有容器（包括停止的）</p>
<pre><code>docker ps -a
</code></pre><p>例如：</p>
<pre><code>CONTAINER ID  IMAGE         COMMAND      CREATED         STATUS                     PORTS  NAMES
b2273f60a8ff  2d194b392dd1  &quot;/bin/bash&quot;  4 seconds ago   Up 4 seconds                      gigantic_wilson
86d91c2b5295  2d194b392dd1  &quot;/bin/bash&quot;  2 minutes ago   Exited (0) 10 seconds ago         goofy_jennings
</code></pre><p>进入容器（前提是容器必须是启动状态）</p>
<pre><code>docker exec -it 86d91c2b5295 /bin/bash #其中字符串为容器ID
#退出命令行，exit或者ctrl + p、ctrl + q来退出容器。
</code></pre><p>启用容器</p>
<pre><code>docker stop [NAME]/[CONTAINER ID]
</code></pre><p>停用运行中的容器:</p>
<pre><code>docker stop [NAME]/[CONTAINER ID] #停用某一个容器
docker stop $(docker ps -q) #停用全部运行中的容器
</code></pre><p>删除容器：</p>
<pre><code>docker rm [NAME]/[CONTAINER ID] #不能删除一个正在运行的容器，会报错。需要先停止容器。
docker rm $(docker ps -aq) #删除全部容器， 或者docker container prune
</code></pre><p>一条命令实现停用并删除容器：</p>
<pre><code>docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq)
</code></pre><p>其他</p>
<pre><code># Docker提供了docker system prune，可以用于清理dangling镜像(参考What are Docker &lt;none&gt;:&lt;none&gt; images?)和容器，以及失效的数据卷和网络。
docker system prune

# 这个命令将清理整个系统，并且只会保留真正在使用的镜像，容器，数据卷以及网络
docker system prune -a

清理所有无用数据卷
docker volume prune   #docker volume ls查看数据卷 
</code></pre><h3 id="提交镜像-【将容器提交成镜像】"><a href="#提交镜像-【将容器提交成镜像】" class="headerlink" title="提交镜像 【将容器提交成镜像】"></a>提交镜像 【将容器提交成镜像】</h3><pre><code>docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]   
</code></pre><p>例如：    </p>
<pre><code># docker commit -a &quot;jasonhzy&quot; -m &quot;centos php nginx&quot; b2273f60a8ff centos/lnmp:v1.0.0
sha256:1b5426efccfe07977227edbe13e48c68e2beefbe4dd8a89ae6081d7c2a0cc40d
</code></pre><p>各个参数说明：</p>
<pre><code>-m 提交的描述信息
-a 指定镜像作者
b2273f60a8ff 容器ID
centos/lnmp:v1.0.0 指定要创建的目标镜像名
</code></pre><h3 id="获取完整的容器ID"><a href="#获取完整的容器ID" class="headerlink" title="获取完整的容器ID"></a>获取完整的容器ID</h3><pre><code>docker inspect -f   &apos;{{.Id}}&apos; [ID/NAME] 
</code></pre><p>例如：</p>
<pre><code>CONTAINER ID  IMAGE                COMMAND    CREATED       STATUS       PORTS                                    NAMES
de07f0a1f26a  jasonhzy/php5.6-fpm  &quot;php-fpm&quot;  11 hours ago  Up 4 minutes 22/tcp, 80/tcp, 0.0.0.0:9100-&gt;9000/tcp   phpfpm

docker inspect -f   &apos;{{.Id}}&apos; de07f0a1f26a(或者phpfpm)
de07f0a1f26af3d3a2bae5546f8b05106fec20bb6293a2e1893a54dd443697b1 #完整的容器ID    
</code></pre><h3 id="容器与主机之间的数据拷贝"><a href="#容器与主机之间的数据拷贝" class="headerlink" title="容器与主机之间的数据拷贝"></a>容器与主机之间的数据拷贝</h3><p>1.从主机往容器中拷贝</p>
<p>   docker cp &lt;主机文件／文件夹路径&gt; <container id>:&lt;容器内文件／文件夹路径&gt;</container></p>
<p>例如：复制容器/var/www/html下的文件夹test到主机根目录文件夹tmp下</p>
<pre><code>docker cp de07f0a1f26a:/var/www/html/test /tmp/   
</code></pre><p>2.将容器中文件拷往主机</p>
<pre><code>docker cp &lt;CONTAINER ID&gt;:&lt;容器内文件／文件夹路径&gt;  &lt;主机文件／文件夹路径&gt;
</code></pre><p>例如：复制主机/var/www/html目录下的文件夹test到容器的根目录文件夹tmp下</p>
<pre><code>docker cp /var/www/html/test  de07f0a1f26a:/tmp/
docker cp /var/www/html/test  de07f0a1f26a:/tmp/xxx #文件夹test复制并重命名为xxx
</code></pre><h3 id="资源限制与监控"><a href="#资源限制与监控" class="headerlink" title="资源限制与监控"></a>资源限制与监控</h3><ol>
<li><p>可用于查询镜像（Images）、容器（Containers）和本地卷（Local Volumes）等空间占用情况        </p>
<p> docker system df #可以进一步通过-v参数查看空间占用细节    </p>
</li>
<li><p>设置CPU、内存之后，动态修改</p>
<p> docker update -m 100m [容器ID／NAME]</p>
</li>
<li><p>查看docker容器使用的资源</p>
<p> docker stats</p>
</li>
</ol>
<p>可实时地显示容器的资源使用(内存, CPU, 网络等)，默认情况下，stats 命令会每隔 1 秒钟刷新一次输出的内容直到你按下 ctrl + c</p>
<h3 id="Docker-on-MacOS"><a href="#Docker-on-MacOS" class="headerlink" title="Docker on MacOS"></a>Docker on MacOS</h3><p>macOS中docker架构与在其它Linux系统中略有不同，在Linux系统中，操作系统本身即是docker容器的宿主机，docker镜像都是直接存储在宿主机本身的文件系统中，<br>比如我们通过docker info命令可以看到docker的根目录是：</p>
<pre><code>$ docker info | grep &quot;Root Dir&quot;
Docker Root Dir: /var/lib/docker
</code></pre><p>但是在macOS下，我们直接查看这个目录，其实是根本不存在的。在macOS中安装docker并启动，其实就是启动了一个虚拟机，这个虚拟机的整个内容全部都在一个文件里即：</p>
<pre><code>/Users/Kamus/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/Docker.qcow2
</code></pre><p>macOS下的screen命令可以进入该台虚拟机：</p>
<pre><code>screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty      
</code></pre><p>备注：1、断开当前会话，会话在后台运行：ctrl+a, d(先按control+a，再按d)<br>2、重新打开窗口：screen r<br>3、查看所有后台运行会话：screen ls<br>4、关闭当前会话，并退出：ctrl+a, k(先按control+a，再按k)      </p>
<p>参考资料</p>
<p>1.<a href="http://www.docker.org.cn/dockerppt/106.html" target="_blank" rel="noopener">Docker中文</a><br>2.<a href="http://www.enmotech.com/web/detail/1/171/2.html" target="_blank" rel="noopener">Docker on MacOS</a>      </p>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于OpenSSL颁发SSL证书]]></title>
      <url>http://jasonhzy.github.io/2018/02/01/ssl-cert/</url>
      <content type="html"><![CDATA[<p>HTTPS(安全超文本传输协议，Hypertext Transfer Protocol over Secure Socket Layer）)：是一个安全通信通道，它基于HTTP开发用于在客户计算机和服务器之间交换信息<br>SSL(安全套接字层，Secure Socket Layer)：是在客户端和服务器之间建立一条SSL安全通道的安全协议；<br>TLS(传输层安全协议，Transport Layer Security)：用于两个应用程序之间提供保密性和数据完整性；TLS的前身是SSL；<br>OpenSSL是TLS/SSL协议的开源实现，提供开发库和命令行程序；</p>
<a id="more"></a>
<h2 id="服务器端证书"><a href="#服务器端证书" class="headerlink" title="服务器端证书"></a>服务器端证书</h2><h3 id="创建服务器端私钥-private-key"><a href="#创建服务器端私钥-private-key" class="headerlink" title="创建服务器端私钥(private key)"></a>创建服务器端私钥(private key)</h3><pre><code>openssl genrsa -des3 -out server.key 2048 #运行时会提示输入密码,此密码用于加密key文件， des3即加密算法
</code></pre><p>去除key文件口令的命令:</p>
<pre><code>mv server.key server_org.key
openssl rsa -in server_org.key -out server.key    
</code></pre><p><img src="/images/ssl/ssl-private-key.png" alt="ssl private key">    </p>
<h3 id="生成证书签署请求Certificate-Signing-Request（CSR）"><a href="#生成证书签署请求Certificate-Signing-Request（CSR）" class="headerlink" title="生成证书签署请求Certificate Signing Request（CSR）"></a>生成证书签署请求Certificate Signing Request（CSR）</h3><p>用于向CA机构申请证书    </p>
<pre><code>openssl req -new -days 3650 -key server.key -out server.csr
</code></pre><h2 id="创建CA证书"><a href="#创建CA证书" class="headerlink" title="创建CA证书"></a>创建CA证书</h2><p>准备工作</p>
<pre><code>mkdir -p ./demoCA/newcerts
touch ./demoCA/index.txt
touch ./demoCA/serial
echo 01 &gt; ./demoCA/serial
</code></pre><h3 id="创建根证书的私匙"><a href="#创建根证书的私匙" class="headerlink" title="创建根证书的私匙"></a>创建根证书的私匙</h3><pre><code>openssl genrsa -des3 -out ca.key 2048
</code></pre><h3 id="利用私钥创建根证书"><a href="#利用私钥创建根证书" class="headerlink" title="利用私钥创建根证书"></a>利用私钥创建根证书</h3><pre><code>openssl req -new -x509 -key ca.key -out ca.crt 
</code></pre><p>两步骤合并即</p>
<pre><code>$ openssl req -new -x509 -days 3650 -keyout ca.key -out ca.crt 
req              //使用openssl的req子命令  
-new             //生成新的证书请求  
-x509            //生成自签名证书  
-days 5480       //自签名证书的有效期5480天（15年）【仅当使用了 -x509 选项后有效】  
-keyout CA.key   //私钥文件名指定为CA.key【此选项的一般作用是新生成文件命名；但若同时使用了-key选项，则此选项用于原私钥文件的更名】  
-out CA.crt      //指定输出所生成自签名证书的信息到文件，且文件名为CA.crt【建议不要省略】 
</code></pre><p>运行中会提示输入一些 Distinguished Name fields，即证书的识别名信息字段，简称为DN字段   </p>
<table>
<thead>
<tr>
<th>DN字段名</th>
<th>缩写</th>
<th>说明</th>
<th>填写要求</th>
</tr>
</thead>
<tbody>
<tr>
<td>Country Name</td>
<td>C</td>
<td>证书持有者所在国家</td>
<td>要求填写国家代码，用2个字母表示</td>
</tr>
<tr>
<td>State or Province Name</td>
<td>ST</td>
<td>证书持有者所在州或省份</td>
<td>填写全称，可省略不填</td>
</tr>
<tr>
<td>Locality Name</td>
<td>L</td>
<td>证书持有者所在城市</td>
<td>可省略不填</td>
</tr>
<tr>
<td>Organization Name</td>
<td>O</td>
<td>证书持有者所属组织或公司</td>
<td>最好还是填一下</td>
</tr>
<tr>
<td>Organizational Unit Name</td>
<td>OU</td>
<td>证书持有者所属部门</td>
<td>可省略不填</td>
</tr>
<tr>
<td>Common Name</td>
<td>CN</td>
<td>证书持有者的通用名</td>
<td>必填。 对于非应用证书，它应该在一定程度上具有惟一性； 对于应用证书，一般填写服务器域名或通配符样式的域名。</td>
</tr>
<tr>
<td>Email Address</td>
<td></td>
<td>证书持有者的通信邮箱</td>
<td>可省略不填</td>
</tr>
</tbody>
</table>
<p>如果不想在运行过程中逐个输入这些DN字段的值，则可以使用 -subj 选项在命令中直接指定。选项 -subj 的使用形式为：</p>
<pre><code>-subj arg
</code></pre><p>其中，arg是选项 -subj 的参数，其格式类似于：/key0=value0/key1=value1/key2=… 形式。每一个 /key=value 形式的单元，都对应了一个完整的DN字段。其中，<br>/：是每一个DN字段的开始标志；<br>key0、key1等等：就是上述表中提到的DN字段名的缩写；<br>=：DN字段的名和值之间的间隔符；<br>value0、value1等等：就是原本你要在运行过程中逐个输入的DN字段的值。<br>对于您要将值置为空的DN字段，您可以略去不写</p>
<pre><code>openssl req -new -x509 -days 2048 -subj /C=CN/ST=JiangSu/O=beecloud/CN=example.com -keyout ca.key -out ca.crt
</code></pre><p>指定自签名证书的密钥长度和类型:</p>
<pre><code>openssl req -newkey rsa:2048 -x509 -days 3650 -keyout ca.key -out ca.crt
</code></pre><h3 id="CA签署证书，并将证书颁发给请求者"><a href="#CA签署证书，并将证书颁发给请求者" class="headerlink" title="CA签署证书，并将证书颁发给请求者"></a>CA签署证书，并将证书颁发给请求者</h3><pre><code>openssl ca -in server.csr -cert ca.crt -keyfile ca.key -out server.crt  -days 3650
</code></pre><h3 id="查看证书中的信息"><a href="#查看证书中的信息" class="headerlink" title="查看证书中的信息"></a>查看证书中的信息</h3><pre><code>#查看证书的全部信息
openssl x509 -in server.crt -noout -text
#查看证书中的信息：-serial 查看序列号 -subject 查看主体信息
openssl x509 -in server.crt -noout -serial -subject    
</code></pre><h3 id="吊销证书"><a href="#吊销证书" class="headerlink" title="吊销证书"></a>吊销证书</h3><p>在客户端获取要吊销的证书的serial:</p>
<p>把证书格式转换成pkcs12格式</p>
<pre><code>openssl pkcs12 -export -in ca.crt -inkey ca.key -out ca.pfx
</code></pre><h2 id="不使用CA，创建自签名证书"><a href="#不使用CA，创建自签名证书" class="headerlink" title="不使用CA，创建自签名证书"></a>不使用CA，创建自签名证书</h2><pre><code>openssl x509 -req -days 3650 -in server.csr -signkey server.key -out server.crt    
</code></pre>]]></content>
      
        <categories>
            
            <category> HTTP(s) </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SSL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux I/O重定向]]></title>
      <url>http://jasonhzy.github.io/2018/01/09/linux-stdinout/</url>
      <content type="html"><![CDATA[<h3 id="文件描述符-File-Descriptor"><a href="#文件描述符-File-Descriptor" class="headerlink" title="文件描述符(File Descriptor)"></a>文件描述符(File Descriptor)</h3><blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6" target="_blank" rel="noopener">维基百科</a>:文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。</p>
</blockquote>
<p>Linux 的shell命令，可以通过文件描述符来引用一些文件，通常使用到的文件描述符为0,1,2，即：</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>文件描述符</th>
<th>操作符</th>
</tr>
</thead>
<tbody>
<tr>
<td>输入文件—标准输入(stdin)</td>
<td>0（默认是键盘，为0时是文件或者其他命令的输出）</td>
<td>&lt; 或 &lt;&lt;</td>
</tr>
<tr>
<td>输出文件—标准输出    (stdout)</td>
<td>1（默认是屏幕，为1时是文件）</td>
<td>&gt;, &gt;&gt;, 1&gt; 或 1&gt;&gt;</td>
</tr>
<tr>
<td>错误输出文件—标准错误(stderr)</td>
<td>2（默认是屏幕，为2时是文件）</td>
<td>2&gt; 或 2&gt;&gt;</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command  &gt;  filename</td>
<td>把标准输出重定向到一个新文件中</td>
</tr>
<tr>
<td>Command  &gt;&gt;  filename</td>
<td>把标准输出重定向到一个文件(<strong>追加</strong>)</td>
</tr>
<tr>
<td>Command  &gt;  filename  2&gt;&amp;1</td>
<td>把标准输出和错误一起重定向到一个文件中</td>
</tr>
<tr>
<td>Command &amp;&gt; filename</td>
<td>同上</td>
</tr>
<tr>
<td>Command  &gt;&gt;  filename  2&gt;&amp;1</td>
<td>把标准输出和错误一起重定向到一个文件中(<strong>追加</strong>)</td>
</tr>
<tr>
<td>Command &amp;&gt;&gt; filename</td>
<td>同上</td>
</tr>
<tr>
<td>Command  2&gt;  filename</td>
<td>把标准错误重定向到一个文件中</td>
</tr>
<tr>
<td>Command  2&gt;&gt;  filename</td>
<td>把标准错误重定向到一个文件中(<strong>追加</strong>)</td>
</tr>
<tr>
<td>Command 1&gt; filename 2&gt; filename1</td>
<td>把标准输出和标准错误分别重定向到两个不同新的文件中</td>
</tr>
<tr>
<td>Command 1&gt;&gt; filename 2&gt;&gt; filename1</td>
<td>把标准输出和标准错误分别重定向到两个不同的文件中(<strong>追加</strong>)</td>
</tr>
<tr>
<td>Command tee filename</td>
<td>让标准输出在屏幕显示，同时重定向一个新的文件</td>
</tr>
<tr>
<td>Command &#124; tee -i filename</td>
<td>同上，但是不接受中断信号，只能Ctrl+D结束，不能用Ctrl+C</td>
</tr>
<tr>
<td>Command &#124; tee -a filename</td>
<td>让标准输出在屏幕显示，同时重定向一个文件(追加)</td>
</tr>
<tr>
<td>Command 2&gt;&amp;1 &#124; tee filename</td>
<td>让标准输出和标准错误在屏幕显示，重定向到一个新的文件中</td>
</tr>
<tr>
<td>Command 2&gt;&amp;1 &#124; tee -a filename</td>
<td>让标准输出和标准错误在屏幕显示，重定向到一个文件中(<strong>追加</strong>)</td>
</tr>
</tbody>
</table>
<p>1、Linux下还有一个特殊的文件/dev/null，它就像一个无底洞，所有重定向到它的信息都会消失得无影无踪。这一点非常有用，当我们不需要回显程序的所有信息时，就可以将输出重定向到/dev/null，例如：</p>
<pre><code>ls xxx 1&gt;/dev/null 2&gt;/dev/null 或 ls &gt;/dev/null 2&gt;&amp;1
</code></pre><p>2、使用操作符 &gt; 或 &gt;&gt; 时，默认为标准输出1重定向, 所以 &gt;filename 就是 1&gt;filename 的省写，1与&gt;之间不能有空格<br>3、&gt;操作符，判断右边文件是否存在，若存在先删除，再创建新文件。不存则创建。 无论左边命令执行是否成功。右边文件都会变为空。<br>4、&gt;&gt;操作符，判断右边文件是否存在，若不存在，则先创建。以添加方式打开文件，会分配一个文件描述符[不特别指定，默认为1]然后，与左边对应的输出绑定。<br>5、管道 (“|”, pipe line)，把上一个命令的 stdout 接到下一个命令的 stdin;<br>6、tee 命令的作用是在不影响原本 I/O 的情况下，将 stdout 复制一份到档案去;</p>
<p>例如：执行 who 命令，将命令的完整的输出重定向在文件中(/tmps/users)，即:</p>
<pre><code>who &gt; /tmp/users
</code></pre><p>使用 cat 命令查看文件内容：    </p>
<pre><code>$ cat users
jason    console  Jan 11 09:05 
jason    ttys000  Jan 11 09:06 
jason    ttys001  Jan 11 09:06 
jason    ttys006  Jan 11 09:45
</code></pre><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command &lt; filename</td>
<td>Command 命令以 filename 文件作为标准输入</td>
</tr>
<tr>
<td>Command &lt; filename &gt; filename1</td>
<td>Command以 filename 文件作为标准输入，以 filename1 作为标准输出</td>
</tr>
<tr>
<td>Command &lt;&lt; delimiter</td>
<td>从标准输入中读入，直到遇到 delimiter 分界符（以 delimiter 为开始／结束符）</td>
</tr>
</tbody>
</table>
<p>以上述who命令为例：<br>1、输入重定向到 users 文件，即：</p>
<pre><code>$ wc -l &lt; users
4  
</code></pre><p>2、Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。 它的基本的形式如下：</p>
<pre><code>command &lt;&lt; delimiter
    document
delimiter
</code></pre><p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p>
<pre><code>注意：
结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。
开始的delimiter前后的空格会被忽略掉。
</code></pre><p>例如：</p>
<pre><code>$ wc -l &lt;&lt; EOF
    jason
    jake
    jacky
EOF
3 # 输出结果为 3 行            
</code></pre><h3 id="绑定重定向"><a href="#绑定重定向" class="headerlink" title="绑定重定向"></a>绑定重定向</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command m&gt;&amp;n</td>
<td>把输出到文件描述符m的信息重定向到文件描述符n上。如 exec 6&gt;&amp;1</td>
</tr>
<tr>
<td>Command m&lt;&amp;n</td>
<td>把文件描述符n的信息输入到文件描述符m上。如 exec 6&lt;&amp;0</td>
</tr>
<tr>
<td>Command n&lt;&amp;-</td>
<td>关闭输入文件描述符n。如 0&lt;&amp;-, &lt;&amp;- 关闭标准输入</td>
</tr>
<tr>
<td>Command n&gt;&amp;-</td>
<td>关闭输出文件描述符n。如 1&gt;&amp;-, &gt;&amp;- 关闭标准输出，2&gt;&amp;- 关闭标准错误输出</td>
</tr>
</tbody>
</table>
<p>0、1、2为shell保留文件描述符，可以自定义文件描述符，对其进行读写，用户自定义文件描述符用exec命令进行创建。用户可以自定义文件描述符围是：3~MAX，<br>这个最大数字，跟用户的：ulimit –n 定义数字有关系，不能超过最大值。</p>
<p>附：Mac下文件描述符的链接关系：</p>
<pre><code>$ ls -al /dev/std* /dev/fd/*
crw--w----  1 jason  tty     16,   7 Jan 11 15:18 /dev/fd/0
crw--w----  1 jason  tty     16,   7 Jan 11 15:18 /dev/fd/1
crw--w----  1 jason  tty     16,   7 Jan 11 15:18 /dev/fd/2
lr-xr-xr-x  1 root   wheel         0 Jan 11 09:05 /dev/stderr -&gt; fd/2
lr-xr-xr-x  1 root   wheel         0 Jan 11 09:05 /dev/stdin -&gt; fd/0
lr-xr-xr-x  1 root   wheel         0 Jan 11 09:05 /dev/stdout -&gt; fd/1
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> I/O </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL Proxy]]></title>
      <url>http://jasonhzy.github.io/2017/12/20/mysql-proxy/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mysql-proxy是处在mysql数据库client和mysql server之间的程序，可以用来分析、监控和变换（transform）通信数据。支持嵌入性脚本语言Lua，支持广泛的使用场景：负载平衡，故障、查询分析，查询过滤和修改等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mysql-proxy更强大的一项功能是实现”读写分离(Read/Write Splitting)”。基本的原理是让主数据库处理事务性查询，而从数据库处理SELECT查询。数据库复制被用来把事务性查询导致的变更同步到集群中的从数据库。    </p>
<a id="more"></a>
<h3 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h3><p>192.168.1.60 master<br>192.168.1.144 slave<br>192.168.1.63 proxy</p>
<h3 id="主从同步"><a href="#主从同步" class="headerlink" title="主从同步"></a>主从同步</h3><p>请参考文章<a href="https://jasonhzy.github.io/2016/02/05/master-slave/">Mysql 数据库主从同步(Master-Slave)</a></p>
<h3 id="mysql-proxy配置"><a href="#mysql-proxy配置" class="headerlink" title="mysql-proxy配置"></a>mysql-proxy配置</h3><p>mysql-proxy命令介绍，使用mysql-proxy –help-all可以查看命令全部帮助，以下为一些常用参数介绍：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>–proxy-address</td>
<td>指定代理服务监听的地址和端口（默认是4040），简写为-P</td>
</tr>
<tr>
<td>–admin-address</td>
<td>指定管理主机地址和端口（默认是4041）</td>
</tr>
<tr>
<td>–proxy-backend-addresses</td>
<td>指定后端mysql服务器的地址和端口（master），简写为-b</td>
</tr>
<tr>
<td>–proxy-read-only-backend-addresses</td>
<td>指定后端只读mysql服务器的地址和端口（slave），缩为-r</td>
</tr>
<tr>
<td>–proxy-lua-script</td>
<td>指定mysql代理功能的Lua脚本文件</td>
</tr>
<tr>
<td>–daemon</td>
<td>以守护进程模式启动mysql-proxy</td>
</tr>
<tr>
<td>–defaults-file</td>
<td>指定配置文件路径</td>
</tr>
<tr>
<td>–log-file</td>
<td>指定日志文件路径</td>
</tr>
<tr>
<td>–log-level</td>
<td>指定日志级别有error,warning,info,message,debug</td>
</tr>
<tr>
<td>–user</td>
<td>指定运行mysql-proxy进程的用户</td>
</tr>
<tr>
<td>–admin-username</td>
<td>指定登录到mysql-proxy管理界面的用户名</td>
</tr>
<tr>
<td>–admin-password</td>
<td>指定登录到mysql-proxy管理界面的用户密码</td>
</tr>
<tr>
<td>–admin-lua-script=script-file</td>
<td>管理模块的lua脚本文件路径（创建管理接口）</td>
</tr>
<tr>
<td>–plugins</td>
<td>加载插件（admin,proxy）</td>
</tr>
<tr>
<td>–proxy-lua-script</td>
<td>指定读写分离脚本位置</td>
</tr>
<tr>
<td>–admin-lua-script</td>
<td>指定管理界面脚本位置</td>
</tr>
</tbody>
</table>
<p>创建mysql-proxy的配置文件，如/etc/mysql-proxy.conf，配置内容如下：</p>
<pre><code>[mysql-proxy]
#以守护进程方式运行
daemon=true
#mysql-proxy崩溃时，尝试重启
keepalive=true
#定义log日志级别，由高到低分别有(error|warning|info|message|debug)
log-level=debug
pid-file=/var/run/mysql-proxy.pid
log-file=/var/log/mysql-proxy.log
#指定mysql-proxy的监听地址，不加端口，默认4040
#proxy-address=0.0.0.0:4000
#设置后台主服务器
proxy-backend-addresses=192.168.1.60:3306
#设置后台从服务器
proxy-read-only-backend-addresses=192.168.1.144:3306
#设置读写分离脚本路径
proxy-lua-script=/usr/lib/mysql-proxy/lua/rw-splitting.lua
#设置mysql-proxy管理地址，需要admin插件
#admin-address=0.0.0.0:4001
#设置登录管理地址用户
admin-username=root
#设置管理用户密码
admin-password=admin
#设置管理后台lua脚本路径，改脚本默认没有要自动定义
admin-lua-script=/usr/lib/mysql-proxy/lua/admin.lua
</code></pre><p> rw-splitting.lua配置：</p>
<pre><code>--- config
--
-- connection pool
if not proxy.global.config.rwsplit then
        proxy.global.config.rwsplit = {
                min_idle_connections = 1, -- 默认4
                max_idle_connections = 1, -- 默认8

                is_debug = false
        }
end
</code></pre><p>启动mysql-proxy，执行：</p>
<pre><code>mysql-proxy --default-file=/etc/mysql-proxy.cnf
</code></pre><p>查看监听的端口：<br><img src="/images/mysql-proxy/proxy-config.png" alt="proxy-config"></p>
<p>显示日志：<br><img src="/images/mysql-proxy/proxy-log.png" alt="proxy-log"></p>
<p>在主服务器上创建连接用户proxy（因主从同步，从服务器也创建了此用户）：</p>
<pre><code>grant all privileges on test.* to &apos;proxy&apos;@&apos;192.168.1.%&apos; identified by &apos;123456&apos;;
</code></pre><p>登录管理地址查看当前状态：</p>
<pre><code>mysql -uproxy -p -h192.168.1.63 -P4000   
</code></pre><p>显示结果如下：<br><img src="/images/mysql-proxy/proxy-client-conn.png" alt="proxy-client-conn"><br>若没有用户通过mysql-proxy连接到后端，则状态为unknown，尝试几次后，可以看到两个服务器状态都是up,</p>
<h3 id="测试读写分离"><a href="#测试读写分离" class="headerlink" title="测试读写分离"></a>测试读写分离</h3><p>测试登陆账号<a href="mailto:proxy@192.168.1" target="_blank" rel="noopener">proxy@192.168.1</a>.%进行添加数据，即在客户端执行：</p>
<pre><code>mysql -h192.168.1.63  -uproxy -p123456 -P4000
</code></pre><p>1、正常情况下，插入数据</p>
<pre><code>mysql&gt; use test;
mysql&gt; insert into user (`id`, `name`, `age`) values(2, &apos;jack&apos;, 20);
</code></pre><p>登录主从服务器mysql客户端查看对应的表中均可看到插入相同的数据信息</p>
<p>2、关闭从服务，即stop slave</p>
<p><img src="/images/mysql-proxy/proxy-stop-slave.png" alt="proxy-stop-slave">    </p>
<p>1）证明写分离</p>
<pre><code>mysql&gt; use test;
mysql&gt; insert into user (`id`, `name`, `age`) values(3, &apos;joey&apos;, 20);
</code></pre><p>此时登录主从mysql客户端：</p>
<p>主服务器显示：<br><img src="/images/mysql-proxy/proxy-master.png" alt="proxy-master"></p>
<p>从服务器显示：<br><img src="/images/mysql-proxy/proxy-slave.png" alt="proxy-slave">    </p>
<p>上述可以看出通过mysql-proxy插入的数据只写入到配置的主服务器mysql中</p>
<p>2）证明读分离</p>
<p>插入数据后再次查看，此时看到的仅仅是从库的信息：</p>
<p><img src="/images/mysql-proxy/proxy-read.png" alt="proxy-read"></p>
<p>上述可以看出实现了读分离</p>
<p><strong>注意</strong><br>如果日志中提示 (debug) [network-mysqld.c:1134]: error on a connection (fd: -1 event: 0). closing client connection.<br>可以修改 rw-splitting.lua中的min_idle_connections和max_idle_connections的值，将其调大</p>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis主从同步，哨兵]]></title>
      <url>http://jasonhzy.github.io/2017/12/12/redis/</url>
      <content type="html"><![CDATA[<h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><blockquote>
<p>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步</p>
</blockquote>
<a id="more"></a>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p>1、下载redis安装包，下载地址：<a href="https://redis.io/download，选择安装的版本，即" target="_blank" rel="noopener">https://redis.io/download，选择安装的版本，即</a></p>
<pre><code>wget http://download.redis.io/releases/redis-4.0.14.tar.gz
</code></pre><p>2、 解压并编译安装</p>
<pre><code>#解压
tar -xvf redis-4.0.14.tar.gz
#安装
cd redis-4.0.14
make PREFIX=/usr/local/redis install   
</code></pre><p>3、复制配置文件至redis安装目录</p>
<pre><code>cp redis-4.0.14/redis.conf  /usr/local/redis/redis.conf
cp redis-4.0.14/sentinel.conf  /usr/local/redis/sentinel.conf  
</code></pre><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><pre><code>192.168.1.49 master 6379 sentinel1 26379
192.168.1.63 slave1 6380 sentinel2 26380
192.168.1.144 slave2 6381 sentinel3 26381
</code></pre><h2 id="主从同步-master-slave"><a href="#主从同步-master-slave" class="headerlink" title="主从同步(master-slave)"></a>主从同步(master-slave)</h2><p>   Redis 支持简单且易用的主从复制（master-slave replication）功能</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>   Redis 复制功能的几个重要方面：</p>
<blockquote>
<p>1、一个主服务器可以有多个从服务器。<br>2、不仅主服务器可以有从服务器， 从服务器也可以有自己的从服务器， 多个从服务器之间可以构成一个图状结构。<br>3、复制功能不会阻塞主服务器： 即使有一个或多个从服务器正在进行初次同步， 主服务器也可以继续处理命令请求。<br>4、复制功能也不会阻塞从服务器： 只要在 redis.conf 文件中进行了相应的设置， 即使从服务器正在进行初次同步， 服务器也可以使用旧版本的数据集来处理命令查询。<br>不过， 在从服务器删除旧版本数据集并载入新版本数据集的那段时间内， 连接请求会被阻塞。<br>你还可以配置从服务器， 让它在与主服务器之间的连接断开时， 向客户端发送一个错误。<br>5、复制功能可以单纯地用于数据冗余（data redundancy）， 也可以通过让多个从服务器处理只读命令请求来提升扩展性（scalability）： 比如说， 繁重的 SORT 命令可以交给附属节点去运行。<br>6、可以通过复制功能来让主服务器免于执行持久化操作： 只要关闭主服务器的持久化功能， 然后由从服务器去执行持久化操作即可。   </p>
</blockquote>
<h3 id="简单搭建"><a href="#简单搭建" class="headerlink" title="简单搭建"></a>简单搭建</h3><p>1、修改配置redis.conf<br> 1) master配置  </p>
<pre><code>protected-mode no
#允许远程访问
#bind 0.0.0.0
#protected-mode yes
port 6379

#设置密码
requirepass 123456
#哨兵监控主从切换时使用，否则无需配置
masterauth 123456
</code></pre><p> 启动master如下图所示：<br>    <img src="/images/redis/redis-master-noslave.png" alt="master">    </p>
<p> 2) slave1配置  </p>
<pre><code>protected-mode no
#允许远程访问
#bind 0.0.0.0
#protected-mode yes

port 6380
slaveof 192.168.1.49

#master设置了密码，slave必须一致
masterauth 123456
#哨兵监控主从切换时使用，否则无需配置
requirepass 123456
</code></pre><p>  启动slave1如下图所示：<br>    <img src="/images/redis/redis-slave1.png" alt="slave1">       </p>
<p> 3) slave2配置  </p>
<pre><code>protected-mode no
#允许远程访问
#bind 0.0.0.0
#protected-mode yes

port 6381
slaveof 192.168.1.49

#master设置了密码，slave必须一致
masterauth 123456
#哨兵监控主从切换时使用，否则无需配置
requirepass 123456
</code></pre><p> 启动slave1如下图所示：<br>    <img src="/images/redis/redis-slave2.png" alt="slave2"></p>
<p> 从服务器均启动后，在此查看主服务器：<br>    <img src="/images/redis/redis-master.png" alt="master-slave"> </p>
<p>2、客户端连接测试<br>1)master服务器：<br>    <img src="/images/redis/redis-master-test.png" alt="master-test"><br>2)slave1服务器：<br>    <img src="/images/redis/redis-slave1-test.png" alt="slave1-test"><br>3)slave2服务器：<br>    <img src="/images/redis/redis-slave2-test.png" alt="slave2-test"> </p>
<h3 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h3><p>redis支持两种方式的持久化，可以单独使用或者结合起来使用。<br>1、第一种：RDB方式redis默认的持久化方式（快照）<br>2、第二种：AOF方式（日志追加）</p>
<p>RDB快照模式(snapshot):</p>
<pre><code>save 900 1  //900秒内如果超过1个key被修改，则发起快照保存
save 300 10 //300秒内容如超过10个key被修改，则发起快照保存
save 60 10000  //(这3个选项都屏蔽,则rdb禁用)

stop-writes-on-bgsave-error yes  // 后台备份进程出错时,主进程停不停止写入
rdbcompression yes      // 导出的rdb文件是否压缩
Rdbchecksum   yes       //导入rbd恢复时数据时,要不要检验rdb的完整性
dbfilename dump.rdb     //导出来的rdb文件名
dir /var/lib/redis/     //rdb的放置路径
</code></pre><p>AOF日志模式:</p>
<pre><code>appendonly yes              //启用aof持久化方式
# appendfsync always        //每收到写命令就立即强制写入磁盘，最慢的，但是保证完全的持久化，不推荐使用
appendfsync everysec        //每秒钟强制写入磁盘一次，在性能和持久化方面做了很好的折中，推荐
# appendfsync no            //完全依赖os，性能最好,持久化没保证（操作系统自身的同步）
no-appendfsync-on-rewrite  yes   //正在导出rdb快照的过程中,要不要停止同步aof
auto-aof-rewrite-percentage 100  //aof文件大小比起上次重写时的大小,增长率100%时,重写
auto-aof-rewrite-min-size 64mb   //aof文件,至少超过64M时,重写
</code></pre><p>注意：<br>1、AOF和RDB同时存在的时候，优先使用AOF恢复数据，因为AOF保存的数据集更完整；<br>2、AOF和RDB恢复的时候，RDB更快，直接拷贝数据，AOF还要执行语句；<br>3、建议同时使用AOF和RDB</p>
<h2 id="哨兵-sentinel"><a href="#哨兵-sentinel" class="headerlink" title="哨兵(sentinel)"></a>哨兵(sentinel)</h2><p>Sentinel 系统用于管理多个 Redis 服务器（instance）， 该系统执行以下三个任务：</p>
<blockquote>
<p><strong>监控（Monitoring）</strong>： Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。<br><strong>提醒（Notification）</strong>： 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。<br><strong>自动故障迁移（Automatic failover）</strong>： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器， 并让失效主服务器的其他从服务器改为复制新的主服务器； 当客户端试图连接失效的主服务器时， 集群也会向客户端返回新主服务器的地址， 使得集群可以使用新主服务器代替失效服务器。</p>
</blockquote>
<h3 id="简单搭建-1"><a href="#简单搭建-1" class="headerlink" title="简单搭建"></a>简单搭建</h3><p>1、修改配置sentinel.conf<br> sentinel1、sentinel2、sentinel3配置的不同之处在于端口号的不同  </p>
<pre><code>port 26379
#port 26380
#port 26381
logfile &quot;/var/log/sentinel.log&quot;
dir &quot;/tmp&quot;

protected-mode no
#允许远程访问
#bind 0.0.0.0
#protected-mode yes

#每个master设置有个不同的名字，后面的数字2,是指当有两个及以上的sentinel服务检测到master宕机，才会去执行主从切换的功能
#sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;
#&lt;master-name&gt; ：redis主服务名称，可以自行命名，但是在一个sentinel网络中，一个redis主服务只能有一个名称；
#&lt;quorum&gt;的大小即: floor(N/2) + 1 &lt;= quorum &lt;= N (N为sentinel总数)
# 备注：允许远程访问时&lt;ip&gt;必须是外网（非内网）IP
sentinel monitor mymaster 192.168.1.49 6379 2
#设置监控的master和访问密码
sentinel auth-pass mymaster 123456
#在10s这个时间范围内不能接收响应，master将会被标记为故障。
sentinel down-after-milliseconds mymaster 10000
#执行故障转移的timeout超时时长，当前即判定超过20s即为超时
sentinel failover-timeout mymaster 20000
</code></pre><p> 启动sentinel1、sentinel2、sentinel3，其中sentinel1如下图所示：<br>    <img src="/images/redis/redis-sentinel-info.png" alt="sentinel1">    </p>
<p> 查看日志：</p>
<pre><code>3811:X 08 Dec 11:21:40.014 # +monitor master mymaster 192.168.1.49 6379 quorum 2
3811:X 08 Dec 11:21:40.016 * +slave slave 192.168.1.63:6380 192.168.1.63 6380 @ mymaster 192.168.1.49 6379
3811:X 08 Dec 11:21:40.018 * +slave slave 192.168.1.144:6381 192.168.1.144 6381 @ mymaster 192.168.1.49 6379   
</code></pre><p> 从对应的日志观察到，一个master服务，两个slave服务。我们现在来kill master服务的进程，再次查看日志：</p>
<pre><code>3811:X 08 Dec 11:36:58.678 # +sdown master mymaster 192.168.1.49 6379
3811:X 08 Dec 11:36:58.761 # +odown master mymaster 192.168.1.49 6379 #quorum 2/2
3811:X 08 Dec 11:36:58.761 # +new-epoch 1
3811:X 08 Dec 11:36:58.762 # +try-failover master mymaster 192.168.1.49 6379
3811:X 08 Dec 11:36:58.767 # +vote-for-leader 76c7f7a57920c33cdf4d8139270569f79b6c304c 1
3811:X 08 Dec 11:36:58.768 # cf5188ad057e38bdc3f33b138528adf44fe84779 voted for 3dbd90731d504fec0b4e667f9034f07b120e7932 1
3811:X 08 Dec 11:36:59.892 # +config-update-from sentinel 3dbd90731d504fec0b4e667f9034f07b120e7932 192.168.1.144 26381 @ mymaster 192.168.1.49 6379
3811:X 08 Dec 11:36:59.893 # +switch-master mymaster 192.168.1.49 6379 192.168.1.63 6380 
</code></pre><p>  此时slave1服务的状态(切换为新的master)：<br>   <img src="/images/redis/sentinel-slave1-to-master.png" alt="sentinel-slave1-to-master">    </p>
<p>  此时slave2服务的状态：<br>    <img src="/images/redis/sentinel-slave2.png" alt="sentinel-slave2"></p>
<p>  我们重启下原来主服务之后，已经切换为slave服务了，状态如下：<br>    <img src="/images/redis/sentinel-master-to-slave.png" alt="sentinel-master-to-slave"></p>
<p>  再次查看新的主服务(slave1切换为新服务)状态如下：<br>    <img src="/images/redis/sentinel-new-master.png" alt="sentinel-master-to-slave">  </p>
<p>  查看日志：<br>    <img src="/images/redis/sentinel-log.png" alt="sentinel-log">     </p>
<p>注意事项：</p>
<p>1.如果停掉master 后，sentinel 显示足够数量的 sdown 后，没有出现odown或try-failover，则检查密码等配置是否正确<br>2.如果停掉master后，试图切换的时候出现failover-abort-not-elected<br>  1）如果redis实例没有配置</p>
<pre><code>protected-mode yes
#bind 0.0.0.0
bind 192.168.1.49
</code></pre><p>  则在sentinel 配置文件加上</p>
<pre><code>protected-mode no 
</code></pre><p>  2）如果redis实例有配置</p>
<pre><code>protected-mode yes
#bind 0.0.0.0
bind 192.168.1.49
</code></pre><p>  则在sentinel配置文件加上</p>
<pre><code>protected-mode yes
#bind 0.0.0.0
bind 192.168.1.49
</code></pre><p>3.开启redis安全模式，即设置protected-mode为yes，它启用的条件，需满足：</p>
<pre><code>1） 没有bind IP
2） 没有设置访问密码
</code></pre><p>远程调用时，若出现如下error：</p>
<pre><code>protocol error, got &apos;p&apos; as reply type byte
</code></pre><p>则需注意：<br>    1）是否设置bind 127.0.0.1<br>    2）开启之后protected-mode，是否设置bind 0.0.0.0</p>
]]></content>
      
        <categories>
            
            <category> Redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql Grant／Revoke]]></title>
      <url>http://jasonhzy.github.io/2017/11/14/mysql-grant/</url>
      <content type="html"><![CDATA[<h3 id="mysql权限控制"><a href="#mysql权限控制" class="headerlink" title="mysql权限控制"></a>mysql权限控制</h3><p>mysql用户进行授权即grant，撤销用户的授权即revoke，授权给某个用户语法格式如：</p>
<pre><code>GRANT ALL PRIVILEGES ON databasename.tablename TO &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;mypassword&apos;
# privileges 权限，可选值为：SELECT, UPDATE, INSERT, DELETE, DROP, CREATE, ALL等。
# databasename 数据库名，对所有数据库给予权限用 ‘*’ 来表示。
# tablename 表名，对所有的表给予权限用 ‘*’ 来表示。
# host，可以是‘%’为任意主机，也可以是制定ip或者主机名
# mypassword，授权用户在远程访问时使用的密码
</code></pre><a id="more"></a>
<h3 id="常用关于授权命令介绍"><a href="#常用关于授权命令介绍" class="headerlink" title="常用关于授权命令介绍"></a>常用关于授权命令介绍</h3><p>1、用户授权</p>
<p>（1）赋予用户指定数据库增删改查权限</p>
<pre><code>grant select on test.* to &apos;jason&apos;@&apos;%&apos; identified by &apos;123456&apos;;
grant insert on test.* to &apos;jason&apos;@&apos;%&apos; identified by &apos;123456&apos;;
grant update on test.* to &apos;jason&apos;@&apos;%&apos; identified by &apos;123456&apos;;
grant delete on test.* to &apos;jason&apos;@&apos;%&apos; identified by &apos;123456&apos;;

备注：用户名和密码保持一致时，表示增加权限，如果密码不一致则添加失败
</code></pre><p>或者合并为一条语句：    </p>
<pre><code>grant select, insert, update, delete on test.* to &apos;jason&apos;@&apos;%&apos; identified by &apos;123456&apos;;

备注：数据库的权限存储于mysql-&gt;db，如果是为所有数据库赋予权限信息存储于mysql-&gt;user
</code></pre><p>（2）为数据库指定的表的列赋予权限</p>
<pre><code>grant select(`id`, `num`), insert, update, delete on test.user to &apos;jason&apos;@&apos;%&apos; identified by &apos;123456&apos;;

备注：列权限信息存储于mysql-&gt;columns_priv, 表权限信息存储于mysql-&gt;table_priv
</code></pre><p>（3）如果想让授权的用户(如：jason)，也可以将这些权限grant给其他用户，需要选项“grant option”</p>
<pre><code>grant select, insert, update, delete on test.* to &apos;jason&apos;@&apos;%&apos; identified by &apos;123456&apos; with grant option;
</code></pre><p> (4)逻辑备份工具备份时可能需要的权限<br> 逻辑备份工具：mysqldump,mysqlpump,mydumper等等</p>
<pre><code>权限：SELECT
作用：查询表中数据
权限：SHOW VIEW
作用：查看创建视图的语句
权限：TRIGGER
作用：备份触发器
权限：EVENT
作用：备份事件（定时任务）
权限：lock tables
作用：备份时锁表，产生一致性备份
权限：reload
作用：show processlist,show engine innodb status,查看线程，查看引擎状态
权限：replication client
作用：show master/slave status;查看事务日志执行状态与位置
       show binary logs；查看当前保存的事务日志列表与文件大小
权限：super
作用：关闭线程，不受最大连接线程数限制的VIP连接通道，阻断刷新线程的命令，不受离线模式影响
</code></pre><p> 命令：</p>
<pre><code>grant select,lock tables,show view on *.* to bak@&apos;192.168.%&apos; identified by &apos;123456&apos;;（一般情况下足以） 
grant lock tables,reload,process,replication client,super,select,event,trigger,show view on *.* to bak@&apos;192.168.%&apos;;
</code></pre><p>2、撤销授权</p>
<pre><code>revoke update,delete on test.* from &apos;jason&apos;@&apos;%&apos;; -- 删除drop权限
revoke all on test.* from &apos;jason&apos;@&apos;%&apos;; -- 删除除with grant option之外的所有权限
revoke grant option on test.* from &apos;jason&apos;@&apos;%&apos;; -- 删除with grant option权限
</code></pre><p>3、查看用户权限：</p>
<pre><code>show grants; --查看当前用户（自己）权限
show grants for &apos;jason&apos;; --查看其他MySQL用户权限
show grants for &apos;jason&apos;@&apos;%&apos;; --查看其他MySQL用户权限
</code></pre><p>4、授权立即生效（重点）</p>
<pre><code>flush privileges;
</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1、MySQL用户权限表<br>存储用户权限信息表主要有：user,db,tables_priv,columns_priv,procs_priv这五张表（5.6之前还有host表），授权可以分为多个层次：</p>
<blockquote>
<p>全局层级：全局权限适用于一个给定服务器中的所有数据库，这些权限存储在mysql.user表中。<br>数据库层级：数据库权限适用于一个给定数据库中的所有目标，这些权限存储在mysql.db表中。<br>表层级：表权限适用于一个给定表中的所有列，这些权限存储在mysql.tables_priv表中。<br>列层级：列权限使用于一个给定表中的单一列，这些权限存储在mysql.columns_priv表中。<br>子程序层级：CREATE ROUTINE、ALTER ROUTINE、EXECUTE和GRANT权限适用于已存储的子程序。这些权限可以被授予为全局层级和数据库层级。而且，除了CREATE ROUTINE外，这些权限可以被授予子程序层级，并存储在mysql.procs_priv表中。</p>
</blockquote>
<p>2、with admin option和with grant option<br>（1）with admin option 只能在赋予 system privilege 的时使用 - with grant option 只能在赋予 object privilege 的时使用<br>（2）撤消带有admin option 的system privileges 时，连带的权限将保留，即撤销上级的权限时，下级已经赋予的权限则会保留<br>（3）撤消带有grant option 的object privileges 时，连带的权限也将撤消，即撤销上级的权限时，下级已经赋予的权限也会撤销</p>
<p>3、删除用户<br>drop user命令会删除用户以及对应的权限，例如：</p>
<pre><code>drop user &apos;jason&apos;@&apos;%&apos;;
</code></pre>]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx编译安装]]></title>
      <url>http://jasonhzy.github.io/2017/09/11/nginx-install/</url>
      <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>下载<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx</a>的安装包，解压</p>
<a id="more"></a>
<h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><pre><code>cd ./nginx-1.11.9

./configure 
--prefix=/opt/local/var/run/nginx 
--sbin-path=/opt/local/sbin/nginx 
--conf-path=/opt/local/etc/nginx/nginx.conf 
--pid-path=/opt/local/var/run/nginx/nginx.pid 
--http-log-path=/opt/local/var/log/nginx/access.log 
--error-log-path=/opt/local/var/log/nginx/error.log 
--with-http_ssl_module 
--with-debug
...

make &amp;&amp; make install //编译并安装
</code></pre><p>以本地nginx环境为例（Mac OS X）：</p>
<pre><code>--prefix=/opt/local/var/run/nginx 
--sbin-path=/opt/local/sbin/nginx 
--conf-path=/opt/local/etc/nginx/nginx.conf 
--pid-path=/opt/local/var/run/nginx/nginx.pid 
--http-log-path=/opt/local/var/log/nginx/access.log 
--error-log-path=/opt/local/var/log/nginx/error.log 
--with-http_ssl_module 
--with-debug 
--add-module=/Users/jason/Sites/nginx-1.11.9/echo-nginx-module
</code></pre><h3 id="常用编译选项说明"><a href="#常用编译选项说明" class="headerlink" title="常用编译选项说明"></a>常用编译选项说明</h3><p>Nginx在编译时，运行期中与路径相关的各种参数</p>
<pre><code>--prefix=PATH                        #指向安装目录
--sbin-path=PATH                     #指向（执行）程序文件（nginx）
--conf-path=PATH                     #指向配置文件（nginx.conf）
--error-log-path=PATH                #指向错误日志目录
--http-log-path=PATH                 #指定访问复制目录
--pid-path=PATH                      #指向pid文件（nginx.pid）
--lock-path=PATH                     #指向lock文件（nginx.lock）（安装文件锁定，防止安装文件被别人利用，或自己误操作。）
--builddir=PATH                      #指向编译目录
--http-client-body-temp-path=PATH    #设定http客户端请求临时文件路径
--http-proxy-temp-path=PATH          #设定http代理临时文件路径
--http-fastcgi-temp-path=PATH        #设定http fastcgi临时文件路径
--http-uwsgi-temp-path=PATH          #设定http uwsgi临时文件路径
--http-scgi-temp-path=PATH           #设定http scgi临时文件路径

--user=USER                          #指定程序运行时的非特权用户
--group=USER                         #指定程序运行时的非特权用户组

--with-rtsig_module                  #启用rtsig模块支持（实时信号）
--with-file-aio                      #启用file aio支持（一种APL文件传输格式）
--with-ipv6                          #启用ipv6支持
--with-select_module                 #启用select模块支持（一种轮询模式,不推荐在高载环境下使用）禁用：--without-select_module
--with-poll_module                   #启用poll模块支持（功能与select相同，与select特性相同，为一种轮询模式,不推荐在高载环境下使用）
--with-http_ssl_module               #启用支持https请求，需已安装openssl
--with-http_realip_module            #启用ngx_http_realip_module支持（这个模块允许从请求标头更改客户端的IP地址值，默认为关）
--with-http_addition_module          #启用ngx_http_addition_module支持（作为一个输出过滤器，支持不完全缓冲，分部分响应请求）
--with-http_xslt_module              #启用ngx_http_xslt_module支持（过滤转换XML请求）
--with-http_image_filter_module      #启用支持传输JPEG/GIF/PNG 图片过滤，默认为不启用，gd库要用到
--with-http_sub_module               #启用ngx_http_sub_module支持（允许用一些其他文本替换nginx响应中的一些文本）
--with-http_dav_module               #启用ngx_http_dav_module支持（增加PUT,DELETE,MKCOL：创建集合,COPY和MOVE方法）
--with-http_flv_module               #启用ngx_http_flv_module支持（提供寻求内存使用基于时间的偏移量文件）
--with-http_gzip_static_module       #启用ngx_http_gzip_static_module支持（在线实时压缩输出数据流）
--with-http_random_index_module      #启用ngx_http_random_index_module支持（从目录中随机挑选一个目录索引）
--with-http_secure_link_module       #启用ngx_http_secure_link_module支持（计算和检查要求所需的安全链接网址）
--with-http_degradation_module       #启用ngx_http_degradation_module支持（允许在内存不足的情况下返回204或444码）
--with-http_stub_status_module       #启用ngx_http_stub_status_module支持（获取nginx自上次启动以来的工作状态）
--with-http_perl_module              #启用ngx_http_perl_module支持（该模块使nginx可以直接使用perl或通过ssi调用perl）

--with-mail                          #启用POP3/IMAP4/SMTP代理模块支持
--with-mail_ssl_module               #启用ngx_mail_ssl_module支持
--add-module=                        #启用外部模块支持
--with-cpu-opt=                      #指定编译的CPU，可用的值为: pentium,opteron, amd64, sparc32, sparc64, ppc64等
--with-pcre                          #启用pcre库（默认会自动去找rpm包安装的pcre库文件以及模块）
--with-pcre=                         #指向pcre库文件目录（如果是源码安装就需要指定，rpm包安装就不需要指定了）
--with-pcre-opt=                     #在编译时为pcre库设置附加参数
--with-perl_modules_path=            #设定perl模块路径
--with-perl=                         #设定perl库文件路径
--with-debug                         #启用debug日志
</code></pre><p>默认启用的选项（等同于默认启用的模块）</p>
<pre><code>--without-http                            #该模块用于http server功能
--without-http-cache                    #该模块用于http cache功能
--without-http_charset_module            #该模块用于重新编码web页面，但只能是一个方向--服务器端到客户端，并且只有一个字节的编码可以被重新编码
--without-http_gzip_module                #该模块同-with-http_gzip_static_module功能一样
--without-http_ssi_module                #该模块提供了一个在输入端处理处理服务器包含文件（SSI）的过滤器，目前支持SSI命令的列表是不完整的
--without-http_userid_module            #该模块用来处理用来确定客户端后续请求的cookies
--without-http_access_module            #该模块提供了一个简单的基于主机的访问控制。允许/拒绝基于ip地址
--without-http_auth_basic_module        #该模块是可以使用用户名和密码基于http基本认证方法来保护你的站点或其部分内容
--without-http_autoindex_module            #该模块用于自动生成目录列表，只在ngx_http_index_module模块未找到索引文件时发出请求
--without-http_geo_module                #该模块用于创建一些变量，其值依赖于客户端的IP地址
--without-http_map_module                #该模块用于使用任意的键/值对设置配置变量
--without-http_referer_module           #该模块用来过滤请求，拒绝报头中Referer值不正确的请求
--without-http_rewrite_module           #该模块允许使用正则表达式改变URI
--without-http_proxy_module             #该模块用于代理服务器
--without-http_fastcgi_module           #该模块允许Nginx与FastCGI进程交互，并通过传递参数来控制FastCGI进程工作，FastCGI一个常驻型的公共网关接口
--without-http_uwsgi_module             #该模块启用uwsgi协议，uWSGI服务器相关
--without-http_scgi_module              #该模块用来启用SCGI协议支持，SCGI协议是CGI协议的替代，它是一种应用程序与HTTP服务接口标准
--without-http_memcached_module         #该模块用来提供简单的缓存，以提高系统效率
--without-http_limit_zone_module        #该模块可以针对条件，进行会话的并发连接数控制
--without-http_limit_req_module         #该模块允许你对于一个地址进行请求数量的限制用一个给定的session或一个特定的事件
--without-http_empty_gif_module         #该模块在内存中常驻了一个1*1的透明GIF图像，可以被非常快速的调用）
--without-http_browser_module           #该模块用来创建依赖于请求报头的值
--without-http_split_clients_module     #该模块用来基于某些条件划分用户。条件如：ip地址、报头、cookies等等
--without-http_upstream_ip_hash_module  #该模块用于负载均衡
--without-mail_pop3_module              #该模块用于pop3协议，邮局协议
--without-mail_imap_module              #该模块用于邮件的imap协议，邮件接收协议
--without-mail_smtp_module              #该模块用于smtp协议，邮件发送协议
</code></pre><h3 id="添加模块（以添加echo模块为例）"><a href="#添加模块（以添加echo模块为例）" class="headerlink" title="添加模块（以添加echo模块为例）"></a>添加模块（以添加echo模块为例）</h3><p>1、下载echo模块echo-nginx-module<br>2、安装echo模块</p>
<pre><code>cd ./nginx-1.11.9

./configure
--prefix=/opt/local/var/run/nginx 
--sbin-path=/opt/local/sbin/nginx 
--conf-path=/opt/local/etc/nginx/nginx.conf 
--pid-path=/opt/local/var/run/nginx/nginx.pid 
--http-log-path=/opt/local/var/log/nginx/access.log 
--error-log-path=/opt/local/var/log/nginx/error.log 
--with-http_ssl_module 
--with-debug 
--add-module=/Users/jason/Sites/nginx-1.11.9/echo-nginx-module

make //不必make install，否则就是覆盖
</code></pre><p>3、替换已安装的nginx二进制文件</p>
<pre><code>cp /opt/local/sbin/nginx /opt/local/sbin/nginx.bak
cp ./objs/nginx /opt/local/sbin/nginx
</code></pre>]]></content>
      
        <categories>
            
            <category> nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx基本信息]]></title>
      <url>http://jasonhzy.github.io/2017/09/03/nginx/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Nginx是一个轻量级高性能的web服务器，它是为快速响应大量静态文件请求和高效利用系统资源而设计的。</p>
<a id="more"></a>
<h3 id="nginx-conf配置文件"><a href="#nginx-conf配置文件" class="headerlink" title="nginx.conf配置文件"></a>nginx.conf配置文件</h3><p>Nginx配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置）。<br>每部分包含若干个指令。他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承</p>
<pre><code>main部分设置的指令将影响其它所有部分的设置；
server部分的指令主要用于指定虚拟主机域名、IP和端口；
upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；
location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。
</code></pre><h3 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h3><pre><code># 运行Nginx进程的用户以及用户组
user  www www;

# Nginx开启的进程数，通常设置成和cpu的数量相等
worker_processes  1;
# worker_processes auto;
# 也可以指定哪个cpu分配给哪个进程（不常用）。
# 如果一定要设的话，用0和1指定分配方式。
# 下面的例子是给4个进程分配单独的核来运行，出现第5个进程是就随机分配了。
#worker_processes 4     # 4核CPU 
#worker_cpu_affinity 0001 0010 0100 1000

# 定义存储某类型的全局错误的日志位置
# nginx日志分为很多级别 [debug | info | notice | warn | error | crit | alert | emerg]
#error_log  logs/error.log;
#error_log  logs/error.log  notice;

# 指定进程ID（pid）存放的路径 
#pid        logs/nginx.pid;

#定义白名单ip列表变量
geo $whiteip_list {     
    default 1;
    127.0.0.1 0;
    192.168.0.167 0;
    192.168.0.48 0;
}

#用map指令映射将白名单列表中客户端请求ip为空串 
map $whiteip_list $limit {
    1 $binary_remote_addr;
    0 &quot;&quot;;
}

#当某个IP访问example.com这个域名时，此IP得并发连接超过10，则会报503（Service Temporarily Unavailable），
#表示服务暂时不可用，此时会返回给用户我们事先定义好错误页面。由“limit_conn conn_ip 10;”实现。
limit_conn_zone $limit zone=conn_ip:10m;
#当访问example.com这个域名的连接总数超过1000时，同样会报503，返回定义好的错误页面。
#由“limit_conn conn_server 1000;”实现
limit_conn_zone $limit zone=conn_server:10m;
#当达到最大限制连接数后，记录日志的等级
limit_conn_log_level info;  #[info | notice | warn | error(默认)]
#当超过限制时，返回的状态码（默认是503），code值只能设置在400到599之间
limit_conn_status 503;

#利用令牌桶原理，来限制用户的连接频率
#rate每个IP平均处理的请求频率为每秒一次，此值可以设置成每秒处理请求数或者每分钟处理请求数，但必须是整数。
#所以如果你需要指定每秒处理少于1个的请求，2秒处理一个请求，可以使用 “30r/m”。
limit_req_zone  $limit zone=req_ip:10m rate=10r/s;

events {
    #use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];
    #epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。
    use epoll;
    #每个进程可以处理的最大连接数，理论上每台nginx服务器的最大连接数为worker_processes*worker_connections。
    #理论值：worker_rlimit_nofile/worker_processes
    #注意：最大客户数也由系统的可用socket连接数限制（~ 64K），所以设置不切实际的高没什么好处
    worker_connections  1024;
}

http {
    # 引入文件 mime.types，是一个文件扩展名与文件类型的映射表
    include       mime.types;
    # 指定默认MIME类型为二进制字节流(即下载文件)  
    default_type  application/octet-stream;
    #default_type  text/html;

    # 定义输出日志的格式
    # 1.$remote_addr 与$http_x_forwarded_for 用以记录客户端的ip地址；
    # 2.$remote_user ：用来记录客户端用户名称；
    # 3.$time_local ：用来记录访问时间与时区；
    # 4.$request  ：用来记录请求的url与http协议；
    # 5.$status ：用来记录请求状态； 
    # 6.$body_bytes_sent ：记录发送给客户端文件主体内容大小；
    # 7.$http_referer ：用来记录从那个页面链接访问过来的；
    # 8.$http_user_agent ：记录客户端浏览器的相关信息
    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;
    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;
    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;

    # 指定access_log的存放路径、格式和缓存大小
    #access_log  logs/access.log  main;

    # 隐藏nginx版本号
    ﻿server_tokens off;

    # ﻿﻿启用目录浏览
    autoindex on;
    # ﻿显示出文件的确切／大概大小：on确切大小，单位是bytes；off大概大小，单位是kB或者MB或者GB
    autoindex_exact_size off;
    # ﻿﻿off显示的文件时间为GMT时间，﻿on显示的文件时间为文件的服务器时间
    autoindex_localtime on; 

    # 用户认证
    # yum install httpd-tools               #适用centos
    # sudo apt-get install apache2-utils    #适用ubuntu
    # 生成用户密码文件
    # htpasswd -c /data/.htpasswd user1 
    auth_basic  &quot;User Login&quot;;
    auth_basic_user_file  /data/.htpasswd;

    # sendfile 指令用于指定 Nginx 是否调用Linux 的 sendfile 函数（zero copy 方式）来输出文件，提高文件传输效率 
    sendfile        on;

    # 是否允许使用socket的TCP_NOPUSH或TCP_CORK选项  
    #tcp_nopush     on;

    # 指定客户端连接保持活动的超时时间（单位：秒），超过时间，服务器会关闭连接  
    keepalive_timeout  65;

    # nginx是支持读取非nginx标准的用户自定义header的，但是需要在http或者server下开启
    # header的下划线支持(由于包含下划线被忽略掉，部署后就获取不到)
    # underscores_in_headers on;

    #客户端请求单个文件的最大字节数
    client_max_body_size 8m;
    #指定来自客户端请求头的hearerbuffer大小
    client_header_buffer_size 32k;
    #指定客户端请求中较大的消息头的缓存最大数量和大小。
    large_client_header_buffers 4 64k;

    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;

    #开启gzip压缩输出
    gzip on; 
    #最小压缩文件大小
    gzip_min_length 1k; 
    #压缩缓冲区
    gzip_buffers 4 16k;
    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_http_version 1.0;
    #压缩等级 1-9 等级越高，压缩效果越好，节约宽带，但CPU消耗大
    gzip_comp_level 2;
    #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    gzip_types text/plain application/x-javascript text/css application/xml;
    #前端缓存服务器缓存经过压缩的页面
    gzip_vary on;

    #反向代理
    #nginx跟后端服务器连接超时时间(代理连接超时)
    proxy_connect_timeout      5;
    #后端服务器数据回传时间(代理发送超时)
    proxy_send_timeout         5;
    #连接成功后，后端服务器响应时间(代理接收超时)
    proxy_read_timeout         60;
    #设置代理服务器（nginx）保存用户头信息的缓冲区大小
    proxy_buffer_size          16k;
    #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
    proxy_buffers              4 32k;
    #高负荷下缓冲大小（proxy_buffers*2）
    proxy_busy_buffers_size    64k;
    #设定缓存文件夹大小，大于这个值，将从upstream服务器传
    proxy_temp_file_write_size 64k;
    #反向代理缓存目录
    proxy_cache_path /data/proxy/cache levels=1:2 keys_zone=cache_one:500m inactive=1d max_size=1g;
    #levels=1:2 设置目录深度，第一层目录是1个字符，第2层是2个字符
    #keys_zone:设置web缓存名称和内存缓存空间大小
    #inactive:自动清除缓存文件时间。
    #max_size:硬盘空间最大可使用值。
    #指定临时缓存文件的存储路径(路径需和上面路径在同一分区)
    proxy_temp_path /data/proxy/temp

    #负载均衡服务器池
    upstream my_server_pool {
        #调度算法
        #1.轮循（默认）（weight轮循权值）
        #2.ip_hash：根据每个请求访问IP的hash结果分配。（会话保持）
        #3.fair:根据后端服务器响应时间最短请求。（upstream_fair模块）
        #4.url_hash:根据访问的url的hash结果分配。（需hash软件包）
        #参数：
        #down：表示不参与负载均衡
        #backup:备份服务器
        #max_fails:允许最大请求错误次数
        #fail_timeout:请求失败后暂停服务时间。
        server 192.168.1.109:80 weight=1 max_fails=2 fail_timeout=30;
        server 192.168.1.108:80 weight=2 max_fails=2 fail_timeout=30;
    }

    # 虚拟主机定义
    server {
        # 监听端口
        listen       80; 
        #listen     443;
        # 访问域名
        server_name  example.com;

        # 编码格式，若网页格式与此不同，将被自动转码
        #charset utf-8;

        # 虚拟主机访问日志定义
        #access_log  logs/host.access.log  main;

        # 申请的证书zip包中一般含有如下三个文件：
        # SSL 凭证(例如: ssl_certificate.crt,或称最终实体凭证, 公钥凭证或身份验证凭证)
        # 中继CA凭证(例如: IntermediateCA.crt, 或称信任链凭证或SSL凭证的签名者/发行人)
        # 私钥文件(例如: private.key, 生成凭证签章要求(CSR)的时候建立的)
        #
        # nginx的配置特殊地方: 需要合并SSL凭证和中继CA凭证, 即:
        #   cat ssl_certificate.crt IntermediateCA.crt &gt;&gt; your_domain_name.crt
        # 注意：-----END CERTIFICATE----------BEGIN CERTIFICATE-----需要调整为：
        #   -----END CERTIFICATE-----
        #   -----BEGIN CERTIFICATE-----
        # 否则启动时出错，即SSL: error:0906D066:PEM routines:PEM_read_bio:bad end line
        #
        ssl on;  
        #虚拟主机的证书文件  
        ssl_certificate /etc/ssl/your_domain_name.crt; #合并SSL凭证和中继CA凭证的文件
        #虚拟主机私钥文件  
        ssl_certificate_key /etc/ssl/your_domain_name.key; #私钥文件

        # 匹配URL
        location / {
            # 定义默认网站根目录位置
            root   html;
            # 定义首页索引文件的名称，按以下顺序匹配
            index  index.html index.htm index.php;

            #反向代理缓存设置命令(proxy_cache zone|off,默认关闭所以要设置)
            proxy_cache cache_one;
            #对不同的状态码缓存不同时间
            proxy_cache_valid 200 304 12h;
            #设置以什么样参数获取缓存文件名
            proxy_cache_key $host$uri$is_args$args;
            #后7端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr; 
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            #nginx反向代理隐藏响应头，多个代理情况下也可以写到http段里面
            proxy_hide_header X-Application-Context;
            #代理设置
            proxy_pass   http://my_server_pool; 
            #文件过期时间控制
            expires    1d;

            #限制某个IP来源的连接并发数，此处为10个
            limit_conn conn_ip 10;
            #限制某个虚拟服务器的总连接数，此处为1000个
            limit_conn conn_server 1000;
            #限制带宽, 每个连接只允许最大5kb/s的速度进行下载
            limit_rate 5k;

            #burst=5这个配置的意思是设置一个大小为5的缓冲区，当有大量请求（爆发）过来时，
            #超过了访问频次限制的请求可以先放到这个缓冲区内，如果此缓冲区也满了则会返回503
            #nodelay 如果设置此参数，超过访问频次而且缓冲区也满了的时候就会直接返回503，如果没有设置，则所有请求会等待排队
            limit_req zone=req_ip burst=5;
            #limit_req zone=req_ip burst=5 nodelay;
        }

        location /download {
            #限制IP访问
            deny 192.168.0.2；
            allow 192.168.0.0/24;
            allow 192.168.1.1;
            deny all;
        }

        #静态文件，nginx自己处理
        location ~ ^/(images|javascript|js|css|flash|media|static)/ {
            #过期30天，静态文件不怎么更新，过期可以设大一点，
            #如果频繁更新，则可以设置得小一点。
            expires 30d;
        }

        # 发生 404 错误时返回 404.html页面
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        # 发生 50x 错误时使用 50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # 将 PHP 脚本请求全部转发给 FastCGI（127.0.0.1:9000）处理
        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            # 引入文件，fastcgi的默认配置参数
            include        fastcgi_params;
        }

        # 禁止访问 .ht 页面
        # deny access to .htaccess files, if Apache&apos;s document root
        # concurs with nginx&apos;s one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
}
</code></pre><h3 id="location模块"><a href="#location模块" class="headerlink" title="location模块"></a>location模块</h3><p>匹配模式及顺序</p>
<pre><code>location = /uri 　　　=开头表示精确匹配，只有完全匹配上才能生效。
location ^~ /uri 　　^~ 开头对URL路径进行前缀匹配，并且在正则之前。非正则匹配
location ~ pattern 　~开头表示区分大小写的正则匹配。!~为区分大小写不匹配的正则
location ~* pattern 　~*开头表示不区分大小写的正则匹配。!~*为不区分大小写不匹配的正则
location /uri 　　　　不带任何修饰符，也表示前缀匹配，但是在正则匹配之后。
location / 　　　　　通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default。
</code></pre><p>注意：<br>    前缀匹配，如果有包含关系时，按最大匹配原则进行匹配。比如在前缀匹配：location /dir1与location /dir1/dir2，如有请求<a href="http://localhost/dir1/dir2/file将最终匹配到location" target="_blank" rel="noopener">http://localhost/dir1/dir2/file将最终匹配到location</a> /dir1/dir2</p>
<p>优先级：<br>    (location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</p>
<h3 id="rewrite指令"><a href="#rewrite指令" class="headerlink" title="rewrite指令"></a>rewrite指令</h3><p>rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。<br>rewrite只能放在server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用，<br>例如 <a href="http://seanlook.com/a/we/index.php?id=1&amp;u=str" target="_blank" rel="noopener">http://seanlook.com/a/we/index.php?id=1&amp;u=str</a> 只对/a/we/index.php重写。<br>语法rewrite regex replacement [flag] 。执行顺序是：</p>
<pre><code>1.执行server块的rewrite指令
2.执行location匹配
3.执行选定的location中的rewrite指令
</code></pre><p>rewrite指令的最后一项参数为flag标记，支持flag标记有：</p>
<pre><code>1.last  相当于apache里面的[L]标记，浏览器地址栏URL地址不变。若不指明last或者break，默认是last。
    会转到匹配新的location，其他的rewrite语句和其他语句不会执行
2.break  本条规则匹配完成后，继续完成本location中非rewrite的语句，而不跳转到新的location，
    浏览器地址栏URL地址不变
3.redirect  返回302临时重定向，浏览器地址会显示跳转后的URL地址。
4.permanent  返回301永久重定向， 浏览器地址会显示跳转后的URL地址。
</code></pre><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301, 302的原因了。<br>这里last和break区别有点难以理解：</p>
<pre><code>last 一般写在server和if中，而break一般使用在location中
last 不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配
break和last 都能组织继续执行后面的rewrite指令
</code></pre><p>例如：</p>
<pre><code>server {
   listen 80 default_server;
   server_name example.com;
   root www;

   location /break/ {
       rewrite ^/break/(.*) /test/$1 break;
       echo &quot;break page&quot;;
   } 

   location /last/ {
        rewrite ^/last/(.*) /test/$1 last;
        echo &quot;last page&quot;;
   }    

   location /test/ {
      echo &quot;test page&quot;;
   }
}
</code></pre><p>请求1：<a href="http://example.com/break/***，输出&quot;break" target="_blank" rel="noopener">http://example.com/break/***，输出&quot;break</a> page”<br>请求2：<a href="http://example.com/last/***，输出&quot;test" target="_blank" rel="noopener">http://example.com/last/***，输出&quot;test</a> page”</p>
<h3 id="if判断指令"><a href="#if判断指令" class="headerlink" title="if判断指令"></a>if判断指令</h3><p>语法为 if(condition) {…}，对给定的条件 condition 进行判断。如果为真，大括号内的 rewrite 指令将被执行，<br>if 条件(conditon)可以是如下任何内容：</p>
<pre><code>当表达式只是一个变量时，如果值为空或任何以 0 开头的字符串都会当做 false
直接比较变量和内容时，使用 = 或 !=
~ 正则表达式匹配，~* 不区分大小写的匹配，!~ 区分大小写的不匹配
-f 和 !-f 用来判断是否存在文件
-d 和 !-d 用来判断是否存在目录
-e 和 !-e 用来判断是否存在文件或目录
-x 和 !-x 用来判断文件是否可执行
</code></pre><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><pre><code>$args ： #这个变量等于请求行中的参数，同$query_string
$content_length ： 请求头中的Content-length字段。
$content_type ： 请求头中的Content-Type字段。
$document_root ： 当前请求在root指令中指定的值。
$host ： 请求主机头字段，否则为服务器名称。
$http_user_agent ： 客户端agent信息
$http_cookie ： 客户端cookie信息
$limit_rate ： 这个变量可以限制连接速率。
$request_method ： 客户端请求的动作，通常为GET或POST。
$remote_addr ： 客户端的IP地址。
$remote_port ： 客户端的端口。
$remote_user ： 已经经过Auth Basic Module验证的用户名。
$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。
$scheme ： HTTP方法（如http，https）。
$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。
$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。
$server_name ： 服务器名称。
$server_port ： 请求到达服务器的端口号。
$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。
$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。
$document_uri ： 与$uri相同。
</code></pre>]]></content>
      
        <categories>
            
            <category> nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql Explain使用分析]]></title>
      <url>http://jasonhzy.github.io/2017/06/14/mysql-explain/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>MySQL提供了一个explain命令, 它可以对select语句进行分析, 并输出select执行的详细信息, 以供开发人员针对查询性能进行优化.explain命令用法十分简单, 在select语句前加上explain就可以了, 例如:</p>
<pre><code>explain SELECT * FROM bank where id = 1;
</code></pre><a id="more"></a>
<p>explain命令的输出内容大致如下:<br><img src="/images/mysql-explain/explain-style.png" alt="explain-style"></p>
<h3 id="explain各列详解"><a href="#explain各列详解" class="headerlink" title="explain各列详解"></a>explain各列详解</h3><p>一般12个字段(其中partitions和filtered 5.5版本普通模式下没有），会对重要的字段内容进行分析说明:</p>
<h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>表示SELECT查询标识符，用于标识执行顺序，基本是数字；执行顺序原则：id数据值大的优先执行,id值相同的从上往下顺序执行</p>
<h4 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h4><p>select_type 表示了查询的类型, 它的常用取值有: </p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
<th>样例</th>
</tr>
</thead>
<tbody>
<tr>
<td>SIMPLE</td>
<td>简单查询，标识查询不包含任何子查询或者UNION语句</td>
<td>explain select * from tabname</td>
</tr>
<tr>
<td>PRIMARY</td>
<td>复杂查询的外层查询，一般都在第一行，代表这是一个复杂查询的最外层查询</td>
<td></td>
</tr>
<tr>
<td>UNION</td>
<td>复杂查询中，UNION子句第二个或之后的子查询（第一个被标为PRIMARY）</td>
<td>explain select <em> from tabname union select </em> from tabname</td>
</tr>
<tr>
<td>SUBQUERY</td>
<td>复杂查询的子查询，指不在FROM子句中的那些</td>
<td>explain select * from tabname where id=(select max(id) from tabname)</td>
</tr>
<tr>
<td>DEPENDENT SUBQUERY</td>
<td>复杂查询中，依赖外部查询的子查询</td>
<td>explain select * from tabname where id not in(select id from tabname)</td>
</tr>
<tr>
<td>DERIVED</td>
<td>在FROM子句中的子查询</td>
<td></td>
</tr>
<tr>
<td>DEPENDENT UNION</td>
<td>复杂查询中，依赖外部查询的UNION子句查询</td>
<td>explain select * from tabname where id in (select id from tabname union select id from tabname)</td>
</tr>
<tr>
<td>UNION RESULT</td>
<td>复杂查询中，UNION的结果，这是一个从匿名临时表检索最终结果的查询</td>
<td></td>
</tr>
<tr>
<td>MATERIALIZED</td>
<td>复杂查询中，物化视图子句</td>
<td></td>
</tr>
<tr>
<td>UNCACHEABLE SUBQUERY</td>
<td>不可缓存的子查询</td>
<td></td>
</tr>
<tr>
<td>UNCACHEABLE UNION</td>
<td>不可缓存的UNION子查询</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><p>表示查询涉及的表或衍生表,如果指定了别名就显示的别名。&lt;derivedN&gt;N就是id值，指该id值对应的那一步操作的结果。还有&lt;unionM,N&gt;这种类型，出现在UNION语句中<br>&lt;derivedN&gt;类型, eg:<br>explain select *  from (select 1) b;</p>
<p>&lt;unionM,N&gt;类型, eg:<br>explain select * from bank where id in  (select id from bank where id = 1 union select id from bank where id = 2);</p>
<h4 id="partitions"><a href="#partitions" class="headerlink" title="partitions"></a>partitions</h4><p>针对MySQL内置分区表，表示当前使用了哪些子分区；用于确认查询对分区的过滤效率</p>
<h4 id="type-重要"><a href="#type-重要" class="headerlink" title="type [重要]"></a>type [重要]</h4><p>常见以下几种类型，查询效率理论上由好到差<br><strong>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</strong><br>详细说明每种常见type表示的含义：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>system</td>
<td>被查询表中有且只有一条数据且为系统表.这是const连接类型的特例</td>
</tr>
<tr>
<td>const</td>
<td>针对主键或唯一索引的等值查询扫描，最多只返回一行数据，eg：SELECT * FROM tbl_name WHERE primary_key = 1</td>
</tr>
<tr>
<td>eq_ref</td>
<td>当使用了主键索引，唯一索引等只会唯一地找出一条记录的情况，这种类型就会出现，这种类型的性能相当好。</td>
</tr>
<tr>
<td>ref</td>
<td>当使用除了主键索引、唯一索引以外的索引来匹配值时，或者使用了最左前缀索引（包括唯一索引和主键的），就会出现这个类型</td>
</tr>
<tr>
<td>ref_or_null</td>
<td>连接类型类似ref，只是搜索的行中包含NULL值MySQL做了额外的查找。eg: SELECT * FROM ref_table WHERE key_column = ‘1’ or key_column IS NULL</td>
</tr>
<tr>
<td>fulltext</td>
<td>使用全文索引时出现。</td>
</tr>
<tr>
<td>index_merge</td>
<td>多个索引同时优化，本质上是每个索引单独使用，再通过某种算法来合并结果</td>
</tr>
<tr>
<td>index_subquery</td>
<td>索引替换子查询，如果有这样的语句SELECT * FROM table WHERE value IN(SELECT key_column FROM table where xxx)，IN后面的语句会被索引直接代替，来提高效率</td>
</tr>
<tr>
<td>unique_subquery</td>
<td>唯一索引替换子查询，和index_subquery类似，只不过是使用唯一索引来替换IN后面的子句</td>
</tr>
<tr>
<td>range</td>
<td>范围扫描，比index强一些，因为它是从索引的某个点开始的，用不着遍历全部索引。一些带有BETWEEN，各种比较符号的语句容易出现这种类型，但是要特别注意IN和OR，这也会显示成range，但是其性能跟index差不多</td>
</tr>
<tr>
<td>index</td>
<td>按索引顺序全表扫描，通常性能和全表扫描没什么区别，除非Extra列中有”Using index”字样，那说明使用了覆盖索引，这种情况下要快于ALL，因为直接扫描索引就能获取数据，而索引通常比表小的多</td>
</tr>
<tr>
<td>ALL</td>
<td>全表扫描。最差的一种类型，从数据表中逐行查找数据，应考虑查询优化了！</td>
</tr>
</tbody>
</table>
<h4 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h4><p>表示MySQL查询优化器发现当前查询可能被使用地索引，但不一定能会利用，如果possible_key的列举的索引越多，往往说明索引创建不合理，查询效率不是最高效；</p>
<h4 id="key"><a href="#key" class="headerlink" title="key"></a>key</h4><p>显示MySQL实际决定使用的键（索引）。如果没有选择索引，键是NULL。注意：对于组合索引，查询可能只使用其部分字段</p>
<h4 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h4><p>表示查询优化器使用了索引的字节数，可以评估组合索引是否完全被使用，或只有最左部分字段使用<br>key_len字节的计算规则：</p>
<pre><code>字符串
    char(n): n 字节长度
    varchar(n): 如果是 utf8 编码, 则是 3 n + 2字节; 如果是 utf8mb4 编码, 则是 4 n + 2 字节.
数值类型:
    TINYINT: 1字节
    SMALLINT: 2字节
    MEDIUMINT: 3字节
    INT: 4字节
    BIGINT: 8字节
时间类型
    DATE: 3字节
    TIMESTAMP: 4字节
    DATETIME: 8字节
字段属性: 
    NULL 属性 占用一个字节. 如果一个字段是 NOT NULL 的, 则没有此属性.
</code></pre><p>key_len的长度计算方式例如：</p>
<pre><code>varchr(10)变长字段且允许NULL      : 10*(Char Set：utf8=3,gbk=2,latin1=1)+1(NULL)+2(变长字段)
varchr(10)变长字段且不允许NULL    : 10*(Char Set：utf8=3,gbk=2,latin1=1)+2(变长字段)
char(10)固定字段且允许NULL        : 10*(Char Set：utf8=3,gbk=2,latin1=1)+1(NULL)
char(10)固定字段且允许NULL        : 10*(Char Set：utf8=3,gbk=2,latin1=1)
</code></pre><p>实例如下:</p>
<p>数据库bank表结构：</p>
<pre><code>CREATE TABLE IF NOT EXISTS `bank` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `bank_name` varchar(100) NOT NULL DEFAULT &apos;&apos;,
  `bank_no` varchar(30) DEFAULT &apos;&apos;,
  `parent_bank_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `foreignkey` (`parent_bank_id`),
  KEY `unionkey` (`bank_name`,`bank_no`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
</code></pre><p>explain执行结果：</p>
<p><img src="/images/mysql-explain/explain-keylen.png" alt="explain-keylen"></p>
<p>计算的key_len即 100 ＊ 3 ＋ 2(如果bank_name允许null，则为100 ＊ 3 ＋ 2 ＋ 1)</p>
<h4 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h4><p>MySQL查询优化器根据统计信息，估算SQL要查找到结果集需要扫描读取的数据行数; 这个值非常直观显示SQL的效率好坏，原则rows越少越好</p>
<h4 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h4><p>EXplain 中的很多额外的信息会在 Extra 字段显示, 常见的有以下几种:</p>
<table>
<thead>
<tr>
<th>Extra</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>using where</td>
<td>使用过滤条件</td>
</tr>
<tr>
<td>using index</td>
<td>查询是覆盖了索引的</td>
</tr>
<tr>
<td>using temporary</td>
<td>使用临时表存储结果集，常见于排序和分组查询</td>
</tr>
<tr>
<td>using filesort</td>
<td>有排序</td>
</tr>
<tr>
<td>not exists</td>
<td>mysql优化了left join，一旦它找到了匹配left join标准的行， 就不再搜索了</td>
</tr>
<tr>
<td>distinct</td>
<td>查找到第一个匹配的行之后，mysql则会停止对当前行的搜索</td>
</tr>
<tr>
<td>impossible where</td>
<td>where子句总数失败的查询</td>
</tr>
<tr>
<td>impossible having</td>
<td>having子句总数失败的查询</td>
</tr>
<tr>
<td>using join buffer</td>
<td>使用连接缓存</td>
</tr>
<tr>
<td>select tables optimized away</td>
<td>没有groupby情况下使用min(),max(),或者count(*)</td>
</tr>
<tr>
<td>using index for group-by</td>
<td>与using index类似，在使用group-by时可从索引中找到字段</td>
</tr>
</tbody>
</table>
<p>参考资料<br><a href="https://dev.mysql.com/doc/refman/5.6/en/explain-output.html#explain-extra-information" target="_blank" rel="noopener">EXPLAIN Output Format</a><br><a href="http://blog.csdn.net/kk185800961/article/details/49179619" target="_blank" rel="noopener">MySQL EXPLAIN 实践汇总</a><br><a href="https://zhuoroger.github.io/2016/08/11/mysql-explain/" target="_blank" rel="noopener">细说MySQL Explain和Optimizer Trace简介</a><br><a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="noopener">MySQL性能优化神器 Explain使用分析</a><br><a href="/download/mysql.ppt">MySQL总结PPT</a></p>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP GD库合成图片]]></title>
      <url>http://jasonhzy.github.io/2017/01/07/php-generate-qr/</url>
      <content type="html"><![CDATA[<p>引入phpqrcode，并结合php提供的类库gd进行图片合成</p>
<a id="more"></a>
<h4 id="安装GD库"><a href="#安装GD库" class="headerlink" title="安装GD库"></a>安装GD库</h4><ol>
<li>终端内运行php -m，可以查看到是否安装gd库</li>
<li>安装gd库<br> apt-get install php5-gd     #ubuntu<br> yum install php5-gd      #centos</li>
</ol>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span>: generate qrcode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">define(<span class="string">"QRCODE_PATH"</span>, dirname(<span class="keyword">__FILE__</span>));</span><br><span class="line"><span class="keyword">include</span> <span class="string">'phpqrcode/qrlib.php'</span>;</span><br><span class="line"><span class="comment">//download zip file</span></span><br><span class="line"><span class="comment">//download($zipName);</span></span><br><span class="line"></span><br><span class="line">generate_qr(<span class="string">'123456'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_qr</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $font = QRCODE_PATH.<span class="string">'/hwxh.ttf'</span>;</span><br><span class="line">    $num = str_pad($str, <span class="string">'6'</span>, <span class="string">'0'</span>, STR_PAD_LEFT);</span><br><span class="line">    $txt = <span class="string">'收   银   台   :   '</span> .trim(preg_replace(<span class="string">'/(\d)/'</span>, <span class="string">'$1   '</span>, $num));</span><br><span class="line">    $url = <span class="string">'https://example.com/'</span> . $num; <span class="comment">//二维码内容</span></span><br><span class="line">    $qrcode = <span class="string">"/tmp/&#123;$num&#125;_qr.png"</span>;</span><br><span class="line"></span><br><span class="line">    $level = <span class="string">'L'</span>;<span class="comment">//容错级别</span></span><br><span class="line">    $size = <span class="number">10</span>;<span class="comment">//生成图片大小</span></span><br><span class="line">    QRcode::png($url, $qrcode, $level, $size, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二维码宽/高度</span></span><br><span class="line">    $qrcode = imagecreatefrompng($qrcode);</span><br><span class="line">    $qrcode_w = imagesx($qrcode);</span><br><span class="line">    $qrcode_h = imagesy($qrcode);</span><br><span class="line"></span><br><span class="line">    $bg_w = <span class="number">768</span>; <span class="comment">// 背景图片宽度</span></span><br><span class="line">    $bg_h = <span class="number">800</span>; <span class="comment">// 背景图片高度</span></span><br><span class="line"></span><br><span class="line">    $bg_img = imagecreatetruecolor($bg_w, $bg_h);</span><br><span class="line">    $white = imagecolorallocate($bg_img, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    imagefill($bg_img, <span class="number">0</span>, <span class="number">0</span>, $white);</span><br><span class="line"></span><br><span class="line">    imagecopyresampled($bg_img, $qrcode, <span class="number">15</span>, <span class="number">-10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">740</span>, <span class="number">740</span>, $qrcode_w, $qrcode_h);</span><br><span class="line"></span><br><span class="line">    $black = imagecolorallocate($bg_img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    $fontsize = <span class="number">28</span>;</span><br><span class="line">    $fontbox = imagettfbbox($fontsize, <span class="number">0</span>, $font, $txt);</span><br><span class="line">    imagettftext($bg_img, $fontsize, <span class="number">0</span>, ceil(($bg_w - $fontbox[<span class="number">2</span>])/<span class="number">2</span>), $bg_w + <span class="number">5</span>, $black, $font, $txt);</span><br><span class="line"></span><br><span class="line">    $qr =  <span class="string">"/tmp/qr_$num.png"</span>;</span><br><span class="line">    imagepng($bg_img, $qr);</span><br><span class="line">    imagedestroy($qrcode);</span><br><span class="line">    imagedestroy($bg_img);</span><br><span class="line"></span><br><span class="line">    $fp  = fopen($qr, <span class="string">'rb'</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改图片分辨率</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    $base64= <span class="string">'data:image/png;base64,'</span>.base64_encode(fread($fp, filesize($qr)));</span><br><span class="line">    $file = file_get_contents($base64);</span><br><span class="line">    $filename = <span class="string">"$num.png"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据块长度为9</span></span><br><span class="line">    $len = pack(<span class="string">"N"</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="comment">//数据块类型标志为pHYs</span></span><br><span class="line">    $sign = pack(<span class="string">"A*"</span>, <span class="string">"pHYs"</span>);</span><br><span class="line">    <span class="comment">//X方向和Y方向的分辨率均为300DPI（1像素/英寸=39.37像素/米），单位为米（0为未知，1为米）</span></span><br><span class="line">    $data = pack(<span class="string">"NNC"</span>, <span class="number">300</span> * <span class="number">39.37</span>, <span class="number">300</span> * <span class="number">39.37</span>, <span class="number">0x01</span>);</span><br><span class="line">    <span class="comment">//CRC检验码由数据块符号和数据域计算得到</span></span><br><span class="line">    $checksum = pack(<span class="string">"N"</span>, crc32($sign . $data));</span><br><span class="line">    $phys = $len . $sign . $data . $checksum;</span><br><span class="line"></span><br><span class="line">    $pos = strpos($file, <span class="string">"pHYs"</span>);</span><br><span class="line">    <span class="keyword">if</span> ($pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//修改pHYs数据块</span></span><br><span class="line">        $file = substr_replace($file, $phys, $pos - <span class="number">4</span>, <span class="number">21</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//IHDR结束位置（PNG头固定长度为8，IHDR固定长度为25）</span></span><br><span class="line">        $pos = <span class="number">33</span>;</span><br><span class="line">        <span class="comment">//将pHYs数据块插入到IHDR之后</span></span><br><span class="line">        $file = substr_replace($file, $phys, $pos, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    file_put_contents(QRCODE_PATH.<span class="string">"/images/$filename"</span>, $file);</span><br><span class="line">    <span class="comment">//header("Content-type: image/png");</span></span><br><span class="line">    <span class="comment">//header('Content-Disposition: attachment; filename="' . $filename . '"');</span></span><br><span class="line"></span><br><span class="line">    unlink(<span class="string">"/tmp/&#123;$num&#125;_qr.png"</span>);</span><br><span class="line">    unlink(<span class="string">"/tmp/qr_$num.png"</span>);</span><br><span class="line">    <span class="comment">//	echo $file;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span><span class="params">($zipName)</span></span>&#123;</span><br><span class="line">    <span class="comment">//实例化zipArchive类</span></span><br><span class="line">    $zip = <span class="keyword">new</span> zipArchive();</span><br><span class="line">    <span class="keyword">if</span>(!$zip-&gt;open($zipName, ZIPARCHIVE::CREATE))&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">'不能下载'</span>);</span><br><span class="line">    &#125; <span class="comment">//打开的方式来进行创建 若有则打开 若没有则进行创建</span></span><br><span class="line">    <span class="comment">//循环将要下载的文件路径添加到压缩包</span></span><br><span class="line">    $files = glob(QRCODE_PATH.<span class="string">'/images/*'</span>);</span><br><span class="line">    <span class="keyword">foreach</span> ($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">        <span class="keyword">if</span>(file_exists($file))&#123;</span><br><span class="line">            $zip-&gt;addFile($file, basename($file));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭压缩包</span></span><br><span class="line">    $zip-&gt;close();</span><br><span class="line"><span class="comment">//    //实现文件的下载</span></span><br><span class="line"><span class="comment">//    header('Content-Type:Application/zip');</span></span><br><span class="line"><span class="comment">//    header('Content-Disposition:attachment; filename="' . basename($zipName) . '"');</span></span><br><span class="line"><span class="comment">//    header('Content-Length:' . filesize($zipName));</span></span><br><span class="line"><span class="comment">//    readfile($zipName);</span></span><br><span class="line"><span class="comment">//    //删除生成的压缩文件</span></span><br><span class="line"><span class="comment">//    unlink($zipName);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="/images/phpqrcode.png" alt="Example"></p>
<p>参考资料<br><a href="http://phpqrcode.sourceforge.net/" target="_blank" rel="noopener">phpqrcode</a><br><a href="/download/hwxh.ttf">字体下载</a></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> QRcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 配置LAMP环境]]></title>
      <url>http://jasonhzy.github.io/2016/09/27/ubuntu-install/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="/images/ubuntu-lamp.jpg" alt="ubuntu lamp"></p>
<p>不同版本的ubuntu，所提供源不同，自然所包含的php、mysql、apache等的版本也是不同的，安装的时候需要选择相应的版本进行安装，如果提供的不能满足需求，需要手动添加源（即/etc/apt/sources.list下添源链接或者add-apt-repository命令添加PPA源）</p>
<a id="more"></a>
<p>Apache2目录结构：</p>
<pre><code>apache2
|--apache2.conf
|--conf-available
|--conf-enabled
|--conf.d
|--envvars
|--http.conf
|--magic
|--mods-available
|--mods-enabled
|--ports.conf
|--sites-avaliable
|--sites-enabled
</code></pre><ul>
<li>apache2.conf: 主要配置文件</li>
<li>envvars: Apache2环境变量设置，例如apache的用户和组</li>
<li>httpd.conf：遗留的Apache2主要配置文件。这个文件是空的，其中的配置选项都转移到其他配置文件里了</li>
<li>ports.conf: 监听 80 端口（默认HTTP通信端口）和 443 端口（SSL支持）如果你想 apache 监听其他端口，只需添加更多的 Listen 指令</li>
<li>conf.d/: 用来控制Apache的一些特殊配置，比如SSL配置。</li>
<li>sites-available/: web站点的虚拟主机文件，不同的请求对应不同的内容，但并不表示都正在使用</li>
<li>sites-enabled/: 包含正在使用的虚拟主机的定义，通常只包含到sites-available目录下文件的符号链接。</li>
<li>mods-available: 目录包含模块和模块配置文件，不是所有的模块都有配置文件 </li>
<li>mods-enabled: 持有/etc/apache2/mods-available目录下文件的链接，当该目录下有一个模块文件和其配置文件，那么Apache重启后该模块将生效</li>
</ul>
<h3 id="Apache2-conf"><a href="#Apache2-conf" class="headerlink" title="Apache2.conf"></a>Apache2.conf</h3><p>主要分成三部分，全局配置、默认服务器配置和虚拟主机配置，在Ubuntu系统下，这个文件主要负责全局配置，默认服务器和虚拟主机可以通过Include语句来处理。</p>
<p>全局配置</p>
<p>Timeout: 默认设置为300，意思是服务器用300s来处理每个请求，即接收和发送的超时时间<br>KeepAlive: 设置为On，将允许同个客户端每个连接一直保持来处理多个请求(HTTP长连接)<br>MaxKeepAliveRequests: 设置每个连接最多能处理多少个单独的请求<br>KeepAliveTimeout: 参数设置下一个请求来之前来等待多久，超过这个时间自动关闭这个connection</p>
<p>MPM配置</p>
<p>MPM（Multi-Processing Module，多进程处理模块）模式，主要包括三种稳定的模式，分别是prefork，worker和event，它们同时也代表这Apache的演变和发展</p>
<ul>
<li>event：这个MPM适用于需要有大量持续连接的(KeepAlive)的情况，KeepAlive的好处相信大家都知道，可以在同一个TCP连接中响应多次请求，这种请求方式可以使一个包含很多元素（图片，CSS，etc）的HTML网页加速一半以上。在配置文件中设置KeepAlive为On，就可以开启KeepAlive。</li>
<li>perfork：实现了一个非线程的MPM，兼容1.3，虽然速度不是很快，但是非常稳定，能够隔离每一个请求。perfork顾名思义，就是主进程先派生出一堆子进程，这样新的请求来了以后不需要等待服务器产生子进程所花的时间。使用perfork最重要的是设置MacClients的值，要足够大以发挥很好的性能，但是不能太高防止内存爆掉。</li>
<li>worker：Apache2的新MPM。多进程+多线程，资源占用小的同时也比perfork要高效的多，是未来Apache2的发展趋势吧。该MPM重要的是两个选项：MaxClients和ThreadsPerChild。ThreadsPerChild用来每个子进程允许建立的线程数，MaxClients用来控制允许建立的总线程数。</li>
</ul>
<p>Apache的模式，可以使用httpd -V命令来查看:</p>
<pre><code>Server version: Apache/2.4.18 (Unix)
Server built:   Feb 20 2016 20:03:19
Server&apos;s Module Magic Number: 20120211:52
Server loaded:  APR 1.4.8, APR-UTIL 1.5.2
Compiled using: APR 1.4.8, APR-UTIL 1.5.2
Architecture:   64-bit
Server MPM:     prefork
threaded:     no
    forked:     yes (variable process count)
</code></pre><p>综上所述，如果需要更好的伸缩性，选择worker或event，如果需要更好的稳定性和兼容性，选择perfork。如果无法评估自己的需要，不妨直接选择worker</p>
<p>如果需要切换模式，可以通过如下方法来切换：</p>
<pre><code>sudo a2dismod mpm_prefork
sudo a2enmod mpm_event
sudo service apache2 restart #重启apache2
</code></pre><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>php安装</p>
<pre><code>sudo apt-get install php5.6 php5.6-common php5.6-curl php5.6-gd php5.6-mcrypt php5.6-xml 
                    php5.6-bcmath php5.6-mbstring php5.6-mysql
</code></pre><p>mysql安装</p>
<pre><code>sudo apt-get install mysql mysql-server
</code></pre><p>apache安装</p>
<pre><code>sudo apt-get install apache2
</code></pre><p>安装对脚本语言的支持</p>
<pre><code>sudo apt-get install libapache2-mod-php5
</code></pre><h3 id="Apache中启用和禁用网站和模块"><a href="#Apache中启用和禁用网站和模块" class="headerlink" title="Apache中启用和禁用网站和模块"></a>Apache中启用和禁用网站和模块</h3><p>启用和禁用网站</p>
<pre><code>sudo a2ensite 虚拟主机文件名(example.com.conf)
sudo a2dissite 虚拟主机文件名(example.com.conf)
</code></pre><p>启用和禁用模块</p>
<pre><code>sudo a2enmod 模块配置文件名
sudo a2dismod  模块配置文件名
</code></pre><p>启用用户文件夹实现文件服务器的功能</p>
<p>1.使用如下命令启用userdir模块</p>
<pre><code>sudo a2enmod userdir
</code></pre><p>2.userdir.conf配置userdir模块</p>
<pre><code>sudo vim /etc/apache2/mods-enabled/userdir.conf
</code></pre><p>内容如下，把public_html改为你的个人文件夹名称，如果不存在则创建：</p>
<pre><code>&lt;IfModule mod_userdir.c&gt;
    UserDir public_html
    UserDir disabled root

    &lt;Directory /home/*/public_html&gt;
        AllowOverride All
        Options MultiViews Indexes SymLinksIfOwnerMatch
        &lt;Limit GET POST OPTIONS&gt;
            # Apache &lt;= 2.2:
            Order allow,deny
            Allow from all

            # Apache &gt;= 2.4:
            #Require all granted
        &lt;/Limit&gt;
        &lt;LimitExcept GET POST OPTIONS&gt;
            # Apache &lt;= 2.2:
            Order deny,allow
            Deny from all

            # Apache &gt;= 2.4:
            #Require all denied
        &lt;/LimitExcept&gt;
    &lt;/Directory&gt;
&lt;/IfModule&gt;
</code></pre><p>3.创建个人文件夹并重启APache</p>
<pre><code>sudo service apache2 restart #重启
mkdir /home/$USER/public_html
</code></pre><p>4.给你的文件添加访问权限</p>
<p>上面的AllowOverride All改为AllowOverride AuthConfig,然后给你的服务器添加认证用户，认证用户保存在/var/www/passwd/中，需要使用htpasswd命令来添加用户，如下所示:</p>
<pre><code>htpasswd -c /var/www/passwd/public_html lippi 
New password: mypassword
Re-type new password: mypassword
Adding password for user lippi
</code></pre><p>userdir.conf调整为：</p>
<pre><code>&lt;IfModule mod_userdir.c&gt;
    UserDir public_html 
    UserDir disabled root

    &lt;Directory /home/*/public_html&gt;
        AllowOverride FileInfo AuthConfig Limit Indexes
        Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
        &lt;Limit GET POST OPTIONS&gt;
            #Require all granted
            AuthType Basic
            AuthName &quot;lippi&quot;
            AuthUserFile /var/www/passwd/public_html
            Require valid-user
        &lt;/Limit&gt;
        &lt;LimitExcept GET POST OPTIONS&gt;
            Require all denied
        &lt;/LimitExcept&gt;
    &lt;/Directory&gt;
&lt;/IfModule&gt;
</code></pre><p>virtualHost部分参数配置详解</p>
<p>1.AllowOverride All就是允许根目录下的.htaccess起rewrite作用，AllowOverride None禁止.htaccess起作用<br>2.order是设置deny／allow的组合排序, 不区分大小写，中间用”,”分开，中间不能有空格</p>
<pre><code>Order Deny,Allow #表示设定&quot;先检查禁止设定，没有设定禁止的全部允许&quot;
Order Allow,Deny #表示设定&quot;先检查允许设定，没有设定允许的全部禁止&quot;
</code></pre><p>最后的访问结果由第二参数决定！</p>
<h3 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h3><p>问题一：</p>
<pre><code>root@ubuntu:~# a2ensite example.com 
ERROR:  Site example.com does not exists!
</code></pre><p>解决方案:</p>
<pre><code># cd /etc/apache2/sites-available/
# mv example.com example.com.conf
</code></pre><p>附：相关资料</p>
<ul>
<li><a href="http://blog.danthought.com/programming/2015/11/14/apache-configuration-files-on-ubuntu/" target="_blank" rel="noopener">Apache 配置文件</a></li>
<li><a href="http://tecadmin.net/fixed-error-site-example-com-does-not-exists-apache-a2ensite/" target="_blank" rel="noopener">ERROR: Site example.com does not exists!</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[phpstorm的Debug调试]]></title>
      <url>http://jasonhzy.github.io/2016/08/27/php-debug/</url>
      <content type="html"><![CDATA[<p>一直以来，调试PHP脚本都是直接在脚本中die或exit实现断点调试，下面介绍phpstorm+xdebug的组合来实现代码的调试</p>
<h3 id="安装-amp-配置xdebug"><a href="#安装-amp-配置xdebug" class="headerlink" title="安装&amp;配置xdebug"></a>安装&amp;配置xdebug</h3><h4 id="安装xdebug"><a href="#安装xdebug" class="headerlink" title="安装xdebug"></a>安装xdebug</h4><pre><code>sudo apt-get install php5.6-xdebug #ubuntu
sudo port install php56-xdebug  #mac
sudo yum install php56w-pecl-xdebug #centos
</code></pre><a id="more"></a>        
<h4 id="配置php-ini"><a href="#配置php-ini" class="headerlink" title="配置php.ini"></a>配置php.ini</h4><p>在php.ini文件中添加如下配置</p>
<pre><code>[xdebug]
;zend_extension=&quot;/opt/local/lib/php56/extensions/no-debug-non-zts-20131226/xdebug.so&quot; #mac下extension路径
xdebug.idekey=phpstorm
xdebug.remote_enable = On
xdebug.remote_host=localhost
xdebug.remote_port=8888
xdebug.remote_handler=dbgp
xdebug.profiler_append = 0
xdebug.profiler_enable = 1
xdebug.profiler_enable_trigger = 0
xdebug.profiler_output_dir = &quot;/tmp&quot;
xdebug.profiler_output_name = &quot;cachegrind.out.%t-%s&quot;
</code></pre><p>重启apache之后，通过phpinfo查看，截图如下：</p>
<p><img src="/images/xdebug/xdebug-phpinfo.png" alt="xdebug-phpinfo"></p>
<p>注意：<br>1.利用命令“php –ini”可以查看所有.ini为后缀的配置文件，如php.ini、xdebug.ini等，查看xdebug.ini文件即可看到zend_extension配置<br>2.部分参数说明:,<br>idekey：自己定义，需要与IDE里头配置一样。<br>remote_enable：远程调试是否开启。<br>remote_host：调试器所在的主机，支持本机调试，也支持远程主机调试（例如远程运行php服务将调试信息发到本地IDE）<br>remote_port：调试器启动的端口。<br>remote_hanler：运行服务器与调试器的交互协议，默认为DBGP即可。<br>profiler_enable: 开启信息存储<br>profiler_output_dir: 信息存储位置</p>
<h3 id="配置phpstorm"><a href="#配置phpstorm" class="headerlink" title="配置phpstorm"></a>配置phpstorm</h3><p>打开PhpStorm的Setting（Mac下是Preference）</p>
<h4 id="调试端口"><a href="#调试端口" class="headerlink" title="调试端口"></a>调试端口</h4><p>在Debug Port里配置一个端口号，可自定义，需保证未被其他进程占用，前一步的xdebug.remote_port应该与这里开启的端口保持一致，否则xdebug与调试器无法通信<br><img src="/images/xdebug/xdebug-port.png" alt="xdebug-port"></p>
<h4 id="DBGp-Proxy"><a href="#DBGp-Proxy" class="headerlink" title="DBGp Proxy"></a>DBGp Proxy</h4><p>配置IDE key，与前面的xdebug.idekey保持一致。(Host和Port填写与xdebug.remote_host和xdebug.remote_port保持一致[貌似不一致也是可行的，一般是localhost和80])<br><img src="/images/xdebug/xdebug-idekey.png" alt="xdebug-idekey"></p>
<h4 id="进入调试模式"><a href="#进入调试模式" class="headerlink" title="进入调试模式"></a>进入调试模式</h4><p>断点调试分3种模式：脚本调试、web application运行调试、浏览器访问自动触发调试。</p>
<h5 id="脚本调试"><a href="#脚本调试" class="headerlink" title="脚本调试"></a>脚本调试</h5><p>该模式下允许本地脚本运行时断点调试，步骤如下：<br>1.设置断点<br>2.右键选中脚本<br>3.选择Debug即可<br><img src="/images/xdebug/xdebug-script.png" alt="xdebug-script"></p>
<h5 id="web-application运行调试"><a href="#web-application运行调试" class="headerlink" title="web application运行调试"></a>web application运行调试</h5><p>该模式允许指定url访问web页面进行php代码调试，步骤如下：<br>1.设置断点<br>2.配置web application<br>3.开启Debug<br><img src="/images/xdebug/xdebug-web.png" alt="xdebug-web"></p>
<p>其中配置web application的详细步骤如下：</p>
<p>1.选择“Edit Configuration”：<br><img src="/images/xdebug/web-config-add.png" alt="xdebug-config-add"><br>2.添加“PHP Web Application”：<br><img src="/images/xdebug/web-config-modify.png" alt="xdebug-config-modify"><br>3.配置详细过程：<br><img src="/images/xdebug/web-config-server.png" alt="xdebug-config-server"><br>4.配置成功后的效果图：<br><img src="/images/xdebug/web-config-complete.png" alt="xdebug-config-complete"></p>
<h5 id="浏览器调试"><a href="#浏览器调试" class="headerlink" title="浏览器调试"></a>浏览器调试</h5><p>该模式下，浏览器需要安装调试的插件，之后浏览器访问某个页面url，自动触发IDE进入调试模式，步骤如下：</p>
<p>1.安装浏览器debug插件，并且需开启debug模式</p>
<p>chrome安装插件Xdebug helper<br><img src="/images/xdebug/chrome-debug.png" alt="chrome-debug"></p>
<p>firefox安装的插件The easiest Xdebug<br><img src="/images/xdebug/firefox-debug.png" alt="firefox-debug"></p>
<p>注意：插件内的IDE key配置必须与xdebug.idekey保持一致</p>
<p>2.PhpStorm开启监听连接<br><img src="/images/xdebug/phpstorm-listen.png" alt="phpstorm-listen"></p>
<p>3.代码内设置断点<br>4.浏览器访问页面url，即可触发IDE进入调试模式</p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Debug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx 文件路径配置alias&root]]></title>
      <url>http://jasonhzy.github.io/2016/08/25/nginx-alias-root/</url>
      <content type="html"><![CDATA[<p>nginx指定文件路径有两种方式root和alias，root与alias主要区别在于nginx如何解释location后面的uri，这会使两者分别以不同的方式将请求映射到服务器文件上。</p>
<a id="more"></a>
<h1 id="最基本的区别"><a href="#最基本的区别" class="headerlink" title="最基本的区别"></a>最基本的区别</h1><p>alias 指定的目录是准确的，给location指定一个目录。<br>root 指定目录的上级目录，并且该上级目录要含有locatoin指定名称的同名目录。<br>以root方式设置资源路径：</p>
<pre><code>语法: root path;
配置块: http、server、location、if
</code></pre><p>以alias 方式设置资源路径</p>
<pre><code>语法: alias path;
配置块: location
</code></pre><p>Example:<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location /img/ &#123;</span><br><span class="line">	<span class="built_in">alias</span> /<span class="built_in">var</span>/www/<span class="built_in">image</span>/;</span><br><span class="line">&#125;</span><br><span class="line">#若按照上述配置的话，则访问/img/目录里面的文件时，nginx会自动去/<span class="built_in">var</span>/www/<span class="built_in">image</span>/目录找文件</span><br><span class="line">location /img/ &#123;</span><br><span class="line">	root /<span class="built_in">var</span>/www/<span class="built_in">image</span>;</span><br><span class="line">&#125;</span><br><span class="line">#若按照这种配置的话，则访问/img/目录下的文件时，nginx会去/<span class="built_in">var</span>/www/<span class="built_in">image</span>/img/目录下找文件</span><br></pre></td></tr></table></figure></p>
<p>注意：</p>
<pre><code>1.使用alias时，目录名后面一定要加”/“。
2.使用alias标签的目录块中不能使用rewrite的break。
3.alias在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。
4.alias只能位于location块中
</code></pre><h1 id="配置alias支持PHP-fastcgi解析"><a href="#配置alias支持PHP-fastcgi解析" class="headerlink" title="配置alias支持PHP fastcgi解析"></a>配置alias支持PHP fastcgi解析</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /app &#123;</span><br><span class="line">	<span class="attribute">alias</span> /project/app/;</span><br><span class="line">	<span class="attribute">index</span> index.php;			</span><br><span class="line">	<span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123; <span class="comment">#方案一</span></span><br><span class="line">		<span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9100</span>;</span><br><span class="line">		<span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">		<span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">		<span class="attribute">fastcgi_param</span> SCRIPT_FILENAME /project/app/<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#location ~ /app/.+\.php$ &#123; ＃方案二</span></span><br><span class="line"><span class="comment">#	rewrite /app/(.+\.php) /$1 break;</span></span><br><span class="line"><span class="comment">#	include fastcgi.conf;</span></span><br><span class="line"><span class="comment">#	fastcgi_pass 127.0.0.1:9100;</span></span><br><span class="line"><span class="comment">#	fastcgi_index index.php;</span></span><br><span class="line"><span class="comment">#	fastcgi_param SCRIPT_FILENAME /project/app/$fastcgi_script_name;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
            <tag> root&amp;alias </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tmux配置]]></title>
      <url>http://jasonhzy.github.io/2016/08/24/tmux-config/</url>
      <content type="html"><![CDATA[<h2 id="tmux简介"><a href="#tmux简介" class="headerlink" title="tmux简介"></a>tmux简介</h2><blockquote>
<p>tmux是一个优秀的终端复用软件，类似GNU screen，但来源于OpenBSD，采用BSD授权。使用它最直观的好处就是通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机；当然其功能远不止于此。</p>
</blockquote>
<p><img src="/images/tmux-config.png" alt="tmux ide"></p>
<a id="more"></a>
<p>tmux使用C/S模型构建，主要包括以下单元模块：</p>
<table>
<thead>
<tr>
<th>-</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>server</td>
<td>服务器，输入tmux命令时就开启一个服务器</td>
</tr>
<tr>
<td>session</td>
<td>会话，一个会话可以包含多个窗口</td>
</tr>
<tr>
<td>window</td>
<td>窗口，一个会话可以包含多个窗口</td>
</tr>
<tr>
<td>pane</td>
<td>面板，一个窗口可以包含多个面板</td>
</tr>
</tbody>
</table>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code>tmux new-session -s session #创建某个会话
tmux ls #列出会话 
tmux attach-session -t session #进入某个会话
tmux kill-session -t &quot;session&quot;   //删除指定会话
</code></pre><p>  Ctrl+b    激活控制台；此时以下按键生效</p>
<h3 id="session常用命令"><a href="#session常用命令" class="headerlink" title="session常用命令"></a>session常用命令</h3><table>
<thead>
<tr>
<th style="text-align:left">快捷键</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">重命名当前session</td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">列出所有快捷键；按q返回</td>
</tr>
<tr>
<td style="text-align:left">d</td>
<td style="text-align:left">脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话</td>
</tr>
<tr>
<td style="text-align:left">D</td>
<td style="text-align:left">选择要脱离的会话；在同时开启了多个会话时使用</td>
</tr>
<tr>
<td style="text-align:left">Ctrl+z</td>
<td style="text-align:left">挂起当前会话</td>
</tr>
<tr>
<td style="text-align:left">r</td>
<td style="text-align:left">强制重绘未脱离的会话</td>
</tr>
<tr>
<td style="text-align:left">s</td>
<td style="text-align:left">选择并切换会话；在同时开启了多个会话时使用</td>
</tr>
<tr>
<td style="text-align:left">:</td>
<td style="text-align:left">进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器</td>
</tr>
<tr>
<td style="text-align:left">[</td>
<td style="text-align:left">进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出</td>
</tr>
<tr>
<td style="text-align:left">~</td>
<td style="text-align:left">列出提示信息缓存；其中包含了之前tmux返回的各种提示信息</td>
</tr>
<tr>
<td style="text-align:left">t</td>
<td style="text-align:left">显示时间</td>
</tr>
<tr>
<td style="text-align:left">(</td>
<td style="text-align:left">切换session 切换到上一个session</td>
</tr>
<tr>
<td style="text-align:left">)</td>
<td style="text-align:left">切换session 切换到下一个session</td>
</tr>
<tr>
<td style="text-align:left">L</td>
<td style="text-align:left">切换session 到前一个活跃的session</td>
</tr>
</tbody>
</table>
<h3 id="window常用命令"><a href="#window常用命令" class="headerlink" title="window常用命令"></a>window常用命令</h3><table>
<thead>
<tr>
<th style="text-align:left">快捷键</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">c</td>
<td style="text-align:left">创建新窗口</td>
</tr>
<tr>
<td style="text-align:left">&amp;</td>
<td style="text-align:left">关闭当前窗口</td>
</tr>
<tr>
<td style="text-align:left">数字键</td>
<td style="text-align:left">切换至指定窗口</td>
</tr>
<tr>
<td style="text-align:left">p</td>
<td style="text-align:left">切换至上一窗口</td>
</tr>
<tr>
<td style="text-align:left">n</td>
<td style="text-align:left">切换至下一窗口</td>
</tr>
<tr>
<td style="text-align:left">l</td>
<td style="text-align:left">在前后两个窗口间互相切换</td>
</tr>
<tr>
<td style="text-align:left">w</td>
<td style="text-align:left">通过窗口列表切换窗口</td>
</tr>
<tr>
<td style="text-align:left">,</td>
<td style="text-align:left">重命名当前窗口；这样便于识别</td>
</tr>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">修改当前窗口编号；相当于窗口重新排序</td>
</tr>
<tr>
<td style="text-align:left">f</td>
<td style="text-align:left">在所有窗口中查找指定文本</td>
</tr>
</tbody>
</table>
<h3 id="pane常用命令"><a href="#pane常用命令" class="headerlink" title="pane常用命令"></a>pane常用命令</h3><table>
<thead>
<tr>
<th style="text-align:left">快捷键</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">”</td>
<td style="text-align:left">将当前面板平分为上下两块</td>
</tr>
<tr>
<td style="text-align:left">%</td>
<td style="text-align:left">将当前面板平分为左右两块</td>
</tr>
<tr>
<td style="text-align:left">x</td>
<td style="text-align:left">关闭当前面板</td>
</tr>
<tr>
<td style="text-align:left">!</td>
<td style="text-align:left">将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板</td>
</tr>
<tr>
<td style="text-align:left">Ctrl+方向键</td>
<td style="text-align:left">以1个单元格为单位移动边缘以调整当前面板大小</td>
</tr>
<tr>
<td style="text-align:left">Alt+方向键</td>
<td style="text-align:left">以5个单元格为单位移动边缘以调整当前面板大小</td>
</tr>
<tr>
<td style="text-align:left">Space</td>
<td style="text-align:left">在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled</td>
</tr>
<tr>
<td style="text-align:left">q</td>
<td style="text-align:left">显示面板编号</td>
</tr>
<tr>
<td style="text-align:left">o</td>
<td style="text-align:left">在当前窗口中选择下一面板</td>
</tr>
<tr>
<td style="text-align:left">方向键</td>
<td style="text-align:left">移动光标以选择面板</td>
</tr>
<tr>
<td style="text-align:left">{</td>
<td style="text-align:left">向前置换当前面板</td>
</tr>
<tr>
<td style="text-align:left">}</td>
<td style="text-align:left">向后置换当前面板</td>
</tr>
<tr>
<td style="text-align:left">Alt+o</td>
<td style="text-align:left">逆时针旋转当前窗口的面板</td>
</tr>
<tr>
<td style="text-align:left">Ctrl+o</td>
<td style="text-align:left">顺时针旋转当前窗口的面板</td>
</tr>
</tbody>
</table>
<h2 id="tmux配置文件-tmux-conf"><a href="#tmux配置文件-tmux-conf" class="headerlink" title="tmux配置文件 ~/.tmux.conf"></a>tmux配置文件 ~/.tmux.conf</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">setw -g mode-mouse on</span><br><span class="line"><span class="keyword">set</span> -g mouse-<span class="keyword">select</span>-pane <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> -g mouse-<span class="keyword">resize</span>-pane <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> -g mouse-<span class="keyword">select</span>-window <span class="keyword">on</span></span><br><span class="line">#从 <span class="number">2.1</span> 版本开始（发布于 <span class="number">2015.10</span><span class="number">.18</span>），上述 <span class="number">4</span> 个选项就不可用了。统一使用下面的配置：</span><br><span class="line"><span class="keyword">set</span>-<span class="keyword">option</span> -g mouse <span class="keyword">on</span>         # 开启鼠标控制</span><br><span class="line"></span><br><span class="line"># window</span><br><span class="line">setw -g window-<span class="keyword">status</span>-<span class="keyword">current</span>-bg red  # 当前选中窗口背景色为红色</span><br><span class="line"></span><br><span class="line">#<span class="keyword">fixed</span> window <span class="keyword">name</span> <span class="keyword">after</span> <span class="keyword">rename</span></span><br><span class="line">setw -g <span class="keyword">allow</span>-<span class="keyword">rename</span> <span class="keyword">off</span></span><br><span class="line">setw -g <span class="keyword">automatic</span>-<span class="keyword">rename</span> <span class="keyword">off</span></span><br><span class="line"></span><br><span class="line">setw -g aggressive-<span class="keyword">resize</span> <span class="keyword">off</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
            <tag> tmux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP中cookie的 path/domain参数]]></title>
      <url>http://jasonhzy.github.io/2016/07/31/php-cookie/</url>
      <content type="html"><![CDATA[<p>在PHP中用setcookie 来设置网站的cookie，该函数的用法如下：</p>
<blockquote>
<p>bool setcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string$domain [, bool $secure = false [, bool $httponly = false ]]]]]])</p>
</blockquote>
<a id="more"></a>
<p>setcookie() 参数详解:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>cookie的名字</td>
<td>使用 $_COOKIE[‘cookiename’] 调用名为cookiename 的 cookie。</td>
</tr>
<tr>
<td>value</td>
<td>cookie的值，存放在客户端，不要存放敏感数据</td>
<td>假定 name 是’cookiename’，可以通过$_COOKIE[‘cookiename’] 取得其值。</td>
</tr>
<tr>
<td>expire</td>
<td>Cookie 过期的时间。这是个 Unix 时间戳，即从 Unix纪元开始的秒数。换而言之，通常用 time() 函数再加上秒数来设定 cookie 的失效期。或者用mktime()来实现。</td>
<td>time()+60<em>60</em>24*30 将设定 cookie 30 天后失效。如果未设定，cookie 将会在会话结束后（一般是浏览器关闭）失效。</td>
</tr>
<tr>
<td>path</td>
<td>Cookie 在服务器端的有效路径。</td>
<td>如果该参数设为 ‘/‘的话，cookie就在整个 domain 内有效，如果设为 ‘/foo/‘，cookie就只在 domain 下的 /foo/目录及其子目录内有效，例如 /foo/bar/。默认值为设定 cookie 的当前目录。</td>
</tr>
<tr>
<td>domain</td>
<td>该 cookie 有效的域名。</td>
<td>要使 cookie 能在如 example.com域名下的所有子域都有效的话，该参数应该设为 ‘.example.com’。虽然 . 并不必须的，但加上它会兼容更多的浏览器。如果该参数设为<a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 的话，就只在 www 子域内有效。细节见Cookie 规范中的 tail matching。</td>
</tr>
<tr>
<td>secure</td>
<td>指明cookie 是否仅通过安全的 HTTPS 连接传送。当设成 TRUE时，cookie 仅在安全的连接中被设置。默认值为FALSE。</td>
<td>0 或 1</td>
</tr>
<tr>
<td>httponly</td>
<td>设为true后，只能通过http访问，javascript无法访问;防止xss读取cookie;php5.2以上版本已支持HttpOnly参数的设置，同样也支持全局的HttpOnly的设置，在php.ini中，session.cookie_httponly=ture来开启全局的Cookie的HttpOnly属性</td>
<td>setcookie(“abc”, “test”,NULL, NULL, NULL, NULL, TRUE)</td>
</tr>
</tbody>
</table>
<h2 id="path参数"><a href="#path参数" class="headerlink" title="path参数"></a>path参数</h2><p>如下的目录结构：<br>coookie<br>├─child<br>│   └── child.php<br>└─father.php<br>father.php中的代码：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">setcookie(<span class="string">"father_set_0"</span>, <span class="string">"default"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>);</span><br><span class="line">setcookie(<span class="string">"father_set_1"</span>, <span class="string">"/"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>, <span class="string">"/"</span>);</span><br><span class="line">setcookie(<span class="string">"father_set_2"</span>, <span class="string">"/child/"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>, <span class="string">"/child/"</span>);</span><br><span class="line">setcookie(<span class="string">"father_set_3"</span>, <span class="string">"/cookie/child/"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>, <span class="string">"/cookie/child/"</span>);</span><br><span class="line"></span><br><span class="line">echo '&lt;pre&gt;';</span><br><span class="line">print_r($_COOKIE);</span><br></pre></td></tr></table></figure></p>
<p>child.php中的代码：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">setcookie(<span class="string">"child_set_0"</span>, <span class="string">"default"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>);</span><br><span class="line">setcookie(<span class="string">"child_set_1"</span>, <span class="string">"/"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>,<span class="string">"/"</span>);</span><br><span class="line">setcookie(<span class="string">"child_set_2"</span>, <span class="string">"/child/"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>, <span class="string">"/child"</span>);</span><br><span class="line">setcookie(<span class="string">"child_set_3"</span>, <span class="string">"/cookie/child/"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>, <span class="string">"/cookie/child/"</span>);</span><br><span class="line"></span><br><span class="line">echo '&lt;pre&gt;';</span><br><span class="line">print_r($_COOKIE);</span><br></pre></td></tr></table></figure></p>
<p>按father.php—&gt;child.php—&gt;father.php—&gt;child.php的顺序访问页面，输入出结果如下：<br>第一次访问father.php:</p>
<p><img src="/images/php-cookie/father_1st_view.png" alt="father_first_view"></p>
<p>初始状态下客户端没有相关的cookie记录，在上图中只有已收到的cookie，没有已发送的cookie，则打印$_COOKIE数组时是没有输出。<br>　　从上面这点可以看出，页面的每次请求cookie的变化是：页面请求时浏览器发送客户端已有的cookie，服务器端接收cookie将其存入数组$_COOKIE数组中供程序使用；而在服务器端响应本次请求设置的cookie尚未发送到客户端时$_COOKIE数组中是没有记录的。</p>
<p>第一次访问child.php:</p>
<p><img src="/images/php-cookie/child_1st_view.png" alt="child_first_view"></p>
<p>页面打印出的$_COOKIE数组中有两个值，分别是请求时发送的数据,一个页面只能访问路径设置为当前页面路径和父路径的cookie，不能访问兄弟路径的cookie。</p>
<p>第二次访问father.php:</p>
<p><img src="/images/php-cookie/father_2nd_view.png" alt="father_second_view"></p>
<p>这里就能看出来father.php虽然设置了三个cookie，但由于路径的原因浏览器请求时并没有发送其他子路径的cookie以至于不能读取。其中”child_set_1”是子路径下的页面设置的cookie，由于路径是本页面所在路径则能读取。</p>
<p>　　还有一点值得注意的是，这次访问时没能打印出”child_set_0”的值，在child.php中”child_set_0”的路径是为空的，这点是默认为当前路径，而不是站点根目录的，所有子路径想设置cookie让父路径的页面访问则需要设置路径的。</p>
<p>第二次访问child.php:</p>
<p><img src="/images/php-cookie/child_2nd_view.png" alt="child_second_view"></p>
<p>没能打印出路径为”/child”的cookie，这点说明浏览器只发送“直系”路径关系的cookie值</p>
<p>总结：</p>
<ul>
<li>服务器端每次访问的cookie是每次请求头中发送给服务器端的</li>
<li>setcookie如果不设置路径，默认为当前页面的路径，父亲路径的页面是无法访问的 </li>
<li>客户端每次请求只发送当前路径下和“直系”关系的父路径的cookie（父路径的页面是不能访问子路径和兄弟路径的cookie的） </li>
</ul>
<h2 id="domain参数"><a href="#domain参数" class="headerlink" title="domain参数"></a>domain参数</h2><p>第五个参数$domain，它决定了cookie的作用域。现在有如下3个域名，一个顶级域名、一个二级域名和一个三级域名：<br>① lotus.com<br>②blog.lotus.com<br>③test.blog.lotus.com<br>首先在<strong>①lotus.com</strong>域名下设置cookie，做四次测试，分别设置domain参数为空、lotus.com、blog.lotus.com与test.blog.lotus.com<br>√表示该域名下能取到cookie，×表示不能取到cookie</p>
<table>
<thead>
<tr>
<th style="text-align:left">domain参数</th>
<th>lotus.com</th>
<th>blog.lotus.com</th>
<th>test.blog.lotus.com</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">setcookie(‘name’, ‘jason’, time()+100)</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘age’, ‘20’, time()+100,’/‘,’lotus.com’)</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘birthday’, ‘19901106’, time()+100,’/‘,’blog.lotus.com’)</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘sex’, ‘male’, time()+100,’/‘,’test.blog.lotus.com’)</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody>
</table>
<p>在<strong>②blog.lotus.com</strong>域名下设置cookie，测试条件同上，即domain参数为空，lotus.com，blog.lotus.com与test.blog.lotus.com</p>
<table>
<thead>
<tr>
<th style="text-align:left">domain参数</th>
<th>lotus.com</th>
<th>blog.lotus.com</th>
<th>test.blog.lotus.com</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">setcookie(‘name’, ‘jason’, time()+100)</td>
<td>×</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘age’, ‘20’, time()+100,’/‘,’lotus.com’)</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘birthday’, ‘19901106’, time()+100,’/‘,’blog.lotus.com’)</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘sex’, ‘male’, time()+100,’/‘,’test.blog.lotus.com’)</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody>
</table>
<p>在<strong>③test.blog.lotus.com</strong>域名下设置cookie，测试条件同上</p>
<table>
<thead>
<tr>
<th style="text-align:left">domain参数</th>
<th>lotus.com</th>
<th>blog.lotus.com</th>
<th>test.blog.lotus.com</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">setcookie(‘name’, ‘jason’, time()+100)</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘age’, ‘20’, time()+100,’/‘,’lotus.com’)</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘birthday’, ‘19901106’, time()+100,’/‘,’blog.lotus.com’)</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘sex’, ‘male’, time()+100,’/‘,’test.blog.lotus.com’)</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
</tbody>
</table>
<p>domain的设置，有两点要注意：<br>1.在setcookie中省略domain参数，那么domain默认为当前域名。<br>2.domain参数可以设置父域名以及自身，但不能设置其它域名，包括子域名，否则cookie不起作用。<br>那么cookie的作用域：<br><strong>cookie的作用域是domain本身以及domain下的所有子域名。</strong></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> cookie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git stash用法]]></title>
      <url>http://jasonhzy.github.io/2016/06/15/git-stash/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在使用Git开发时，开发者在自己的分支上进行开发，由于需要紧急开发一个新的分支，而当前手里的完成的工作还不能合并。<br>此时，使用git stash命令可以将当前做过的修改从工作区保存到暂存区中。</p>
<a id="more"></a>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="添加改动到stash"><a href="#添加改动到stash" class="headerlink" title="添加改动到stash"></a>添加改动到stash</h3><pre><code>git stash [save [--patch] [-k|--[no-]keep-index] [-q|--quiet]
                    [-u|--include-untracked] [-a|--all]
                    [&lt;message&gt;]]
</code></pre><p>当前在jason分支上，我修改a.php文件，并增加了一个untracked files:<br><img src="/images/git-stash/git-status.png" alt="git status"></p>
<p>1.如果没有untracked files,即：</p>
<pre><code>git stash
</code></pre><p>2.如果需要在保存工作进度的时候使用指定的说明，必须使用如下格式:</p>
<pre><code>git stash save &quot;message&quot;
</code></pre><p>3.使用参数–patch会显示工作区和HEAD的差异，通过对差异文件的编辑决定在进度中<br>最终要保存的工作区的内容，通过编辑差异文件可以在进度中排除无关内容。</p>
<p>4.使用-k或者–keep-index参数，在保存进度后不会将暂存区重置（默认会将暂存区和工作区强制重置，即命令：–no-keep-index的效果）<br>5.使用-u|–include-untracked，同时储藏未跟踪文件。不影响被忽略的文件</p>
<pre><code>git stash save -u|--include-untracked
</code></pre><p><img src="/images/git-stash/git-stash.png" alt="git-stash-save">    </p>
<p>6.使用-a|–all来储藏所有的改动，包括未跟踪文件。不仅仅把新加入的代码文件放入暂存区，还会把用.gitignore忽略的文件放入暂存区</p>
<pre><code>git stash save -a|--all
</code></pre><h3 id="查看已经保存的储藏列表"><a href="#查看已经保存的储藏列表" class="headerlink" title="查看已经保存的储藏列表"></a>查看已经保存的储藏列表</h3><pre><code>$ git stash list
stash@{0}: On jason: save change msg
</code></pre><h3 id="删除储藏"><a href="#删除储藏" class="headerlink" title="删除储藏"></a>删除储藏</h3><p>如果没有指定是第几个储藏时，默认会删除最近的一次储藏</p>
<pre><code>git stash drop [-q|--quiet] [&lt;stash@{n}&gt;]
</code></pre><p>删除所有的储藏</p>
<pre><code>git stash clear
</code></pre><h3 id="查看-某次-储藏修改的内容"><a href="#查看-某次-储藏修改的内容" class="headerlink" title="查看[某次]储藏修改的内容"></a>查看[某次]储藏修改的内容</h3><p>若参数[&lt;stash@{n}&gt;]不加，表示查看最后一次的储藏</p>
<pre><code>git stash show [&lt;stash@{n}&gt;]
</code></pre><h3 id="恢复保存的工作进度"><a href="#恢复保存的工作进度" class="headerlink" title="恢复保存的工作进度"></a>恢复保存的工作进度</h3><pre><code>git stash &lt;pop | apply&gt; [--index] [-q|--quiet] [&lt;stash@{n}&gt;]
</code></pre><p>如果不使用任何参数，恢复最近一次保存的工作进度</p>
<pre><code>git stash pop #会从储藏列表中删除刚刚恢复的暂存
git stash apply #不会从储藏列表中删除刚刚恢复的暂存
</code></pre><p>如果使用&lt;stash@{n}&gt;参数，则从该&lt;stash@{n}&gt;中恢复保存的内容</p>
<pre><code>git stash pop &lt;stash@{n}&gt; #会从储藏列表中删除该`&lt;stash@{n}&gt;`
git stash apply &lt;stash@{n}&gt; #不会从储藏列表中删除该`&lt;stash@{n}&gt;`
</code></pre><p>–index除了恢复工作区的文件外，还会恢复暂存区的内容</p>
<pre><code>git stash pop --index
git stash apply --index
</code></pre><h3 id="使用储藏的内容创建新的分支"><a href="#使用储藏的内容创建新的分支" class="headerlink" title="使用储藏的内容创建新的分支"></a>使用储藏的内容创建新的分支</h3><p><branch-name>不能是已经存在的分支，并切换到创建的新分支，删除掉该储藏</branch-name></p>
<pre><code>git stash branch &lt;branch-name&gt; [&lt;stash@{n}&gt;]
</code></pre><h3 id="查看储藏列表的SHA-1值"><a href="#查看储藏列表的SHA-1值" class="headerlink" title="查看储藏列表的SHA-1值"></a>查看储藏列表的SHA-1值</h3><pre><code>$ git reflog show refs/stash
60a3985 refs/stash@{0}: On jason: save change msg    
</code></pre><p>参考资料</p>
<p>1.<a href="http://myoss.github.io/2016/Git%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">Git操作</a></p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> Stash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python SMTP发送邮件]]></title>
      <url>http://jasonhzy.github.io/2016/06/15/python-email/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SMTP(Simple Mail Transfer Protocol,简单邮件传输协议)是发送邮件的协议，Python内置对SMTP的支持，可以发送纯文本邮件、HTML邮件以及带附件的邮件。python发送邮件主要使用到了smtplib和email两个模块，email负责构造邮件，smtplib负责发送邮件。</p>
<a id="more"></a>
<h2 id="相关模块"><a href="#相关模块" class="headerlink" title="相关模块"></a>相关模块</h2><h3 id="smtplib模块"><a href="#smtplib模块" class="headerlink" title="smtplib模块"></a>smtplib模块</h3><pre><code>smtplib.SMTP()
smtplib.SMTP([host[, port[, local_hostname[, timeout]]]])
</code></pre><p>SMTP类构造函数，表示与SMTP服务器之间的连接，通过这个连接可以向smtp服务器发送指令，执行相关操作（如：登陆、发送邮件）。所有参数都是可选的。参数意义如下：</p>
<pre><code>host：smtp服务器主机名
port：smtp服务的端口，默认是25；如果在创建SMTP对象的时候提供了这两个参数，在初始化的时候会自动调用connect方法去连接服务器。
</code></pre><p>smtplib模块还提供了SMTP_SSL类和LMTP类，对它们的操作与SMTP基本一致。<br>smtplib.SMTP提供的方法：</p>
<pre><code>SMTP.set_debuglevel(level)：#设置是否为调试模式。默认为False，即非调试模式，表示不输出任何调试信息。
SMTP.connect([host[, port]])：#连接到指定的smtp服务器。参数分别表示smpt主机和端口。
               注意: 也可以在host参数中指定端口号（如：smpt.yeah.net:25），这样就没必要给出port参数。
SMTP.docmd(cmd[, argstring])：向smtp服务器发送指令。可选参数argstring表示指令的参数。
SMTP.helo([hostname]) ：使用&quot;helo&quot;指令向服务器确认身份。相当于告诉smtp服务器“我是谁”。
SMTP.has_extn(name)：判断指定名称在服务器邮件列表中是否存在。出于安全考虑，smtp服务器往往屏蔽了该指令。
SMTP.verify(address) ：判断指定邮件地址是否在服务器中存在。出于安全考虑，smtp服务器往往屏蔽了该指令。
SMTP.login(user, password) ：登陆到smtp服务器。现在几乎所有的smtp服务器，都必须在验证用户信息合法之后才允许发送邮件。
SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options]) ：发送邮件。这里要注意一下第三个参数，
       msg是字符串，表示邮件。我们知道邮件一般由标题，发信人，收件人，邮件内容，附件等构成，发送邮件的时候，要注意msg的格式。
       这个格式就是smtp协议中定义的格式。
SMTP.quit() ：断开与smtp服务器的连接，相当于发送&quot;quit&quot;指令。
</code></pre><h3 id="email模块"><a href="#email模块" class="headerlink" title="email模块"></a>email模块</h3><p>emial模块用来处理邮件消息，包括MIME和其他基于RFC 2822 的消息文档。使用这些模块来定义邮件的内容，是非常简单的。其包括的类有<strong><a href="http://docs.python.org/3/library/email.mime.html" target="_blank" rel="noopener">点此查看更加详细的介绍</a></strong></p>
<pre><code>class email.mime.base.MIMEBase(_maintype, _subtype, **_params)：这是MIME的一个基类。一般不需要在使用时创建实例。
        其中_maintype是内容类型，如text或者image。_subtype是内容的minor type 类型，如plain或者gif。 **_params是一个字典，
        直接传递给Message.add_header()。
class email.mime.multipart.MIMEMultipart([_subtype[, boundary[, _subparts[, _params]]]]：MIMEBase的一个子类，
        多个MIME对象的集合，_subtype默认值为mixed。boundary是MIMEMultipart的边界，默认边界是可数的。
class email.mime.application.MIMEApplication(_data[, _subtype[, _encoder[, **_params]]])：MIMEMultipart的一个子类。
class email.mime.audio. MIMEAudio(_audiodata[, _subtype[, _encoder[, **_params]]])： MIME音频对象
class email.mime.image.MIMEImage(_imagedata[, _subtype[, _encoder[, **_params]]])：MIME二进制文件对象。
class email.mime.message.MIMEMessage(_msg[, _subtype])：具体的一个message实例.
class email.mime.text.MIMEText(_text[, _subtype[, _charset]])：MIME文本对象，其中_text是邮件内容，_subtype邮件类型，
        可以是text/plain（普通文本邮件），html/plain(html邮件),  _charset编码，可以是gb2312等等。
</code></pre><h2 id="Python-SMTP-发送带附件电子邮件示例"><a href="#Python-SMTP-发送带附件电子邮件示例" class="headerlink" title="Python SMTP 发送带附件电子邮件示例"></a>Python SMTP 发送带附件电子邮件示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#   程序：Python SMTP 发送带附件电子邮件</span></span><br><span class="line"><span class="comment">#   作者：Jason Hu</span></span><br><span class="line"><span class="comment">#   日期：2016-06-01</span></span><br><span class="line"><span class="comment">#   语言：Python</span></span><br><span class="line"><span class="comment">#   说明：Python内置对SMTP的支持，可以发送纯文本邮件、HTML邮件以及带附件的邮件</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendEmail</span><span class="params">(authInfo, fromAdd, toAdd, subject, plainText)</span>:</span></span><br><span class="line"></span><br><span class="line">        strFrom = fromAdd</span><br><span class="line">        strTo = <span class="string">'; '</span>.join(toAdd)</span><br><span class="line"></span><br><span class="line">        server = authInfo.get(<span class="string">'server'</span>)</span><br><span class="line">        smtpPort = <span class="number">25</span></span><br><span class="line">        sslPort = <span class="number">465</span></span><br><span class="line">        user = authInfo.get(<span class="string">'user'</span>)</span><br><span class="line">        passwd = authInfo.get(<span class="string">'password'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (server <span class="keyword">and</span> user <span class="keyword">and</span> passwd) :</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'incomplete login info, exit now'</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设定root信息</span></span><br><span class="line">        msgRoot = MIMEMultipart(<span class="string">'related'</span>)</span><br><span class="line">        msgRoot[<span class="string">'Subject'</span>] = subject</span><br><span class="line">        msgRoot[<span class="string">'From'</span>] = <span class="string">'%s&lt;%s&gt;'</span> % (Header(<span class="string">'测试'</span>, <span class="string">'utf-8'</span>), strFrom)</span><br><span class="line">        msgRoot[<span class="string">'To'</span>] = strTo</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 邮件正文内容</span></span><br><span class="line">        msgText = MIMEText(plainText, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">        msgRoot.attach(msgText)</span><br><span class="line"></span><br><span class="line">        msgAlternative = MIMEMultipart(<span class="string">'alternative'</span>)</span><br><span class="line">        msgRoot.attach(msgAlternative)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># mail_msg = """</span></span><br><span class="line">        <span class="comment">#         &lt;p&gt;Python 邮件发送测试...&lt;/p&gt;</span></span><br><span class="line">        <span class="comment">#         &lt;p&gt;&lt;a href="http://www.runoob.com"&gt;菜鸟教程链接&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line">        <span class="comment">#         &lt;p&gt;图片演示：&lt;/p&gt;</span></span><br><span class="line">        <span class="comment">#         &lt;p&gt;&lt;img src="cid:pic_attach"&gt;&lt;/p&gt;</span></span><br><span class="line">        <span class="comment"># """</span></span><br><span class="line">        <span class="comment"># msgAlternative.attach(MIMEText(mail_msg, 'html', 'utf-8'))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#设定内置图片信息</span></span><br><span class="line">        fp = open(<span class="string">'/Users/JackyBian/Desktop/aa.png'</span>, <span class="string">'rb'</span>)</span><br><span class="line">        msgImage = MIMEImage(fp.read())</span><br><span class="line">        msgImage[<span class="string">"Content-Type"</span>] = <span class="string">'application/octet-stream'</span></span><br><span class="line">        <span class="comment">#filename可自定义，供邮件中显示</span></span><br><span class="line">        msgImage[<span class="string">"Content-Disposition"</span>] = <span class="string">'attachment; filename="aa.png"'</span></span><br><span class="line">        fp.close()</span><br><span class="line">        msgImage.add_header(<span class="string">'Content-ID'</span>, <span class="string">'&lt;pic_attach&gt;'</span>)</span><br><span class="line">        msgAlternative.attach(msgImage)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#发送邮件</span></span><br><span class="line">                smtp = smtplib.SMTP()</span><br><span class="line">                smtp.connect(server, smtpPort)</span><br><span class="line">                <span class="comment">#ssl加密方式，通信过程加密，邮件数据安全</span></span><br><span class="line">                <span class="comment"># smtp = smtplib.SMTP_SSL()</span></span><br><span class="line">                <span class="comment"># smtp.connect(server, sslPort)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">#设定调试级别，依情况而定</span></span><br><span class="line">                <span class="comment"># smtp.set_debuglevel(1)</span></span><br><span class="line">                smtp.login(user, passwd)</span><br><span class="line">                smtp.sendmail(strFrom, toAdd, msgRoot.as_string())</span><br><span class="line">                smtp.quit()</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"邮件发送成功!"</span></span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"失败："</span> + str(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span> :</span><br><span class="line">        authInfo = &#123;&#125;</span><br><span class="line">        authInfo[<span class="string">'server'</span>] = <span class="string">'smtp.163.com'</span></span><br><span class="line">        authInfo[<span class="string">'user'</span>] = <span class="string">'h07061108@163.com'</span></span><br><span class="line">        authInfo[<span class="string">'password'</span>] = <span class="string">'xxxxxx'</span></span><br><span class="line">        fromAdd = <span class="string">'h07061108@163.com'</span></span><br><span class="line">        toAdd = [<span class="string">'978229997@qq.com'</span>, <span class="string">'lotushzy@163.com'</span>]</span><br><span class="line">        subject = <span class="string">'Email Subject'</span></span><br><span class="line">        plainText = <span class="string">'Email Content'</span></span><br><span class="line">        sendEmail(authInfo, fromAdd, toAdd, subject, plainText)</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mail </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 爬虫(BeautifulSoup)]]></title>
      <url>http://jasonhzy.github.io/2016/06/02/python-reptile/</url>
      <content type="html"><![CDATA[<h2 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h2><blockquote>
<p>网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。”</p>
</blockquote>
<a id="more"></a>
<h2 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h2><p>采用easy_install或pip可以直接安装</p>
<p>1.安装MySQL-python</p>
<pre><code>pip/easy_install  install MySQL-python
</code></pre><p>2.安装BeautifulSoup<br>Beautiful Soup3 的文档,Beautiful Soup 3目前已经停止开发,我们推荐在现在的项目中使用Beautiful Soup 4,移植到BS4</p>
<pre><code>apt-get install Python-bs4  #Debain或ubuntu
pip/easy_install  install beautifulsoup4
</code></pre><h2 id="安装解析器"><a href="#安装解析器" class="headerlink" title="安装解析器"></a>安装解析器</h2><p>Beautiful Soup支持Python标准库中的HTML解析器,还支持一些第三方的解析器,其中一个是<br>lxml .根据操作系统不同,可以选择下列方法来安装lxml:</p>
<pre><code>apt-get install Python-lxml
pip/easy_install install lxml
</code></pre><p>另一个可供选择的解析器是纯Python实现的 html5lib, html5lib的解析方式与浏览器相同,可以选择下列方法来安装html5lib:</p>
<pre><code>apt-get install Python-html5lib
pip/easy_install install html5lib
</code></pre><p>下表列出了主要的解析器,以及它们的优缺点:</p>
<table>
<thead>
<tr>
<th>解析器</th>
<th>使用方法</th>
<th>优势</th>
<th>劣势</th>
</tr>
</thead>
<tbody>
<tr>
<td>Python标准库</td>
<td>BeautifulSoup(markup, “html.parser”)</td>
<td>Python的内置标准库、执行速度适中、文档容错能力强</td>
<td>Python 2.7.3 or 3.2.2)前 的版本中文档容错能力差</td>
</tr>
<tr>
<td>lxml HTML 解析器</td>
<td>BeautifulSoup(markup, “lxml”)</td>
<td>速度快、文档容错能力强</td>
<td>需要安装C语言库</td>
</tr>
<tr>
<td>lxml XML 解析器</td>
<td>BeautifulSoup(markup, [“lxml”, “xml”]) BeautifulSoup(markup, “xml”)</td>
<td>速度快、唯一支持XML的解析器</td>
<td>需要安装C语言库</td>
</tr>
<tr>
<td>html5lib</td>
<td>BeautifulSoup(markup, “html5lib”)</td>
<td>最好的容错性、以浏览器的方式解析文档、生成HTML5格式的文档</td>
<td>速度慢、不依赖外部扩展</td>
</tr>
</tbody>
</table>
<p>推荐使用lxml作为解析器,因为效率更高.在Python2.7.3之前的版本和Python3中3.2.2之前的版本,必须安装lxml或html5lib,因为那些Python版本的标准库中内置的HTML解析方法不够稳定.</p>
<h2 id="采用BeautifulSoup爬取示例"><a href="#采用BeautifulSoup爬取示例" class="headerlink" title="采用BeautifulSoup爬取示例"></a>采用BeautifulSoup爬取示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------------------</span></span><br><span class="line"><span class="comment">#   程序：糗事百科笑料爬虫</span></span><br><span class="line"><span class="comment">#   作者：Jason Hu</span></span><br><span class="line"><span class="comment">#   日期：2016-06-01</span></span><br><span class="line"><span class="comment">#   语言：Python</span></span><br><span class="line"><span class="comment">#   说明：自定义爬取页数，并将爬取的内容保存在Mysql数据库中</span></span><br><span class="line"><span class="comment">#---------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> MySQLdb <span class="keyword">as</span> db</span><br><span class="line"><span class="keyword">from</span> warnings <span class="keyword">import</span> filterwarnings</span><br><span class="line"></span><br><span class="line"><span class="comment">#filterwarnings('ignore', category = db.Warning)</span></span><br><span class="line">filterwarnings(<span class="string">"ignore"</span>, <span class="string">"Table '.*' already exists"</span>)</span><br><span class="line">filterwarnings(<span class="string">"ignore"</span>, <span class="string">"Can't create database '.*'; database exists"</span>)</span><br><span class="line"></span><br><span class="line">page = <span class="number">1</span>  <span class="comment">#设置页数</span></span><br><span class="line">url = <span class="string">'http://www.qiushibaike.com/hot/page/'</span> + str(page) <span class="comment">#url地址</span></span><br><span class="line"><span class="comment">#有些网站反爬虫, 伪装为浏览器抓取</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    request = urllib2.Request(url, headers = headers)</span><br><span class="line">    response = urllib2.urlopen(request)</span><br><span class="line">    content = response.read()</span><br><span class="line">    soup = BeautifulSoup(content, <span class="string">'html.parser'</span>, from_encoding=<span class="string">'UTF-8'</span>)</span><br><span class="line">    div_article = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span> : <span class="string">'col1'</span>&#125;)</span><br><span class="line">    article_list = div_article.findAll(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'article block untagged mb15'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#connection db to insert data</span></span><br><span class="line">    conn = db.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, passwd=<span class="string">''</span>, unix_socket=<span class="string">'/opt/local/var/run/mysql55/mysqld.sock'</span>)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    cur.execute(<span class="string">'create database if not exists python default charset utf8 collate utf8_general_ci;'</span>)</span><br><span class="line">    conn.select_db(<span class="string">'python'</span>)</span><br><span class="line">    cur.execute(<span class="string">'truncate table joke;'</span>)</span><br><span class="line">    sql = <span class="string">'''</span></span><br><span class="line"><span class="string">            create table if not exists joke(</span></span><br><span class="line"><span class="string">                `id` int not null auto_increment,</span></span><br><span class="line"><span class="string">                `author` varchar(30),</span></span><br><span class="line"><span class="string">                `photo` text,</span></span><br><span class="line"><span class="string">                `love_nums` int default 0,</span></span><br><span class="line"><span class="string">                `comment_nums` int default 0,</span></span><br><span class="line"><span class="string">                `content` text,</span></span><br><span class="line"><span class="string">                `create_time` datetime,</span></span><br><span class="line"><span class="string">                `update_time` datetime,</span></span><br><span class="line"><span class="string">                primary key(`id`)</span></span><br><span class="line"><span class="string">            )engine=Innodb default charset=utf8;</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> article_list:</span><br><span class="line">        author_tag = article.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span> : <span class="string">'author clearfix'</span>&#125;)</span><br><span class="line">        author_img = author_tag.img.attrs[<span class="string">'src'</span>]</span><br><span class="line">        author = author_tag.h2.text</span><br><span class="line"></span><br><span class="line">        content_tag = article.select(<span class="string">'div.content'</span>)</span><br><span class="line">        content = content_tag[<span class="number">0</span>].get_text().strip()</span><br><span class="line"></span><br><span class="line">        comment_tag = article.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'stats'</span>&#125;)</span><br><span class="line">        love_nums = comment_tag.find(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'stats-vote'</span>&#125;).find(<span class="string">'i'</span>).text</span><br><span class="line">        comment_nums = comment_tag.find(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'stats-comments'</span>&#125;).find(<span class="string">'i'</span>).text</span><br><span class="line"></span><br><span class="line">        create_time = datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">        update_time = datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"></span><br><span class="line">        joke = [author, author_img, love_nums, comment_nums, content, create_time, update_time]</span><br><span class="line">        cur.execute(<span class="string">'insert into joke(`author`, `photo`, `love_nums`, `comment_nums`, `content`, \</span></span><br><span class="line"><span class="string">                    `create_time`, `update_time`) values(%s, %s, %s, %s, %s, %s, %s)'</span>, joke);</span><br><span class="line">    conn.commit()</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line"><span class="keyword">except</span> urllib2.URLError, e:</span><br><span class="line">    <span class="keyword">print</span> e</span><br><span class="line"><span class="keyword">except</span> db.Error, e:</span><br><span class="line">    conn.rollback()</span><br><span class="line">    <span class="keyword">print</span> e</span><br></pre></td></tr></table></figure>
<p>参考资料</p>
<ol>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">Beautiful Soup 4.2.0文档</a></li>
<li><a href="https://wizardforcel.gitbooks.io/bs4-doc/content/3.html" target="_blank" rel="noopener">Beautiful Soup 4.2.0文档</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iframe实现无刷新上传文件]]></title>
      <url>http://jasonhzy.github.io/2016/05/25/iframe-upload/</url>
      <content type="html"><![CDATA[<h2 id="无刷新上传文件"><a href="#无刷新上传文件" class="headerlink" title="无刷新上传文件"></a>无刷新上传文件</h2><p>由于无法实现Ajax方式的文件上传，但又想实现类似的文件上传成功之后有提示的效果，或者form的submit提交保存之后有提示信息的，可以借助一些手段实现类似的无刷新并有提示信息的效果。这里采用的是iframe的方式，原理就是输出一段js代码到 iframe中，然后在iframe中来控制它的父页面</p>
<p><img src="/images/iframe-upload.png" alt="iframe"></p>
<a id="more"></a>
<h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>无刷新上传文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.file</span> &#123;</span></span><br><span class="line"><span class="undefined">                position: relative;</span></span><br><span class="line"><span class="undefined">                display: inline-block;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#D0EEFF</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#99D3F5</span>;</span></span><br><span class="line"><span class="undefined">                border-radius: 4px;</span></span><br><span class="line"><span class="undefined">                padding: 4px 12px;</span></span><br><span class="line"><span class="undefined">                overflow: hidden;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#1E88C7</span>;</span></span><br><span class="line"><span class="undefined">                text-decoration: none;</span></span><br><span class="line"><span class="undefined">                text-indent: 0;</span></span><br><span class="line"><span class="undefined">                line-height: 20px;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.file</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="undefined">                position: absolute;</span></span><br><span class="line"><span class="undefined">                font-size: 100px;</span></span><br><span class="line"><span class="undefined">                right: 0;</span></span><br><span class="line"><span class="undefined">                top: 0;</span></span><br><span class="line"><span class="undefined">                opacity: 0;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.file</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#AADFFD</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">border-color</span>: <span class="selector-id">#78C3F3</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#004974</span>;</span></span><br><span class="line"><span class="undefined">                text-decoration: none;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"save.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span></span></span><br><span class="line"><span class="tag">    		<span class="attr">target</span>=<span class="string">"iframe_upload"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"callback"</span> <span class="attr">value</span>=<span class="string">"jsoncallback"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"file"</span>&gt;</span>选择文件</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">value</span>=<span class="string">"上传"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">"iframe_upload"</span> <span class="attr">style</span>=<span class="string">"visibility:hidden;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.jsoncallback=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> code = data.result_code;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(code==<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.location.href = data.url ? data.url : <span class="built_in">window</span>.location.href;</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="undefined">               alert(data.result_msg);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：</p>
<ul>
<li>form的target设为iframe的name属性值，即iframe_upload</li>
<li>添加hidden的input的标签，可以自定义回调函数名称</li>
<li>添加隐藏的iframe，name属性值与form的target必须保持一致</li>
<li>添加js代码实现信息提示</li>
</ul>
<h2 id="后台代码（PHP为例）"><a href="#后台代码（PHP为例）" class="headerlink" title="后台代码（PHP为例）"></a>后台代码（PHP为例）</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$jsoncallback = $_POST[<span class="string">'callback'</span>];</span><br><span class="line"><span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">	response_post(<span class="string">'0'</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>], $jsoncallback);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], <span class="string">'/tmp/'</span>.$_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]))&#123;</span><br><span class="line">		response_post(<span class="string">'0'</span>, <span class="string">'文件保存成功!'</span>, $jsoncallback);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		response_post(<span class="string">'0'</span>, <span class="string">'文件保存失败!'</span>, $jsoncallback);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">response_post</span><span class="params">($msgcode, $message, $jsoncallback, $url=<span class="string">""</span>)</span></span>&#123;</span><br><span class="line">	$output=<span class="string">""</span>;</span><br><span class="line">	$output .= <span class="string">'&lt;script&gt;'</span>;</span><br><span class="line">	$output .= ( <span class="string">'top.'</span> . $jsoncallback . <span class="string">'('</span></span><br><span class="line">		.json_encode(<span class="keyword">array</span>(<span class="string">'result_code'</span> =&gt; $msgcode, <span class="string">'result_msg'</span> =&gt; $message, <span class="string">'server_time'</span>=&gt;time(), <span class="string">'url'</span>=&gt;$url))</span><br><span class="line">		.<span class="string">');'</span>);</span><br><span class="line">	$output .= <span class="string">'&lt;/script&gt;'</span>;</span><br><span class="line">	<span class="keyword">echo</span> $output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iframe </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql存储引擎]]></title>
      <url>http://jasonhzy.github.io/2016/05/18/mysql-engine/</url>
      <content type="html"><![CDATA[<h2 id="数据库存储引擎定义"><a href="#数据库存储引擎定义" class="headerlink" title="数据库存储引擎定义"></a>数据库存储引擎定义</h2><p>MySQL中的数据用各种不同的技术存储在文件（或者内存）中，这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并最终提供不同的功能和能力，这些不同的技术以及配套的相关功能在MySQL中称为存储引擎（也称为表类型）。</p>
<a id="more"></a>
<h2 id="MySQL数据库主要存储引擎"><a href="#MySQL数据库主要存储引擎" class="headerlink" title="MySQL数据库主要存储引擎"></a>MySQL数据库主要存储引擎</h2><p><img src="/images/mysql/mysql-engine.png" alt="mysql engine"></p>
<table>
<thead>
<tr>
<th>存储引擎</th>
<th>功能&amp;特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>MyISAM</td>
<td>拥有较高的插入，查询速度，但不支持事务，表级锁</td>
</tr>
<tr>
<td>InnoDB</td>
<td>5.5版本后Mysql的默认数据库存储引擎，事务型数据库的首选引擎，支持ACID事务，支持行级锁定</td>
</tr>
<tr>
<td>Memory</td>
<td>所有数据置于内存的存储引擎，拥有极高的插入，更新和查询效率。但是会占用和数据量成正比的内存空间。并且其内容会在Mysql重新启动时丢失，处理非事务表</td>
</tr>
<tr>
<td>Archive</td>
<td>非常适合存储大量的独立的，作为历史记录的数据。因为它们不经常被读取。Archive拥有高效的插入速度，但其对查询的支持相对较差</td>
</tr>
<tr>
<td>CSV</td>
<td>逻辑上由逗号分割数据的存储引擎。它会在数据库子目录里为每个数据表创建一个.CSV文件。这是一种普通文本文件，每个数据行占用一个文本行。CSV存储引擎不支持索引</td>
</tr>
<tr>
<td>BlackHole</td>
<td>黑洞引擎，写入的任何数据都会消失，一般用于记录binlog做复制的中继</td>
</tr>
<tr>
<td>MRG_MYISAM</td>
<td>将一定数量的MyISAM表联合而成一个整体，在超大规模数据存储时很有用，实现大数据的水平分表（如创建一个MRG_MyISAM引擎作为主表，可以实现读操作，更新，删除操作，在多个MyISAM引擎的子表中插入存储数据）</td>
</tr>
<tr>
<td>PERFORMANCE_SCHEMA</td>
<td>主要用于收集数据库服务器性能参数。MySQL用户是不能创建存储引擎为PERFORMANCE_SCHEMA的表</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL数据库备份和还原]]></title>
      <url>http://jasonhzy.github.io/2016/05/16/mysql-backup/</url>
      <content type="html"><![CDATA[<p><img src="/images/mysql-back/MariaDB-mysql.jpg" alt="mysql"></p>
<h2 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h2><p>MySQL 为关系型数据库(Relational Database Management System),这种所谓的”关系型”可以理解为”表格”的概念, 一个关系型数据库由一个或数个表格组成,<br>如图所示的一个表格:</p>
<a id="more"></a>
<p><img src="/images/mysql-back/mysql-table.png" alt="mysql table"></p>
<p><strong>表头(header)</strong>: 每一列的名称;<br><strong>列(row)</strong>: 具有相同数据类型的数据的集合;<br><strong>行(col)</strong>: 每一行用来描述某个人/物的具体信息;<br><strong>值(value)</strong>: 行的具体信息, 每个值必须与该列的数据类型相同;<br><strong>键(key)</strong>: 表中用来识别某个特定的人\物的方法,键的值在当前列中具有唯一性。</p>
<h2 id="备份与还原常用命令"><a href="#备份与还原常用命令" class="headerlink" title="备份与还原常用命令"></a>备份与还原常用命令</h2><p>备份MySQL数据库的命令</p>
<pre><code>mysqldump -hhostname -uusername -ppassword db &gt; bak.sql
</code></pre><p>备份MySQL数据库为带删除表的格式<br>备份MySQL数据库为带删除表的格式，能够让该备份覆盖已有数据库而不需要手动删除原有数据库。</p>
<pre><code>mysqldump --add-drop-table -uusername -ppassword db &gt; bak.sql
</code></pre><p>直接将MySQL数据库压缩备份</p>
<pre><code>mysqldump -hhostname -uusername -ppassword db | gzip &gt; bak.sql.gz
</code></pre><p>备份多个MySQL数据库</p>
<pre><code>mysqldump -hhostname -uusername -ppassword --databases db1 db2 db3 &gt; multibak.sql
</code></pre><p>备份数据库结构(–no-data, -d)</p>
<pre><code>mysqldump -hhostname -uusername -p --no-data --databases db1 db2 db3 &gt; structurebak.sql
mysqldump -hhostname -uusername -p -d db &gt; db.sql
</code></pre><p>备份服务器上所有数据库</p>
<pre><code>mysqldump –all-databases &gt; allbak.sql
</code></pre><p>备份MySQL数据库某个(些)表</p>
<pre><code>#含表结构和数据
mysqldump -hhostname -uusername -ppassword db t1 t2 &gt; bak.sql
#不含表结构和数据
mysqldump -hhostname -uusername -ppassword -d db t1 t2 &gt; bak.sql
</code></pre><p>备份MySQL数据库或某个(些)表数据（不包含表结构）</p>
<pre><code>#数据库数据
mysqldump -hhostname -uusername -ppassword -t db &gt; db.sql
#单张表数据
mysqldump -hhostname -uusername -ppassword -t db t&gt; t.sql
#多张表数据
mysqldump -hhostname -uusername -ppassword -t db t1 t2 &gt; t.sql
</code></pre><p>还原MySQL数据库的命令</p>
<pre><code>mysql -hhostname -uusername -ppassword db &lt; bak.sql
</code></pre><p>还原压缩的MySQL数据库</p>
<pre><code>gunzip &lt; bak.sql.gz | mysql -uusername -ppassword db
</code></pre><p>将数据库转移到新服务器</p>
<pre><code>mysqldump -uusername -ppassword db | mysql –host=*.*.*.* -C db
</code></pre>]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux mail命令发送邮件]]></title>
      <url>http://jasonhzy.github.io/2016/05/14/linux-mail/</url>
      <content type="html"><![CDATA[<p><img src="/images/mail/email.png" alt="email info"></p>
<h2 id="在-Debian-Ubuntu-系统："><a href="#在-Debian-Ubuntu-系统：" class="headerlink" title="在 Debian / Ubuntu 系统："></a>在 Debian / Ubuntu 系统：</h2><pre><code>apt-get install mailutils
apt-get install sharutils  #支持附件发送，使用uuencode
apt-get install sendmail
apt-get install sendmail-cf
</code></pre><a id="more"></a>
<h2 id="sendmail"><a href="#sendmail" class="headerlink" title="sendmail"></a>sendmail</h2><p>启用sendmail</p>
<pre><code>service start sendmail #systemctl start sendmail.service
</code></pre><p>sendmail配置</p>
<p>sendmail默认只会为本机用户发送邮件，只有把它扩展到整个Internet，才会成为真正的邮件服务器,sendmail的配置文件：/etc/mail/sendmail.mc</p>
<pre><code>DAEMON_OPTIONS(`Family=inet,  Name=MTA-v4, Port=smtp,Addr=127.0.0.1&apos;)dnl
</code></pre><p>将Addr=127.0.0.1修改成0.0.0.0</p>
<p>修改之后产生新的配置文件：</p>
<pre><code>mv sendmail.cf sendmail.cf~   #做一个备份
m4 sendmail.mc &gt; sendmail.cf  #&gt;的左右有空格，提示错误没有安装sendmail-cf
</code></pre><h2 id="安装mailutils"><a href="#安装mailutils" class="headerlink" title="安装mailutils"></a>安装mailutils</h2><p>安装过程中会让你选择一种配置类型。一般情况下，我们需要选择第二种类型：<strong>Internet Site</strong></p>
<p><img src="/images/mail/mailutils.png" alt="mailutils"></p>
<pre><code>No configuration 表示不要做任何配置；
Internet Site 表示直接使用本地SMTP服务器发送和接收邮件；
Internet with smarthost 表示使用本地SMTP服务器接收邮件，但发送邮件时不直接使用本地SMTP服务器，
    而是使用第三方smart host来转发邮件；
Satellite system 表示邮件的发送和接收都是由第三方smarthost来完成。
Local only 表示邮件只能在本机用户之间发送和接收。
</code></pre><h2 id="发送有主题的邮件"><a href="#发送有主题的邮件" class="headerlink" title="发送有主题的邮件"></a>发送有主题的邮件</h2><pre><code>echo &quot;Email text&quot; | mail -s &quot;Test Subject&quot; user@example.com #-s的用处是指定邮件的主题
</code></pre><h2 id="从文件中读取邮件内容并发送"><a href="#从文件中读取邮件内容并发送" class="headerlink" title="从文件中读取邮件内容并发送"></a>从文件中读取邮件内容并发送</h2><pre><code>mail -s &quot;message send from file&quot; user@example.com &lt; /path/to/file
</code></pre><h2 id="将从管道获取到的echo命令输出作为邮件内容发送"><a href="#将从管道获取到的echo命令输出作为邮件内容发送" class="headerlink" title="将从管道获取到的echo命令输出作为邮件内容发送"></a>将从管道获取到的echo命令输出作为邮件内容发送</h2><pre><code>echo &quot;This is message body&quot; | mail -s &quot;This is Subject&quot;
user@example.com
</code></pre><h2 id="发送带附件的邮件"><a href="#发送带附件的邮件" class="headerlink" title="发送带附件的邮件"></a>发送带附件的邮件</h2><pre><code>echo &quot;Body with attachment&quot;| mail -a foo.tar.gz -s &quot;attached file&quot; user@example.com
</code></pre><h2 id="uuencode"><a href="#uuencode" class="headerlink" title="uuencode"></a>uuencode</h2><p>邮件传输系统最初是被设计来传送7位编码（类似ASCII）的内容的。这就意味这它是用来发送文本内容，而不能发会使用8位的二进制内容（如程序文件或者图片）。uuencode（“UNIX to UNIX encoding”，UNIX之间使用的编码方式）程序用来解决这个限制。使用uuencode，发送端将二进制格式的转换成文本格式来传输，接收端再转换回去。<br>我们可以简单地使用uuencode和mailx或者mutt配合，来发送二进制内容，类似这样：</p>
<pre><code>uuencode example.jpeg example.jpeg | mail user@example.com
</code></pre><p><strong>注意：</strong><br>1、/etc/hosts中修改为：</p>
<pre><code>127.0.0.1    localhost localhost.localdomain jason #jason计算机主机名
</code></pre><p>参考资料</p>
<p>1、<a href="https://linux.cn/article-5502-1.html" target="_blank" rel="noopener">发送邮件的命令行工具</a><br>2、<a href="https://www.linuxdashen.com/ubuntu搭建简易postfix邮箱服务器" target="_blank" rel="noopener">ubuntu搭建简易postfix邮箱服务器</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mail </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git日志格式、颜色设置]]></title>
      <url>http://jasonhzy.github.io/2016/05/05/git-log/</url>
      <content type="html"><![CDATA[<h2 id="Git多颜色输出"><a href="#Git多颜色输出" class="headerlink" title="Git多颜色输出"></a>Git多颜色输出</h2><p>git默认的输出是单一颜色的，不仅不够美观，也不容易阅读。实际上，git本身就支持用多种颜色来显示其输出的信息，只需在命令行中运行以下命令来修改git的设置，即可开启多颜色输出：</p>
<pre><code>git config --global color.status auto
git config --global color.diff auto
git config --global color.branch auto
git config --global color.interactive auto
</code></pre><a id="more"></a>
<h2 id="自定义log格式"><a href="#自定义log格式" class="headerlink" title="自定义log格式"></a>自定义log格式</h2><p>完成上述步骤后，git log命令的输出虽然有了点颜色，但还是显得枯燥(见下图)。</p>
<p><img src="/images/git-log/git-log.png" alt="git log"></p>
<p>git提供了自定义log格式的功能，尝试输入以下命令：</p>
<pre><code>git log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit
</code></pre><p>把上面命令设置一个别名lg:</p>
<pre><code>git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;
</code></pre><p>设置之后git lg即可查看log，而且显示的更加友好：</p>
<p><img src="/images/git-log/git-log-change.png" alt="git log change"></p>
<p>如果要查看更详细的log，即：git lg/log -p    </p>
<h2 id="Git-log-输出格式化"><a href="#Git-log-输出格式化" class="headerlink" title="Git log 输出格式化:"></a>Git log 输出格式化:</h2><style>
    table th:first-of-type {
        width: 20%;
    }
</style>

<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%H</td>
<td style="text-align:left">commit hash</td>
</tr>
<tr>
<td>%h</td>
<td style="text-align:left">commit short hash</td>
</tr>
<tr>
<td>%T</td>
<td style="text-align:left">tree hash</td>
</tr>
<tr>
<td>%t</td>
<td style="text-align:left">tree short hash</td>
</tr>
<tr>
<td>%P</td>
<td style="text-align:left">parent hash</td>
</tr>
<tr>
<td>%p</td>
<td style="text-align:left">parent short hash</td>
</tr>
<tr>
<td>%an</td>
<td style="text-align:left">作者名字</td>
</tr>
<tr>
<td>%aN</td>
<td style="text-align:left">.mailmap 中对应的作者名字</td>
</tr>
<tr>
<td>%ae</td>
<td style="text-align:left">作者邮箱</td>
</tr>
<tr>
<td>%aE</td>
<td style="text-align:left">.mailmap 中对应的作者邮箱</td>
</tr>
<tr>
<td>%ad</td>
<td style="text-align:left">–date=制定的日期格式</td>
</tr>
<tr>
<td>%aD</td>
<td style="text-align:left">RFC2822 日期格式</td>
</tr>
<tr>
<td>%ar</td>
<td style="text-align:left">日期格式，例如：1 day ago</td>
</tr>
<tr>
<td>%at</td>
<td style="text-align:left">UNIX timestamp 日期格式</td>
</tr>
<tr>
<td>%ai</td>
<td style="text-align:left">ISO 8601 日期格式</td>
</tr>
<tr>
<td>%cn</td>
<td style="text-align:left">提交者名字</td>
</tr>
<tr>
<td>%cN</td>
<td style="text-align:left">.mailmap 对应的提交的名字</td>
</tr>
<tr>
<td>%ce</td>
<td style="text-align:left">提交者邮箱</td>
</tr>
<tr>
<td>%cE</td>
<td style="text-align:left">.mailmap 对应的提交者的邮箱</td>
</tr>
<tr>
<td>%cd</td>
<td style="text-align:left">–data=制定的提交日期的格式</td>
</tr>
<tr>
<td>%cD</td>
<td style="text-align:left">RFC2822 提交日期的格式</td>
</tr>
<tr>
<td>%cr</td>
<td style="text-align:left">提交日期的格式，例如：1day ago</td>
</tr>
<tr>
<td>%ct</td>
<td style="text-align:left">UNIX timestamp 提交日期的格式</td>
</tr>
<tr>
<td>%ci</td>
<td style="text-align:left">ISO 8601 提交日期的格式</td>
</tr>
<tr>
<td>%d</td>
<td style="text-align:left">ref 名称</td>
</tr>
<tr>
<td>%e</td>
<td style="text-align:left">encoding</td>
</tr>
<tr>
<td>%s</td>
<td style="text-align:left">commit 信息标题</td>
</tr>
<tr>
<td>%f</td>
<td style="text-align:left">过滤commit信息的标题使之可以作为文件名</td>
</tr>
<tr>
<td>%b</td>
<td style="text-align:left">commit 信息内容</td>
</tr>
<tr>
<td>%N</td>
<td style="text-align:left">commit notes</td>
</tr>
<tr>
<td>%gD</td>
<td style="text-align:left">reflog selector, e.g., refs/stash@{1}</td>
</tr>
<tr>
<td>%gd</td>
<td style="text-align:left">shortened reflog selector, e.g., stash@{1}</td>
</tr>
<tr>
<td>%gs</td>
<td style="text-align:left">reflog subject</td>
</tr>
<tr>
<td>%Cred</td>
<td style="text-align:left">切换至红色</td>
</tr>
<tr>
<td>%Cgreen</td>
<td style="text-align:left">切换至绿色</td>
</tr>
<tr>
<td>%Cblue</td>
<td style="text-align:left">切换至蓝色</td>
</tr>
<tr>
<td>%Creset</td>
<td style="text-align:left">重设颜色</td>
</tr>
<tr>
<td>%C(color)</td>
<td style="text-align:left">制定颜色，as described in color.branch.* config option</td>
</tr>
<tr>
<td>%m</td>
<td style="text-align:left">left right or boundary mark</td>
</tr>
<tr>
<td>%n</td>
<td style="text-align:left">换行</td>
</tr>
<tr>
<td>%%</td>
<td style="text-align:left">a raw %</td>
</tr>
<tr>
<td>%x00</td>
<td style="text-align:left">print a byte from a hex code</td>
</tr>
<tr>
<td>%w([[,[,]]])</td>
<td style="text-align:left">switch line wrapping, like the -w option of git-shortlog(1).</td>
</tr>
</tbody>
</table>
<h2 id="Git-log-命令支持的选项"><a href="#Git-log-命令支持的选项" class="headerlink" title="Git log 命令支持的选项"></a>Git log 命令支持的选项</h2><p>-p 按补丁格式显示每个更新之间的差异。<br>–stat 显示每次更新的文件修改统计信息。<br>–shortstat 只显示 –stat 中最后的行数修改添加移除统计。<br>–name-only 仅在提交信息后显示已修改的文件清单。<br>–name-status 显示新增、修改、删除的文件清单。<br>–abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。<br>–relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。<br>–graph 显示 ASCII 图形表示的分支合并历史。<br>–pretty 使用其他格式显示历史提交信息。可用的选项包括oneline，short，full，fuller 和 format（后跟指定格式）。</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP的cURL文件上传]]></title>
      <url>http://jasonhzy.github.io/2016/05/04/php-curl-file/</url>
      <content type="html"><![CDATA[<h2 id="cURL介绍"><a href="#cURL介绍" class="headerlink" title="cURL介绍"></a>cURL介绍</h2><p>cURL是一个利用URL语法规定来传输文件和数据的工具，支持很多协议，如HTTP、FTP、TELNET等。PHP也支持cURL 库。本文将介绍 cURL 的一些高级特性，以及在PHP中如何运用它。</p>
<a id="more"></a>
<h2 id="PHP创建cURL的基本结构"><a href="#PHP创建cURL的基本结构" class="headerlink" title="PHP创建cURL的基本结构"></a>PHP创建cURL的基本结构</h2><p>1）初始化</p>
<pre><code>curl_init()
</code></pre><p>2）设置变量</p>
<pre><code>curl_setopt()
</code></pre><p>3）执行并获取结果</p>
<pre><code>curl_exec()
</code></pre><p>4）释放cURL句柄</p>
<pre><code>curl_close()
</code></pre><h2 id="PHP-cURl实现GET和POST"><a href="#PHP-cURl实现GET和POST" class="headerlink" title="PHP cURl实现GET和POST"></a>PHP cURl实现GET和POST</h2><h3 id="GET方式实现"><a href="#GET方式实现" class="headerlink" title="GET方式实现"></a>GET方式实现</h3><pre><code>//初始化
$ch = curl_init();
//设置选项，包括URL
curl_setopt($ch, CURLOPT_URL, &quot;http://loalhost/test.php&quot;);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_HEADER, 0);
//执行并获取HTML文档内容
$output = curl_exec($ch);
//释放curl句柄
curl_close($ch);
//打印获得的数据
print_r($output);
</code></pre><h3 id="POST方式请求"><a href="#POST方式请求" class="headerlink" title="POST方式请求"></a>POST方式请求</h3><pre><code>$url = &quot;http://localhost/test.php&quot;;
$post_data = array(&apos;key&apos; =&gt; &apos;value&apos;);
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
// post数据
curl_setopt($ch, CURLOPT_POST, 1);
// post的变量
curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
$output = curl_exec($ch);
curl_close($ch);
//打印获得的数据
print_r($output);
</code></pre><p>以上方式获取到的数据是json格式的，使用json_decode函数解释成数组。    </p>
<pre><code>$output_array = json_decode($output,true);
</code></pre><h3 id="PHP不同版本之间cURL上传文件的区别"><a href="#PHP不同版本之间cURL上传文件的区别" class="headerlink" title="PHP不同版本之间cURL上传文件的区别"></a>PHP不同版本之间cURL上传文件的区别</h3><p><strong>普通curl命令形式访问</strong></p>
<pre><code>curl -F &quot;name=jason&amp;file=@/tmp/test.jpg&quot; htt://localhost/test.php
</code></pre><p><strong>PHP的cURL类库上传文件</strong></p>
<p>PHP的cURL支持通过给CURL_POSTFIELDS传递关联数组（而不是字符串）来生成multipart/form-data的POST请求。<br>传统上，PHP的cURL支持通过在数组数据中，使用“@+文件全路径”的语法附加文件，供cURL读取上传。这与命令行直接调用cURL程序的语法是一致的：</p>
<pre><code>curl_setopt(ch, CURLOPT_POSTFIELDS, array(
    &apos;file&apos; =&gt; &apos;@&apos;.realpath(&apos;image.png&apos;), 
)); 
$ curl -F &quot;file=@/absolute/path/to/image.png&quot; &lt;url&gt;
</code></pre><p>PHP从5.5开始引入了新的CURLFile类用来指向文件。CURLFile类也可以详细定义MIME类型、文件名等可能出现在multipart/form-data数据中的附加信息。PHP推荐使用CURLFile替代旧的@语法：</p>
<pre><code>curl_setopt(ch, CURLOPT_POSTFIELDS, [
    &apos;file&apos; =&gt; new CURLFile(realpath(&apos;image.png&apos;)), 
]); 
</code></pre><p>PHP5.5另外引入了CURL_SAFE_UPLOAD选项，可以强制PHP的cURL模块拒绝旧的@语法，仅接受CURLFile式的文件。5.5的默认值为false，5.6的默认值为true。</p>
<p><strong>注</strong>：PHP5.4及以下版本仅支持@语法形式；PHP5.5两种都是支持的，设置CURL_SAFE_UPLOAD＝true强制使用CURLFile方式；PHP5.6+仅支持CURLFile方式，即使设置CURL_SAFE_UPLOAD＝false也是毫无意义的。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://segmentfault.com/a/1190000000725185" target="_blank" rel="noopener">考虑PHP5.0~5.6各版本兼容性的cURL文件上传</a></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> CURL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo环境搭建]]></title>
      <url>http://jasonhzy.github.io/2016/03/29/hexo-create/</url>
      <content type="html"><![CDATA[<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>hexo是由Node.js驱动的一款快速、简单且功能强大的博客框架。它和jekyll相比，更快，更轻量。</p>
<blockquote>
<p>A fast, simple &amp; powerful blog framework, powered by Node.js.</p>
</blockquote>
<a id="more"></a>
<h2 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h2><pre><code>sudo port install nodejs #macports安装，位于/opt/local/bin/node
sudo apt-get install nodejs #ubuntu安装，位于/usr/bin/node

node -v #验证是否安装成功，出现版本号表示安装成功
</code></pre><p>如果出现node command not found，则可以添加(以ubuntu为例)：</p>
<pre><code>ln -s /usr/bin/nodejs /usr/bin/node
</code></pre><h2 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h2><pre><code>sudo port install npm #macports
sudo apt-get install npm #ubuntu

npm -v #验证是否安装成功，出现版本号表示安装成功
</code></pre><p>npm 版本升级：</p>
<pre><code>sudo npm cache clean -f
sudo npm install -g npm
</code></pre><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><pre><code>sudo npm install hexo -g  #-g表示全局安装,npm默认为当前项目安装
sudo npm install hexo-cli 

hexo -v #查看是否成功
</code></pre><p>hexo 基本命令：</p>
<pre><code>hexo init
#执行init命令初始化hexo到你指定的目录，如果已经添加过，就不用再次执行，
否则会重置项目文件

npm install #进入初始化之后的目录中执行，产生node_modules
hexo new &quot;postName&quot; #创建文章
hexo new page &quot;pageName&quot; #新建标签页面
hexo server #hexo s 运行本地服务器,用于预览主题
hexo clean #清除缓存文件 db.json 和已生成的静态文件 public
hexo generate #生成网站静态文件到默认设置的public文件夹
hexo generate --watch #监视文件变动
hexo deploy #部署项目, hexo d -g/hexo g -d可以同时执行上述两步操作
</code></pre><p>安装常用的插件：</p>
<pre><code>npm install hexo-generator-index --save
npm install hexo-generator-archive --save
npm install hexo-generator-category --save
npm install hexo-generator-tag --save
npm install hexo-generator-sitemap --save
npm install hexo-renderer-marked--save
npm install hexo-renderer-stylus --save 
npm install hexo-generator-feed --save 

npm install hexo-deployer-git --save #Hexo3.0版本后deploy git需要安装
npm install hexo-server --save #运行本地服务器，快速浏览网页
</code></pre><p>参考资料</p>
<p>1.<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo官网</a><br>2.<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题</a><br>3.<a href="http://zhiho.github.io/2015/09/29/hexo-next/" target="_blank" rel="noopener">NexT主题配置</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MAC下php环境的搭建]]></title>
      <url>http://jasonhzy.github.io/2016/03/28/mamp-config/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;MAMP 这个名字来源于 Macintosh Apache MySQL PHP，显然专门用来在 Mac环境下搭建Apache、MySQL、PHP平台。OSX中已经预装了Apache和PHP环境，但是启用、配置并安装整合MySQL仍然是一件极其复杂的工作。</p>
<a id="more"></a>
<h2 id="MAC下默认PHP环境"><a href="#MAC下默认PHP环境" class="headerlink" title="MAC下默认PHP环境"></a>MAC下默认PHP环境</h2><pre><code>开启apache, 默认根目录/Library/WebServer/Documents

sudo apachectl start ＃启动apache
/usr/sbin/httpd -D FOREGROUND #可以查看启动失败的原因
</code></pre><p>测试是否成功：<a href="http://localhost/，出现“It" target="_blank" rel="noopener">http://localhost/，出现“It</a> works!”，表示启用成功！</p>
<p>配置apache支持<a href="http://localhost/~username/访问" target="_blank" rel="noopener">http://localhost/~username/访问</a></p>
<pre><code>LoadModule php5_module libexec/apache2/libphp5.so #支持php
LoadModule rewrite_module libexec/apache2/mod_rewrite.so #支持rewrite模式
LoadModule userdir_module libexec/apache2/mod_userdir.so #启用userdir
</code></pre><p>编辑/etc/apache2/extra/httpd-userdir.conf，默认是Sites（即/Users/username/Sites）文件夹，开启：</p>
<pre><code>/etc/apache2/extra/httpd-userdir.conf
</code></pre><p>在/etc/apache2/users/文件夹下新建文件：username.conf，并添加内容：</p>
<pre><code>&lt;Directory &quot;/Users/*/Sites/&quot;&gt;
    Options Indexes MultiViews FollowSymLinks
    AllowOverride All
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
</code></pre><p>如上述操作之后，可以进行测试。</p>
<h2 id="利用macports重新安装PHP环境"><a href="#利用macports重新安装PHP环境" class="headerlink" title="利用macports重新安装PHP环境"></a>利用macports重新安装PHP环境</h2><p>安装macports，可以在<a href="https://www.macports.org/install.php" target="_blank" rel="noopener">官网下载</a></p>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><pre><code>sudo port search mysql #查看mysql，选择需要的版本
sudo port install mysql #安装mysql
</code></pre><p>利用which mysql<br>可以查看到位于/opt/local/lib/mysql55/bin下，进入此目录下：</p>
<pre><code>./mysqld_safe  #启动mysqld的服务器
./mysql_install_db #初始化mysql数据库
</code></pre><p>初始化之后，注意查看/opt/local/var/db/mysql/目录下创建的数据库的用户和用户组，一般情况下处理成：</p>
<pre><code>sudo chown -R _mysql:_mysql /opt/local/var/db/mysql/
</code></pre><p>mysql设置开机启动：</p>
<pre><code>sudo launchctl load -w /Library/LaunchDaemons/org.macports.mysql-server.plist
ps aux | grep mysql或者sudo launchctl list | grep mysql #查看是否启用
</code></pre><p>mysql取消开机启动：</p>
<pre><code>sudo launchctl unload -w /Library/LaunchDaemons/org.macports.mysql-server.plist
</code></pre><p>启用成功之后，利用status关键词查看sock文件：</p>
<pre><code>mysql&gt; status;
</code></pre><p><img src="/images/mac-mysql.png" alt="mysql"></p>
<p>可以看到sock文件：/opt/local/var/run/mysql55/mysqld.sock</p>
<p>修改php.ini文件，使用php可以连接mysql：</p>
<pre><code>pdo_mysql.default_socket= /opt/local/var/run/mysql55/mysqld.sock
mysql.default_socket = /opt/local/var/run/mysql55/mysqld.sock
mysqli.default_socket = /opt/local/var/run/mysql55/mysqld.sock
</code></pre><p>或者查看mysql的配置文件<strong>mysql_config</strong><br>利用which mysql,可以查看到位于/opt/local/lib/mysql55/bin下，进入此目录下，即：<br>/opt/local/lib/mysql55/bin/mysql_config</p>
<pre><code>$ echo $(/opt/local/lib/mysql55/bin/mysql_config --socket)
$ /opt/local/var/run/mysql55/mysqld.sock
</code></pre><h3 id="安装PHP、Apache"><a href="#安装PHP、Apache" class="headerlink" title="安装PHP、Apache"></a>安装PHP、Apache</h3><pre><code>$ sudo port install php56 php56-curl php56-gd php56-mysqli
php56-mbstring php56-mcrypt php56-imagic php56-apache2handler
</code></pre><p>如果是首次安装，需要启用<strong>php56-apache2handler</strong></p>
<pre><code>$ cd /opt/local/apache2/modules
$ sudo /opt/local/apache2/bin/apxs -a -e -n php5 mod_php56.so
</code></pre><p>启用成功返回的信息：</p>
<pre><code>[activating module `php5&apos; in /opt/local/apache2/conf/httpd.conf]
</code></pre><p>检查确认是否引用<strong>mod_php56.so</strong></p>
<pre><code># Load the PHP module
LoadModule php5_module modules/mod_php56.so
</code></pre><p><strong>配置httpd.conf</strong></p>
<p>编辑/opt/local/apache2/conf/httpd.conf，<strong>DirectoryIndex</strong>添加index.php</p>
<pre><code>DirectoryIndex index.php index.html
</code></pre><p>在httpd.conf的尾部，可以看到如下的部分，打开文件之后可以看到<strong>AddType</strong>的配置</p>
<pre><code># Include PHP configurations
Include conf/extra/mod_php56.conf
</code></pre><p><strong>参考资料</strong></p>
<p>1.<a href="https://trac.macports.org/wiki/howto/MAMP" target="_blank" rel="noopener">howto MAMP</a></p>
]]></content>
      
        <categories>
            
            <category> MAC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MAC </tag>
            
            <tag> MAMP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MAC(OS X Yosemite)支持鼠标]]></title>
      <url>http://jasonhzy.github.io/2016/03/28/mac-vim/</url>
      <content type="html"><![CDATA[<p>设置在vim中，鼠标可以控制光标快速定位：<br>临时设置：set mouse=a<br>长久设置，在~/.vimrc中添加：set mouse=a</p>
<p>但是在mac中的vim设置之后是不起作用的，解决方案如下：</p>
<a id="more"></a>
<h2 id="安装SIMBL"><a href="#安装SIMBL" class="headerlink" title="安装SIMBL"></a>安装SIMBL</h2><p>mouseterm依赖于simbl，必须先进行安装</p>
<h2 id="安装MouseTerm"><a href="#安装MouseTerm" class="headerlink" title="安装MouseTerm"></a>安装MouseTerm</h2><h2 id="启用鼠标，编辑-vimrc，添加如下信息"><a href="#启用鼠标，编辑-vimrc，添加如下信息" class="headerlink" title="启用鼠标，编辑~/.vimrc，添加如下信息"></a>启用鼠标，编辑~/.vimrc，添加如下信息</h2><pre><code>if has(&quot;mouse&quot;)
    set mouse=a
endif
</code></pre><p>参考资料：</p>
<p>1.<a href="https://bitheap.org/mouseterm/" target="_blank" rel="noopener">资料MouseTerm</a><br>2.<a href="https://github.com/brodie/mouseterm.git" target="_blank" rel="noopener">MouseTerm-Github</a><br>3.<a href="http://www.culater.net/software/SIMBL/SIMBL.php" target="_blank" rel="noopener">SIML</a><br>4.<a href="/download/SIMBL&amp;MouseTerm.zip">SIMBL&amp;MouseTerm下载</a></p>
]]></content>
      
        <categories>
            
            <category> MAC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MAC </tag>
            
            <tag> vim支持鼠标 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux上配置FTP]]></title>
      <url>http://jasonhzy.github.io/2016/03/11/linux-ftp/</url>
      <content type="html"><![CDATA[<blockquote>
<p>   文件传输协议（File Transfer    Protocol，缩写：FTP）是TCP/IP协议组中的协议之一。它属于网络传输协议的应用层。FTP服务一般运行在20和21两个端口。端口20用于在客户端和服务器之间传输数据流，而端口21用于传输控制流，并且是命令通向ftp服务器的进口。常用的FTP客户端有FileZilla、WinSCP等。</p>
</blockquote>
<p><a href="/images/ftp/ftp.swf"><img src="/images/ftp/ftp.jpg" alt="FTP工作原理"></a></p>
<a id="more"></a>
<h4 id="安装vsftp"><a href="#安装vsftp" class="headerlink" title="安装vsftp"></a>安装vsftp</h4><pre><code>yum install vsftpd -y (Redhat/CentOS)
apt-get install vsftpd -y (Ubuntu/Debian)

systemctl enable vsftpd
systemctl start vsftpd
</code></pre><h4 id="添加FTP账号和目录"><a href="#添加FTP账号和目录" class="headerlink" title="添加FTP账号和目录"></a>添加FTP账号和目录</h4><p>检查一下nologin的位置，通常在/usr/sbin/nologin或者/sbin/nologin(不允许用户登陆)下</p>
<pre><code>定义帐户名和目录
useradd -d /var/ftp -s /sbin/nologin ftp #ftp创建的账号  /var/ftp创建账号对应的目录 

修改该帐户密码
passwd ftp

修改指定目录的权限
chown -R ftp:root /var/ftp
</code></pre><h5 id="配置vsftp"><a href="#配置vsftp" class="headerlink" title="配置vsftp"></a>配置vsftp</h5><p>要修改的主要参数：</p>
<pre><code>anonymous_enable=No
local_enable=YES
write_enable=YES
local_umask=022

#vsftpd服务器的日志功能
xferlog_enable=YES
xferlog_file=/var/log/vsftpd.log

#有选择的把用户限制在家目录中，在文件chroot_list中添加要限制的用户（如上述的ftp）
#注意，多个用户每个用户占一行
chroot_list_enable=YES
chroot_list_file=/etc/vsftpd/chroot_list

#系统内所有的FTP用户都限制在家目录中
chroot_local_user=YES

#绑定IP到vsftpd
listen_address=192.168.11.120

#定制欢迎信息，FTP信息默认的就是.message
dirmessage_enable=YES
message_file=.message
</code></pre><h4 id="SELinux-开启时配置"><a href="#SELinux-开启时配置" class="headerlink" title="SELinux 开启时配置"></a>SELinux 开启时配置</h4><pre><code>主要开启参数：
setsebool ftpd_full_access on
setsebool ftp_home_dir on

查找ftp相关的SELinux bool值，给ftp访问放行
getsebool -a | grep ftp   #或者sestatus  -b | grep ftp
</code></pre><p><img src="/images/ftp/ftp-params.png" alt="FTP"></p>
<h4 id="firewalld开启ftp服务"><a href="#firewalld开启ftp服务" class="headerlink" title="firewalld开启ftp服务"></a>firewalld开启ftp服务</h4><pre><code>firewall-cmd --permanent --zone=public --add-service=ftp
firewall-cmd --reload
</code></pre><h4 id="默认配置："><a href="#默认配置：" class="headerlink" title="默认配置："></a>默认配置：</h4><pre><code>1、允许匿名用户和本地用户登陆
     anonymous_enable=YES
     local_enable=YES

2、匿名用户使用的登陆名为ftp或anonymous，口令为空；匿名用户不能离开匿名用户家目录/var/ftp,且只能下载不能上传。
3、本地用户的登录名为本地用户名，口令为此本地用户的口令；本地用户可以在自己家目录中进行读写操作；本地用户可以离开自家目录切换至有权限访问的其他目录，并在权限允许的情况下进行上传/下载。
    write_enable=YES
4、写在文件/etc/vsftpd.ftpusers中的本地用户禁止登陆。

2、配置文件格式：
vsftpd.conf 的内容非常单纯，每一行即为一项设定。若是空白行或是开头为#的一行，将会被忽略。内容的格式只有一种，如下所示
option=value
要注意的是，等号两边不能加空白。

3、匿名用户（anonymous）设置
anonymous_enable=YES/NO（YES）
控制是否允许匿名用户登入，YES 为允许匿名登入，NO 为不允许。默认值为YES。
write_enable=YES/NO（YES）
是否允许登陆用户有写权限。属于全局设置，默认值为YES。
no_anon_password=YES/NO（NO）
若是启动这项功能，则使用匿名登入时，不会询问密码。默认值为NO。
ftpftp_username=ftp
定义匿名登入的使用者名称。默认值为ftp。
anon_root=/var/ftp
使用匿名登入时，所登入的目录。默认值为/var/ftp。注意ftp目录不能是777的权限属性，即匿名用户的家目录不能有777的权限。
anon_upload_enable=YES/NO（NO）
如果设为YES，则允许匿名登入者有上传文件（非目录）的权限，只有在write_enable=YES时，此项才有效。当然，匿名用户必须要有对上层目录的写入权。默认值为NO。
anon_world_readable_only=YES/NO（YES）
如果设为YES，则允许匿名登入者下载可阅读的档案（可以下载到本机阅读，不能直接在FTP服务器中打开阅读）。默认值为YES。
anon_mkdir_write_enable=YES/NO（NO）
如果设为YES，则允许匿名登入者有新增目录的权限，只有在write_enable=YES时，此项才有效。当然，匿名用户必须要有对上层目录的写入权。默认值为NO。
anon_other_write_enable=YES/NO（NO）
如 果设为YES，则允许匿名登入者更多于上传或者建立目录之外的权限，譬如删除或者重命名。（如果anon_upload_enable=NO，则匿名用户 不能上传文件，但可以删除或者重命名已经存在的文件；如果anon_mkdir_write_enable=NO，则匿名用户不能上传或者新建文件夹，但 可以删除或者重命名已经存在的文件夹。）默认值为NO。
chown_uploads=YES/NO（NO）
设置是否改变匿名用户上传文件（非目录）的属主。默认值为NO。
chown_username=username
设置匿名用户上传文件（非目录）的属主名。建议不要设置为root。
anon_umask=077
设置匿名登入者新增或上传档案时的umask 值。默认值为077，则新建档案的对应权限为700。
deny_email_enable=YES/NO（NO）
若是启动这项功能，则必须提供一个档案/etc/vsftpd/banner_emails，内容为email address。若是使用匿名登入，则会要求输入email address，若输入的email address 在此档案内，则不允许进入。默认值为NO。
banned_email_file=/etc/vsftpd/banner_emails
此文件用来输入email address，只有在deny_email_enable=YES时，才会使用到此档案。若是使用匿名登入，则会要求输入email address，若输入的email address 在此档案内，则不允许进入。

4、本地用户设置
local_enable=YES/NO（YES）
控制是否允许本地用户登入，YES 为允许本地用户登入，NO为不允许。默认值为YES。
local_root=/home/username
当本地用户登入时，将被更换到定义的目录下。默认值为各用户的家目录。
write_enable=YES/NO（YES）
是否允许登陆用户有写权限。属于全局设置，默认值为YES。
local_umask=022
本地用户新增档案时的umask 值。默认值为077。
file_open_mode=0755
本地用户上传档案后的档案权限，与chmod 所使用的数值相同。默认值为0666。

5.欢迎语设置
dirmessage_enable=YES/NO（YES）
如果启动这个选项，那么使用者第一次进入一个目录时，会检查该目录下是否有.message这个档案，如果有，则会出现此档案的内容，通常这个档案会放置欢迎话语，或是对该目录的说明。默认值为开启。
message_file=.message
设置目录消息文件，可将要显示的信息写入该文件。默认值为.message。
banner_file=/etc/vsftpd/banner
当使用者登入时，会显示此设定所在的档案内容，通常为欢迎话语或是说明。默认值为无。如果欢迎信息较多，则使用该配置项。
ftpd_banner=Welcome to BOB&apos;s FTP server
这里用来定义欢迎话语的字符串，banner_file是档案的形式，而ftpd_banner 则是字符串的形式。预设为无。

6、控制用户是否允许切换到上级目录
在默认配置下，本地用户登入FTP后可以使用cd命令切换到其他目录，这样会对系统带来安全隐患。可以通过以下三条配置文件来控制用户切换目录。
chroot_list_enable=YES/NO（NO）
设置是否启用chroot_list_file配置项指定的用户列表文件。默认值为NO。
chroot_list_file=/etc/vsftpd.chroot_list
用于指定用户列表文件，该文件用于控制哪些用户可以切换到用户家目录的上级目录。
chroot_local_user=YES/NO（NO）
用于指定用户列表文件中的用户是否允许切换到上级目录。默认值为NO。
通过搭配能实现以下几种效果：
①当chroot_list_enable=YES，chroot_local_user=YES时，在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；未在文件中列出的用户，不能切换到其他目录。
②当chroot_list_enable=YES，chroot_local_user=NO时，在/etc/vsftpd.chroot_list文件中列出的用户，不能切换到其他目录；未在文件中列出的用户，可以切换到其他目录。
③当chroot_list_enable=NO，chroot_local_user=YES时，所有的用户均不能切换到其他目录。
④当chroot_list_enable=NO，chroot_local_user=NO时，所有的用户均可以切换到其他目录。

7、数据传输模式设置
FTP在传输数据时，可以使用二进制方式，也可以使用ASCII模式来上传或下载数据。
ascii_upload_enable=YES/NO（NO）
设置是否启用ASCII 模式上传数据。默认值为NO。
ascii_download_enable=YES/NO（NO）
设置是否启用ASCII 模式下载数据。默认值为NO。

8、访问控制设置
两种控制方式：一种控制主机访问，另一种控制用户访问。
①控制主机访问：
tcp_wrappers=YES/NO（YES）
设 置vsftpd是否与tcp wrapper相结合来进行主机的访问控制。默认值为YES。如果启用，则vsftpd服务器会检查/etc/hosts.allow 和/etc/hosts.deny 中的设置，来决定请求连接的主机，是否允许访问该FTP服务器。这两个文件可以起到简易的防火墙功能。
比如：若要仅允许192.168.0.1—192.168.0.254的用户可以连接FTP服务器，则在/etc/hosts.allow文件中添加以下内容：
vsftpd:192.168.0. :allow
all:all :deny
②控制用户访问：
对于用户的访问控制可以通过/etc目录下的vsftpd.user_list和ftpusers文件来实现。
userlist_file=/etc/vsftpd.user_list
控制用户访问FTP的文件，里面写着用户名称。一个用户名称一行。
userlist_enable=YES/NO（NO）
是否启用vsftpd.user_list文件。
userlist_deny=YES/NO（YES）
决定vsftpd.user_list文件中的用户是否能够访问FTP服务器。若设置为YES，则vsftpd.user_list文件中的用户不允许访问FTP，若设置为NO，则只有vsftpd.user_list文件中的用户才能访问FTP。
/etc /vsftpd/ftpusers文件专门用于定义不允许访问FTP服务器的用户列表（注意:如果 userlist_enable=YES,userlist_deny=NO,此时如果在vsftpd.user_list和ftpusers中都有某个 用户时，那么这个用户是不能够访问FTP的，即ftpusers的优先级要高）。默认情况下vsftpd.user_list和ftpusers，这两个 文件已经预设置了一些不允许访问FTP服务器的系统内部账户。如果系统没有这两个文件，那么新建这两个文件，将用户添加进去即可。

9、访问速率设置
anon_max_rate=0
设置匿名登入者使用的最大传输速度，单位为B/s，0 表示不限制速度。默认值为0。
local_max_rate=0
本地用户使用的最大传输速度，单位为B/s，0 表示不限制速度。预设值为0。

10、超时时间设置
accept_timeout=60
设置建立FTP连接的超时时间，单位为秒。默认值为60。
connect_timeout=60
PORT 方式下建立数据连接的超时时间，单位为秒。默认值为60。
data_connection_timeout=120
设置建立FTP数据连接的超时时间，单位为秒。默认值为120。
idle_session_timeout=300
设置多长时间不对FTP服务器进行任何操作，则断开该FTP连接，单位为秒。默认值为300 。

11、日志文件设置
xferlog_enable= YES/NO（YES）
是否启用上传/下载日志记录。如果启用，则上传与下载的信息将被完整纪录在xferlog_file 所定义的档案中。预设为开启。
xferlog_file=/var/log/vsftpd.log
设置日志文件名和路径，默认值为/var/log/vsftpd.log。
xferlog_std_format=YES/NO（NO）
如果启用，则日志文件将会写成xferlog的标准格式，如同wu-ftpd 一般。默认值为关闭。
log_ftp_protocol=YES|NO（NO）
如果启用此选项，所有的FTP请求和响应都会被记录到日志中，默认日志文件在/var/log/vsftpd.log。启用此选项时，xferlog_std_format不能被激活。这个选项有助于调试。默认值为NO。

12、定义用户配置文件
在vsftpd中，可以通过定义用户配置文件来实现不同的用户使用不同的配置。
user_config_dir=/etc/vsftpd/userconf
设置用户配置文件所在的目录。当设置了该配置项后，用户登陆服务器后，系统就会到/etc/vsftpd/userconf目录下，读取与当前用户名相同的文件，并根据文件中的配置命令，对当前用户进行更进一步的配置。
例 如：定义user_config_dir=/etc/vsftpd/userconf，且主机上有使用者 test1,test2，那么我们就在user_config_dir 的目录新增文件名为test1和test2两个文件。若是test1 登入，则会读取user_config_dir 下的test1 这个档案内的设定。默认值为无。利用用户配置文件，可以实现对不同用户进行访问速度的控制，在各用户配置文件中定义local_max_rate=XX， 即可。

13、FTP的工作方式与端口设置
FTP有两种工作方式：PORT FTP（主动模式）和PASV FTP（被动模式）
listen_port=21
设置FTP服务器建立连接所监听的端口，默认值为21。
connect_from_port_20=YES/NO
指定FTP使用20端口进行数据传输，默认值为YES。
ftp_data_port=20
设置在PORT方式下，FTP数据连接使用的端口，默认值为20。
pasv_enable=YES/NO（YES）
若设置为YES，则使用PASV工作模式；若设置为NO，则使用PORT模式。默认值为YES，即使用PASV工作模式。
pasv_max_port=0
在PASV工作模式下，数据连接可以使用的端口范围的最大端口，0 表示任意端口。默认值为0。
pasv_min_port=0
在PASV工作模式下，数据连接可以使用的端口范围的最小端口，0 表示任意端口。默认值为0。

14、与连接相关的设置
listen=YES/NO（YES）
设 置vsftpd服务器是否以standalone模式运行。以standalone模式运行是一种较好的方式，此时listen必须设置为YES，此为默 认值。建议不要更改，有很多与服务器运行相关的配置命令，需要在此模式下才有效。若设置为NO，则vsftpd不是以独立的服务运行，要受到xinetd 服务的管控，功能上会受到限制。
max_clients=0
设置vsftpd允许的最大连接数，默认值为0，表示不受限制。若设置为100时，则同时允许有100个连接，超出的将被拒绝。只有在standalone模式运行才有效。
max_per_ip=0
设置每个IP允许与FTP服务器同时建立连接的数目。默认值为0，表示不受限制。只有在standalone模式运行才有效。
listen_address=IP地址
设置FTP服务器在指定的IP地址上侦听用户的FTP请求。若不设置，则对服务器绑定的所有IP地址进行侦听。只有在standalone模式运行才有效。
setproctitle_enable=YES/NO（NO）
设置每个与FTP服务器的连接，是否以不同的进程表现出来。默认值为NO，此时使用ps aux |grep ftp只会有一个vsftpd的进程。若设置为YES，则每个连接都会有一个vsftpd的进程。

15、虚拟用户设置
虚拟用户使用PAM认证方式。
pam_service_name=vsftpd
设置PAM使用的名称，默认值为/etc/pam.d/vsftpd。
guest_enable= YES/NO（NO）
启用虚拟用户。默认值为NO。
guest_username=ftp
这里用来映射虚拟用户。默认值为ftp。
virtual_use_local_privs=YES/NO（NO）
当该参数激活（YES）时，虚拟用户使用与本地用户相同的权限。当此参数关闭（NO）时，虚拟用户使用与匿名用户相同的权限。默认情况下此参数是关闭的（NO）。

16、其他设置
text_userdb_names= YES/NO（NO）
设置在执行ls –la之类的命令时，是显示UID、GID还是显示出具体的用户名和组名。默认值为NO，即以UID和GID方式显示。若希望显示用户名和组名，则设置为YES。
ls_recurse_enable=YES/NO（NO）
若是启用此功能，则允许登入者使用ls –R（可以查看当前目录下子目录中的文件）这个指令。默认值为NO。
hide_ids=YES/NO（NO）
如果启用此功能，所有档案的拥有者与群组都为ftp，也就是使用者登入使用ls -al之类的指令，所看到的档案拥有者跟群组均为ftp。默认值为关闭。
download_enable=YES/NO（YES）
如果设置为NO，所有的文件都不能下载到本地，文件夹不受影响。默认值为YES。
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> FTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeigniter集成smarty]]></title>
      <url>http://jasonhzy.github.io/2016/02/27/ci-smarty/</url>
      <content type="html"><![CDATA[<blockquote>
<p>CodeIgniter 是一个小巧但功能强大的 PHP 框架，作为一个简单而“优雅”的工具包，它可以为开发者们建立功能完善的<br>Web应用程序,smarty的模板机制很强大，一般情况下CI无需整合其他模板标签，因为PHP本身就是一种标签，简单易用。但两者配合起来使用，更加快了开发效率。</p>
</blockquote>
<a id="more"></a>
<p>codeigniter集成smarty配置如下：</p>
<h4 id="准备代码包"><a href="#准备代码包" class="headerlink" title="准备代码包"></a>准备代码包</h4><p>下载codeigniter最新版本：<a href="http://codeigniter.org.cn/" target="_blank" rel="noopener">http://codeigniter.org.cn/</a><br>下载smarty最新版本：<a href="http://www.smarty.net/" target="_blank" rel="noopener">http://www.smarty.net/</a></p>
<h4 id="配置smarty"><a href="#配置smarty" class="headerlink" title="配置smarty"></a>配置smarty</h4><p>在CodeIgniter的application目录下的third_party目录中新建一个名为smarty的目录，将解压出来的libs包复制到该目录中<br><img src="/images/ci_smarty/smarty.png" alt="ci_smarty"><br><img src="/images/ci_smarty/smarty_lib.png" alt="ci_smarty"></p>
<h4 id="创建模板目录"><a href="#创建模板目录" class="headerlink" title="创建模板目录"></a>创建模板目录</h4><p>在application目录的views目录中创建两个文件夹templates、templates_c</p>
<h4 id="编写安装代码"><a href="#编写安装代码" class="headerlink" title="编写安装代码"></a>编写安装代码</h4><p>从<a href="http://www.coolphptools.com/codeigniter-smarty下载代码,Smarty.php(复制至appliction/libraries目录中)，并将文件名修改为Ci_smarty.php" target="_blank" rel="noopener">http://www.coolphptools.com/codeigniter-smarty下载代码,Smarty.php(复制至appliction/libraries目录中)，并将文件名修改为Ci_smarty.php</a></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">if</span> (!defined(<span class="string">'BASEPATH'</span>)) <span class="keyword">exit</span>(<span class="string">'No direct script access allowed'</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Smarty Class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>		CodeIgniter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@subpackage</span>	Libraries</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@category</span>	Smarty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>		Kepler Gelotte</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span>		http://www.coolphptools.com/codeigniter-smarty</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">require_once</span>( APPPATH.<span class="string">'third_party/smarty/libs/Smarty.class.php'</span> );</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CI_Smarty</span> <span class="keyword">extends</span> <span class="title">Smarty</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">parent</span>::__construct();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">$this</span>-&gt;compile_dir = APPPATH . <span class="string">"views/templates_c"</span>;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;template_dir = APPPATH . <span class="string">"views/templates"</span>;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;assign( <span class="string">'APPPATH'</span>, APPPATH );</span><br><span class="line">		<span class="keyword">$this</span>-&gt;assign( <span class="string">'BASEPATH'</span>, BASEPATH );</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Assign CodeIgniter object by reference to CI</span></span><br><span class="line">		<span class="keyword">if</span> ( method_exists( <span class="keyword">$this</span>, <span class="string">'assignByRef'</span>) )</span><br><span class="line">		&#123;</span><br><span class="line">			$ci =&amp; get_instance();</span><br><span class="line">			<span class="keyword">$this</span>-&gt;assignByRef(<span class="string">"ci"</span>, $ci);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		log_message(<span class="string">'debug'</span>, <span class="string">"Smarty Class Initialized"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *  Parse a template using the Smarty engine</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * This is a convenience method that combines assign() and</span></span><br><span class="line"><span class="comment">	 * display() into one step. </span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * Values to assign are passed in an associative array of</span></span><br><span class="line"><span class="comment">	 * name =&gt; value pairs.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * If the output is to be returned as a string to the caller</span></span><br><span class="line"><span class="comment">	 * instead of being output, pass true as the third parameter.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@access</span>	public</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span>	string</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span>	array</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span>	bool</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span>	string</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">view</span><span class="params">($template, $data = array<span class="params">()</span>, $return = FALSE)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">foreach</span> ($data <span class="keyword">as</span> $key =&gt; $val)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;assign($key, $val);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> ($return == <span class="keyword">FALSE</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			$CI =&amp; get_instance();</span><br><span class="line">			<span class="keyword">if</span> (method_exists( $CI-&gt;output, <span class="string">'set_output'</span> ))</span><br><span class="line">			&#123;</span><br><span class="line">				$CI-&gt;output-&gt;set_output( <span class="keyword">$this</span>-&gt;fetch($template) );</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				$CI-&gt;output-&gt;final_output = <span class="keyword">$this</span>-&gt;fetch($template);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;fetch($template);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// END Smarty Class</span></span><br></pre></td></tr></table></figure>
<h4 id="更新CodeIgniter配置"><a href="#更新CodeIgniter配置" class="headerlink" title="更新CodeIgniter配置"></a>更新CodeIgniter配置</h4><p>修改application/config/autoload.php文件中的libraries项，让页面自动载入smarty，即：$autoload[‘libraries’]<br>= array(‘ci_smarty’)。如果不在这里配置，只需在要用到smarty的地方显示调用$this-&gt;load-&gt;library(‘ci_smarty’);</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>编写控制器：application/controllers/Example.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">CI_Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// This example is taken from the Smarty demo and modified slightly</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"Name"</span>,<span class="string">"Fred Irving Johnathan Bradley Peppergill"</span>);</span><br><span class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"FirstName"</span>,<span class="keyword">array</span>(<span class="string">"John"</span>,<span class="string">"Mary"</span>,<span class="string">"James"</span>,<span class="string">"Henry"</span>));</span><br><span class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"LastName"</span>,<span class="keyword">array</span>(<span class="string">"Doe"</span>,<span class="string">"Smith"</span>,<span class="string">"Johnson"</span>,<span class="string">"Case"</span>));</span><br><span class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"Class"</span>,<span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>), <span class="keyword">array</span>(<span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"G"</span>, <span class="string">"H"</span>), </span><br><span class="line">				<span class="keyword">array</span>(<span class="string">"I"</span>, <span class="string">"J"</span>, <span class="string">"K"</span>, <span class="string">"L"</span>), <span class="keyword">array</span>(<span class="string">"M"</span>, <span class="string">"N"</span>, <span class="string">"O"</span>, <span class="string">"P"</span>)));</span><br><span class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"contacts"</span>, <span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">"phone"</span> =&gt; <span class="string">"555-1234"</span>, <span class="string">"fax"</span> =&gt; <span class="string">"555-2345"</span>, </span><br><span class="line">			<span class="string">"cell"</span> =&gt; <span class="string">"999-9999"</span>), <span class="keyword">array</span>(<span class="string">"phone"</span> =&gt; <span class="string">"555-4444"</span>, <span class="string">"fax"</span> =&gt; <span class="string">"555-3333"</span>, <span class="string">"cell"</span> =&gt; <span class="string">"888-8888"</span>)));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"state_values"</span>, <span class="keyword">array</span>( <span class="string">'AL'</span>, <span class="string">'AK'</span>, <span class="string">'AZ'</span>, <span class="string">'AR'</span>, <span class="string">'CA'</span>, <span class="string">'CO'</span>, <span class="string">'CT'</span>, <span class="string">'DE'</span>, </span><br><span class="line">			<span class="string">'FL'</span>, <span class="string">'GA'</span>, <span class="string">'HI'</span>, <span class="string">'ID'</span>, <span class="string">'IL'</span>, <span class="string">'IN'</span>, <span class="string">'IA'</span>, <span class="string">'KS'</span>, <span class="string">'KY'</span>, <span class="string">'LA'</span>, <span class="string">'ME'</span>, <span class="string">'MD'</span>, <span class="string">'MA'</span>, <span class="string">'MI'</span>, <span class="string">'MN'</span>, </span><br><span class="line">			<span class="string">'MS'</span>, <span class="string">'MO'</span>, <span class="string">'MT'</span>, <span class="string">'NE'</span>, <span class="string">'NV'</span>, <span class="string">'NH'</span>, <span class="string">'NJ'</span>, <span class="string">'NM'</span>, <span class="string">'NY'</span>, <span class="string">'NC'</span>, <span class="string">'ND'</span>, <span class="string">'OH'</span>, <span class="string">'OK'</span>, <span class="string">'OR'</span>, <span class="string">'PA'</span>, </span><br><span class="line">			<span class="string">'RI'</span>, <span class="string">'SC'</span>, <span class="string">'SD'</span>, <span class="string">'TN'</span>, <span class="string">'TX'</span>, <span class="string">'UT'</span>, <span class="string">'VT'</span>, <span class="string">'VA'</span>, <span class="string">'WA'</span>, <span class="string">'WV'</span>, <span class="string">'WI'</span>, <span class="string">'WY'</span> ));</span><br><span class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"state_output"</span>, <span class="keyword">array</span>( <span class="string">'Alabama'</span>, <span class="string">'Alaska'</span>, <span class="string">'Arizona'</span>, <span class="string">'Arkansas'</span>, <span class="string">'California'</span>,</span><br><span class="line">			<span class="string">'Colorado'</span>, <span class="string">'Connecticut'</span>, <span class="string">'Delaware'</span>, <span class="string">'Florida'</span>, <span class="string">'Georgia'</span>, <span class="string">'Hawaii'</span>, <span class="string">'Idaho'</span>, <span class="string">'Illinois'</span>, <span class="string">'Indiana'</span>, </span><br><span class="line">			<span class="string">'Iowa'</span>, <span class="string">'Kansas'</span>, <span class="string">'Kentucky'</span>, <span class="string">'Louisiana'</span>, <span class="string">'Maine'</span>, <span class="string">'Maryland'</span>, <span class="string">'Massachusetts'</span>, <span class="string">'Michigan'</span>, </span><br><span class="line">			<span class="string">'Minnesota'</span>, <span class="string">'Mississippi'</span>, <span class="string">'Missouri'</span>, <span class="string">'Montana'</span>, <span class="string">'Nebraska'</span>, <span class="string">'Nevada'</span>, <span class="string">'New hampshire'</span>, </span><br><span class="line">			<span class="string">'New Jersey'</span>, <span class="string">'New Mexico'</span>, <span class="string">'New York'</span>, <span class="string">'North Carolina'</span>, <span class="string">'North Dakota'</span>, <span class="string">'Ohio'</span>, <span class="string">'Oklahoma'</span>, </span><br><span class="line">			<span class="string">'Oregon'</span>, <span class="string">'Pennsylvania'</span>, <span class="string">'Rhode Island'</span>, <span class="string">'South Carolina'</span>, <span class="string">'South Dakota'</span>, <span class="string">'Tennessee'</span>, </span><br><span class="line">			<span class="string">'Texas'</span>, <span class="string">'Utah'</span>, <span class="string">'Vermont'</span>, <span class="string">'Virginia'</span>, <span class="string">'Washington'</span>,	<span class="string">'West Virginia'</span>, <span class="string">'Wisconsin'</span>, <span class="string">'Wyoming'</span> ));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// english is the default if you don't set lang</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"lang"</span>, <span class="string">"english"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Set the validation rules if this is a submit</span></span><br><span class="line">		<span class="keyword">if</span> ( <span class="keyword">$this</span>-&gt;input-&gt;post(<span class="string">'action'</span>) == <span class="string">'submit'</span> )</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;form_validation-&gt;set_rules(<span class="string">'username'</span>, <span class="string">'Username'</span>, </span><br><span class="line">					<span class="string">'trim|required|min_length[5]|max_length[12]|xss_clean'</span>);</span><br><span class="line">			<span class="keyword">$this</span>-&gt;form_validation-&gt;set_rules(<span class="string">'password'</span>, <span class="string">'Password'</span>, </span><br><span class="line">					<span class="string">'trim|required|matches[passconf]|md5'</span>);</span><br><span class="line">			<span class="keyword">$this</span>-&gt;form_validation-&gt;set_rules(<span class="string">'passconf'</span>, <span class="string">'Password Confirmation'</span>, <span class="string">'trim|required'</span>);</span><br><span class="line">			<span class="keyword">$this</span>-&gt;form_validation-&gt;set_rules(<span class="string">'email'</span>, <span class="string">'Email'</span>, <span class="string">'trim|required|valid_email'</span>);</span><br><span class="line">			<span class="keyword">$this</span>-&gt;form_validation-&gt;set_rules(<span class="string">'state'</span>, <span class="string">'State'</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> ( ! <span class="keyword">$this</span>-&gt;form_validation-&gt;run() )</span><br><span class="line">			&#123;</span><br><span class="line">				$data[<span class="string">'error'</span>] = <span class="string">'Check and fix the form errors below'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				$data[<span class="string">'message'</span>] = <span class="string">'Thanks for posting!'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// These assignments are passed by the associative array</span></span><br><span class="line">		$data[<span class="string">'title'</span>] = <span class="string">'Welcome to the Smarty Website'</span>;</span><br><span class="line">		$data[<span class="string">'bold'</span>] = <span class="keyword">true</span>;</span><br><span class="line">		$data[<span class="string">'ip_address'</span>] = <span class="keyword">$this</span>-&gt;input-&gt;server(<span class="string">'REMOTE_ADDR'</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Calling the convenience function view() that allows passing data</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;view( <span class="string">'example.tpl'</span>, $data );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="/images/ci_smarty/ci_example.png" alt="Example"></p>
<p>参考资料<br><a href="http://www.coolphptools.com/codeigniter-smarty" target="_blank" rel="noopener">CodeIgniter+Smarty - Perfect Together</a><br><a href="/download/codeigniter-smarty-3.1.zip">代码下载</a></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Codeigniter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SVN 服务器搭建]]></title>
      <url>http://jasonhzy.github.io/2016/02/26/create-svn/</url>
      <content type="html"><![CDATA[<blockquote>
<p>   SVN是Subversion的简称，是一个开放源代码的版本控制系统，相较于RCS、CVS，它采用了分支管理系统，它的设计目标就是取代CVS。互联网上很多版本控制服务已从CVS迁移到Subversion。</p>
</blockquote>
<a id="more"></a>
<h4 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h4><pre><code>svnadmin create /var/svn/svnrepos
</code></pre><h4 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h4><pre><code>svn import ./myproject svn://127.0.0.1:3390/myproject -m &quot;import project&quot;　(默认端口3690)
</code></pre><h4 id="配置authz-passwd-svnserve-conf"><a href="#配置authz-passwd-svnserve-conf" class="headerlink" title="配置authz passwd  svnserve.conf"></a>配置authz passwd  svnserve.conf</h4><h5 id="authz：文件是权限控制文件"><a href="#authz：文件是权限控制文件" class="headerlink" title="authz：文件是权限控制文件"></a>authz：文件是权限控制文件</h5><pre><code>[groups]
admin = jason,test

[test:/]
@admin = rw
test1 = rw
* = r
</code></pre><h5 id="passwd：帐号密码文件"><a href="#passwd：帐号密码文件" class="headerlink" title="passwd：帐号密码文件"></a>passwd：帐号密码文件</h5><pre><code>[users]
jason = 123
test = 123
test1 = 123
</code></pre><h5 id="svnserve-conf：SVN服务配置文件"><a href="#svnserve-conf：SVN服务配置文件" class="headerlink" title="svnserve.conf：SVN服务配置文件"></a>svnserve.conf：SVN服务配置文件</h5><pre><code>anon-access = none
auth-access = write
password-db = passwd
authz-db = authz
realm = test
</code></pre><h4 id="启动svn版本库"><a href="#启动svn版本库" class="headerlink" title="启动svn版本库"></a>启动svn版本库</h4><pre><code>svnserve -d -r /var/svn/svnrepos
svnserve -d -r /var/svn/svnrepos --listen-port 3390 #如果已经有svn在运行，可以换一个端口运行
</code></pre><h4 id="显示项目列表"><a href="#显示项目列表" class="headerlink" title="显示项目列表"></a>显示项目列表</h4><pre><code>svn list svn://127.0.0.1:3390/myproject
</code></pre><h4 id="删除项目或者文件"><a href="#删除项目或者文件" class="headerlink" title="删除项目或者文件"></a>删除项目或者文件</h4><pre><code>svn delete -m &quot;delete project&quot; svn://127.0.0.1/pinet
svn delete -m &quot;delete file&quot; svn://127.0.0.1/pinet/test.php
</code></pre><h4 id="SVN的基本操作命令"><a href="#SVN的基本操作命令" class="headerlink" title="SVN的基本操作命令"></a>SVN的基本操作命令</h4><pre><code>A = 已将一个文件添加到您的工作副本中。
U = 已更新您的工作副本中的一个文件。
D = 已从您的工作副本中删除一个文件。
R = 已替换您的工作副本中的一个文件。
G = 已成功合并了一个文件。
C = 一个文件已合并了必须手动解决的冲突
X =    未纳入版本控制的目录，但是与Subversion的外部定义关联，可以参考“外部定义”
? = 未纳入版本控制
! = 该项目已遗失(被非 svn 命令删除)或不完整
~ = 版本控制下的项目与其它类型的项目重名

1、svn add */file/dir  #添加文件或者文件夹，强制添加加上参数--force即可
2、svn commit -m “提交的信息”　#提交代码
3、svn update                    #获取代码
4、svn revert -R 文件或者文件夹 #恢复代码
5、svn status -u 　            #显示更新信息，包括当前版本
6、svn info                    #显示详细信息
</code></pre><h4 id="忽略文件或者文件夹"><a href="#忽略文件或者文件夹" class="headerlink" title="忽略文件或者文件夹"></a>忽略文件或者文件夹</h4><pre><code>忽略文件夹，则当前文件夹必须在版本库内，例如：uploads文件夹信息
/uploads
/uploads/banner
/uploads/banner/aaa
/uploads/activity
/uploads/activity/bbb

uploads必须已经在版本库中
1）、现在忽略uploads下的所有文件（包括文件、文件夹）
即：svn propset svn:ignore ‘*’ /uploads
2）、现在忽略uploads下的文件夹activity
即：svn propset svn:ignore ‘activity’ /uploads
3）、svn提交错误”svn丢失了预定增加的”
解决方案：svn revert –recursive .
</code></pre><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>当我们提交或更新SVN文件时，经常会遇到如下冲突提示:</p>
<pre><code>Select: (p) postpone, (df) diff-full, (e) edit, (r) resolved,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options:
</code></pre><p>输入 ‘s’ 显示所有选项</p>
<pre><code>Select: (p) postpone, (df) diff-full, (e) edit, (r) resolved,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: s

(e)  - 在编辑器中修改合并后的文件  [edit]
(df) - 显示写入合并文件的所有改动
(r)  - 接受文件的合并版本
(dc) - 显示所有冲突 (忽略已合并版本)
(mc) - 对于所有冲突，使用我的版本 [mine-conflict]
(tc) - 对于所有冲突，使用他们的版本 [theirs-conflict]
(mf) - 整个文件使用我的版本(纵然没有冲突) [mine-full]
(tf) - 整个文件使用他们的版本 [theirs-full]
(m)  - 使用内部合并工具解决冲突
(l)  - 执行外部工具解决冲突 [launch]
(p)  - 编辑冲突推迟解决 [postpone]
(q)  - 推迟解决所有剩余的冲突
(s)  - 显示此列表(同 &apos;h&apos; 或 &apos;?&apos;)
</code></pre><p>根据不同需求进行选择操作，习惯的操作是先显示文件冲突的地方：<br><img src="/images/svn/svn-conflict-df.png" alt="svn冲突"></p>
<p>当选择‘p’时结果如下：<br><img src="/images/svn/svn-conflict-p.png" alt="svn冲突"></p>
<pre><code>a.php.mine             是冲突前自己的文件
a.php.版本号           是冲突前本地的版本文件
a.php.服务器的版本号   是冲突后服务器版本文件
冲突解决之后提交代码的时候，注意把这三个文件删除
</code></pre><h4 id="SVN标准目录结构"><a href="#SVN标准目录结构" class="headerlink" title="SVN标准目录结构"></a>SVN标准目录结构</h4><pre><code>myproject/
    trunk/
        pinet/
        test.php
    branches/
    tags/
</code></pre><p>1、创建分支<br>svn copy svn://192.168.11.110/myproject/trunk/pinet  svn://192.168.11.110/myproject/branches/pinet01 -m “create new branch”<br>2、分支合并<br>假设现在Branch上fix了一系列的bug，现在我们想把针对Branch的改变同步到Trunk上：<br>a)切换分支：svn switch svn://192.168.11.110/myproject/trunk/pinet<br>b)合并：svn merge svn://192.168.11.110/myproject/branches/pinet01<br>c)出现冲突则解决冲突问题，之后标记解决冲突：svn resolved file.txt或者svn resolve –accept working<br>d)查看当前Branch中已经有那些改动已经被合并到Trunk中:<br>svn mergeinfo svn://192.168.11.110/pinet/branches/pinet01<br>e)查看Branch中那些改动还未合并:<br>svn mergeinfo svn://192.168.11.110/pinet/branches/pinet01 –show-revs eligible</p>
]]></content>
      
        <categories>
            
            <category> SVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SVN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法]]></title>
      <url>http://jasonhzy.github.io/2016/02/19/sort-algorithm/</url>
      <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>&emsp;&emsp;<strong>排序(Sorting)</strong>是计算机程序设计中的一种重要操作，它的功能是将一个数据元素（或记录）的任意序列，重新排列成一个关键字有序的序列。排序有内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p>
<p>&emsp;&emsp;<strong>排序的稳定性</strong>：假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，ri=rj，且ri在rj之前，而在排序后的序列中，ri仍在rj之前，则称这种排序算法是稳定的；否则称为不稳定的。<br><a id="more"></a><br>算法性能比较如下图所示：</p>
<p><img src="/images/sort-algorithm/sort.png" alt="排序算法"></p>
<h3 id="排序算法归纳"><a href="#排序算法归纳" class="headerlink" title="排序算法归纳"></a>排序算法归纳</h3><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><h5 id="直接插入排序-Straight-Insertion-Sort"><a href="#直接插入排序-Straight-Insertion-Sort" class="headerlink" title="直接插入排序(Straight Insertion Sort)"></a>直接插入排序(Straight Insertion Sort)</h5><p><strong>基本思想</strong>：将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。<br>要点：设立哨兵，作为临时存储和判断数组边界之用。<br>直接插入排序示例：<br><img src="/images/sort-algorithm/straight_insertion.jpg" alt="排序示例"></p>
<p>如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，<font color="red">我所以插入排序是稳定的</font></p>
<p><strong>算法的实现</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span><span class="params">($a, $num)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>($i= <span class="number">1</span>; $i&lt;$num; $i++) &#123;  </span><br><span class="line">		<span class="keyword">if</span>($a[$i] &lt; $a[$i<span class="number">-1</span>]) &#123;               <span class="comment">//若第i个元素大于i-1元素，直接插入。小于的话，移动有序表后插入  </span></span><br><span class="line">			$j= $i<span class="number">-1</span>;   </span><br><span class="line">			$x = $a[$i];        <span class="comment">//复制为哨兵，即存储待排序元素  </span></span><br><span class="line">			$a[$i] = $a[$i<span class="number">-1</span>];           <span class="comment">//先后移一个元素  </span></span><br><span class="line">			<span class="keyword">while</span>($x &lt; $a[$j])&#123;  <span class="comment">//查找在有序表的插入位置  </span></span><br><span class="line">				$a[$j+<span class="number">1</span>] = $a[$j];  </span><br><span class="line">				$j--;         <span class="comment">//元素后移  </span></span><br><span class="line">			&#125;  </span><br><span class="line">			$a[$j+<span class="number">1</span>] = $x; <span class="comment">//插入到正确位置</span></span><br><span class="line">		&#125;  </span><br><span class="line">		<span class="keyword">echo</span> $i . <span class="string">':'</span> . implode($a, <span class="string">','</span>).PHP_EOL; <span class="comment">//打印每趟排序的结果</span></span><br><span class="line">	&#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertion_sort</span><span class="params">(&amp;$arr)</span> </span>&#123; </span><br><span class="line">	<span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt; count($arr); $i++) &#123;</span><br><span class="line">		$temp = $arr[$i];</span><br><span class="line">		<span class="keyword">for</span> ($j = $i - <span class="number">1</span>; $j &gt;= <span class="number">0</span> &amp;&amp; $arr[$j] &gt; $temp; $j--)</span><br><span class="line">			$arr[$j + <span class="number">1</span>] = $arr[$j];</span><br><span class="line">	 	$arr[$j + <span class="number">1</span>] = $temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> implode($arr, <span class="string">','</span>).PHP_EOL; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h5><p><strong>基本思想</strong><br>1）计算 0 ~ i-1 的中间点，用 i 索引处的元素与中间值进行比较，如果 i<br>引处的元素大，说明要插入的这个元素应该在中间值和刚加入i索引之间，反之，就是在刚开始的位置 到中间值的位置，这样很简单的完成了折半；<br>2）在相应的半个范围里面找插入的位置时，不断的用（1）步骤缩小范围，不停的折半，范围依次缩小为 1/2  1/4  1/8 …….快速的确定出第 i<br>个元素要插在什么地方；<br>3）确定位置之后，将整个序列后移，并将元素插入到相应位置。</p>
<p><strong>算法实现</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BInsertSort</span><span class="params">($arr, $count)</span>  </span>&#123; <span class="comment">/*对作折半插入排序。*/</span>  </span><br><span class="line">	<span class="keyword">for</span>($i=<span class="number">1</span>; $i&lt;$count; ++$i) 	&#123;  </span><br><span class="line">		$temp = $arr[$i]; <span class="comment">/* 将$arr[$i]暂存到$temp */</span>  </span><br><span class="line">		$low=<span class="number">0</span>;  </span><br><span class="line">		$high=$i<span class="number">-1</span>;  </span><br><span class="line">		<span class="keyword">while</span>($low&lt;=$high)  </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">/* 在$arr[low..high]中折半查找有序插入的位置 */</span>  </span><br><span class="line">			$mid= intval(($low+$high)/<span class="number">2</span>); <span class="comment">/* 折半 * */</span>  </span><br><span class="line">			<span class="keyword">if</span>($temp &lt; $arr[$mid])  </span><br><span class="line">				$high = $mid<span class="number">-1</span>; <span class="comment">/* 插入点在低半区* */</span>  </span><br><span class="line">			<span class="keyword">else</span>  </span><br><span class="line">				$low = $mid + <span class="number">1</span>; <span class="comment">/* 插入点在高半区* */</span>  </span><br><span class="line">		&#125;  </span><br><span class="line">		<span class="keyword">for</span>($j=$i<span class="number">-1</span>;$j&gt;=$mid;$j--)  </span><br><span class="line">			$arr[$j+<span class="number">1</span>]=$arr[$j]; <span class="comment">/* 记录后移 * */</span>  </span><br><span class="line">		$arr[$low]=$temp; <span class="comment">/* 插入 * */</span>  </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="keyword">echo</span> implode($arr,<span class="string">','</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="希尔排序（Shell-s-Sort）"><a href="#希尔排序（Shell-s-Sort）" class="headerlink" title="希尔排序（Shell`s Sort）"></a>希尔排序（Shell`s Sort）</h5><p>希尔排序是1959 年由D.L.Shell 提出来的，相对直接排序有较大的改进。希尔排序又叫缩小增量排序</p>
<p><strong>基本思想</strong><br>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。操作方法：<br>1、选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；<br>2、按增量序列个数k，对序列进行k 趟排序；<br>3、每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m<br>的子序列，分别对各子表进行直接插入排序。仅增量因子为1时，整个序列作为一个表来处理，表长度即为整个序列的长度。<br>希尔排序的示例：<br><img src="/images/sort-algorithm/shell-sort.jpg" alt="希尔排序"></p>
<p><strong>算法实现</strong></p>
<p>简单处理增量序列：增量序列d = {n/2 ,n/4, n/8 …..1} n为要排序数的个数<br>即：先将要排序的一组记录按某个增量d（n/2,n为要排序数的个数）分成若干组子序列，每组中记录的下标相差d.对每组中全部元素进行直接插入排序，然后再用一个较小的增量（d/2）对它进行分组，在每组中再进行直接插入排序。继续不断缩小增量直至为1，最后使用直接插入排序完成排序。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">	$l = count($a);</span><br><span class="line">	$d = floor($l/<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">while</span>($d&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span>($i=$d; $i&lt;$l; $i++) &#123;</span><br><span class="line">			$t = $a[$i];</span><br><span class="line">			$j = $i-$d;<span class="comment">// 获取组内上一个数据 , 然后不断往前与当前数据比较</span></span><br><span class="line">			<span class="keyword">while</span>($j&gt;=<span class="number">0</span> &amp;&amp; $a[$j]&gt;$t)&#123;</span><br><span class="line">				$a[$j+$d] = $a[$j];</span><br><span class="line">				$j -= $d;</span><br><span class="line">			&#125;</span><br><span class="line">			$a[$j+$d] = $t;</span><br><span class="line">		&#125;</span><br><span class="line">		$d = floor($d/<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> $a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><h5 id="简单选择排序（Simple-Selection-Sort）"><a href="#简单选择排序（Simple-Selection-Sort）" class="headerlink" title="简单选择排序（Simple Selection Sort）"></a>简单选择排序（Simple Selection Sort）</h5><p><strong>基本思想</strong>：在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。<br>第一趟，从n 个记录中找出关键码最小的记录与第一个记录交换；<br>第二趟，从第二个记录开始的n-1 个记录中再选出关键码最小的记录与第二个记录交换；<br>以此类推…..<br>第i 趟，则从第i个记录开始的n-i+1 个记录中选出关键码最小的记录与第i 个记录交换，直到整个序列按关键码有序。</p>
<p><strong>算法实现</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span><span class="params">($arr)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//双重循环完成，外层控制轮数，内层控制比较次数</span></span><br><span class="line">	$len=count($arr);</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;$len<span class="number">-1</span>; $i++) &#123;</span><br><span class="line">        <span class="comment">//先假设最小的值的位置</span></span><br><span class="line">        $p = $i;</span><br><span class="line">        <span class="keyword">for</span>($j=$i+<span class="number">1</span>; $j&lt;$len; $j++) &#123;</span><br><span class="line">            <span class="comment">//$arr[$p] 是当前已知的最小值</span></span><br><span class="line">            <span class="keyword">if</span>($arr[$p] &gt; $arr[$j]) &#123;</span><br><span class="line">				<span class="comment">//比较，发现更小的,记录下最小值的位置；并且在下次比较时采用已知的最小值进行比较。</span></span><br><span class="line">                $p = $j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//已经确定了当前的最小值的位置，保存到$p中。如果发现最小值的位置与当前假设的位置$i不同，</span></span><br><span class="line">		<span class="comment">//则位置互换即可。</span></span><br><span class="line">        <span class="keyword">if</span>($p != $i) &#123;</span><br><span class="line">            $tmp = $arr[$p];</span><br><span class="line">            $arr[$p] = $arr[$i];</span><br><span class="line">            $arr[$i] = $tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回最终结果</span></span><br><span class="line">    <span class="keyword">return</span> $arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="二元选择排序-简单选择排序的改进"><a href="#二元选择排序-简单选择排序的改进" class="headerlink" title="二元选择排序(简单选择排序的改进)"></a>二元选择排序(简单选择排序的改进)</h5><p>简单选择排序，每趟循环只能确定一个元素排序后的定位。我们可以考虑改进为每趟循环确定两个元素（当前趟最大和最小记录）的位置,从而减少排序所需的循环次数。改进后对n个数据进行排序，最多只需进行[n/2]趟循环即可。具体实现如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">improve_selectSort</span><span class="params">(&amp;$arr, $n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>($i=<span class="number">1</span>; $i &lt;= $n/<span class="number">2</span>; $i++) &#123;    </span><br><span class="line">		<span class="comment">// 做不超过n/2趟选择排序   </span></span><br><span class="line">		$min = $i; </span><br><span class="line">		$max = $i ; <span class="comment">//分别记录最大和最小关键字记录位置  </span></span><br><span class="line">		<span class="keyword">for</span> ($j= $i+<span class="number">1</span>; $j&lt;= $n-$i; $j++) &#123;  </span><br><span class="line">			<span class="keyword">if</span> ($arr[$j] &gt; $arr[$max]) &#123;   </span><br><span class="line">				$max = $j ; <span class="keyword">continue</span> ;   </span><br><span class="line">			&#125;    </span><br><span class="line">			<span class="keyword">if</span> ($arr[$j]&lt; $arr[$min]) &#123;   </span><br><span class="line">				$min = $j ;   </span><br><span class="line">			&#125;     </span><br><span class="line">		&#125;    </span><br><span class="line">		<span class="comment">//该交换操作还可分情况讨论以提高效率  </span></span><br><span class="line">		$tmp = $arr[$i<span class="number">-1</span>]; $arr[$i<span class="number">-1</span>] = $arr[$min]; $arr[$min] = $tmp;  </span><br><span class="line">		$tmp = $arr[$n-$i]; $arr[$n-$i] = $arr[$max]; $arr[$max] = $tmp;   </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="堆排序（Heap-Sort）"><a href="#堆排序（Heap-Sort）" class="headerlink" title="堆排序（Heap Sort）"></a>堆排序（Heap Sort）</h5><p>堆排序是一种树形选择排序，是对直接选择排序的有效改进</p>
<p><strong>基本思想</strong>：堆的定义如下：具有n个元素的序列（k1,k2,…,kn),当且仅当满足<br><img src="/images/sort-algorithm/heap_sort0.jpg" alt="堆排序"></p>
<p>时称之为堆。由堆的定义可以看出，堆顶元素（即第一个元素）必为最小项（小顶堆）。<br>若以一维数组存储一个堆，则堆对应一棵完全二叉树，且所有非叶结点的值均不大于(或不小于)其子女的值，根结点（堆顶元素）的值是最小(或最大)的。如：</p>
<p>a)大顶堆序列：(96, 83,27,38,11,09)<br>b)小顶堆序列：(12，36，24，85，47，30，53，91)<br><img src="/images/sort-algorithm/heap_sort1.jpg" alt="堆排序"></p>
<p>初始时把要排序的n个数的序列看作是一棵顺序存储的二叉树（一维数组存储二叉树），调整它们的存储序，使之成为一个堆，将堆顶元素输出，得到n<br>个元素中最小(或最大)的元素，这时堆的根节点的数最小（或者最大）。然后对前面(n-1)个元素重新调整使之成为堆，输出堆顶元素，得到n<br>个元素中次小(或次大)的元素。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有n个节点的有序序列。称这个过程为堆排序。</p>
<p>因此，实现堆排序需解决两个问题：</p>
<ol>
<li>如何将n 个待排序的数建成堆；</li>
<li>输出堆顶元素后，怎样调整剩余n-1 个元素，使其成为一个新堆。</li>
</ol>
<p>首先讨论第二个问题：输出堆顶元素后，对剩余n-1元素重新建成堆的调整过程。<br>调整小顶堆的方法：</p>
<p>1）设有m 个元素的堆，输出堆顶元素后，剩下m-1<br>个元素。将堆底元素送入堆顶（（最后一个元素与堆顶进行交换），堆被破坏，其原因仅是根结点不满足堆的性质。</p>
<p>2）将根结点与左、右子树中较小元素的进行交换。</p>
<p>3）若与左子树交换：如果左子树堆被破坏，即左子树的根结点不满足堆的性质，则重复方法 （2）.</p>
<p>4）若与右子树交换，如果右子树堆被破坏，即右子树的根结点不满足堆的性质。则重复方法 （2）.</p>
<p>5）继续对不满足堆性质的子树进行上述交换操作，直到叶子结点，堆被建成。</p>
<p>称这个自根结点到叶子结点的调整过程为筛选。如图：<br><img src="/images/sort-algorithm/heap_sort2.jpg" alt="堆排序"></p>
<p>再讨论对n 个元素初始建堆的过程。<br>建堆方法：对初始序列建堆的过程，就是一个反复进行筛选的过程。</p>
<p>1）n 个结点的完全二叉树，则最后一个结点是第个结点的子树。</p>
<p>2）筛选从第个结点为根的子树开始，该子树成为堆。</p>
<p>3）之后向前依次对各结点为根的子树进行筛选，使之成为堆，直到根结点。</p>
<p>如图建堆初始过程：无序序列：（49，38，65，97，76，13，27，49）<br><img src="/images/sort-algorithm/heap_sort3.jpg" alt="堆排序"></p>
<p><strong>算法的实现</strong><br>从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> *   已知$arr[s…m]除了$arr[s] 外均满足堆的定义 </span></span><br><span class="line"><span class="comment"> *   调整$arr[s],使其成为大顶堆.即将对第s个结点为根的子树筛选,  </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> *   <span class="doctag">@param</span> $arr是待调整的堆数组 </span></span><br><span class="line"><span class="comment"> *   <span class="doctag">@param</span> $s是待调整的数组元素的位置 </span></span><br><span class="line"><span class="comment"> *   <span class="doctag">@param</span> $length是数组的长度 </span></span><br><span class="line"><span class="comment"> *  */</span>  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapAdjust</span><span class="params">(&amp;$arr, $s, $length)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">	$tmp  = $arr[$s];  </span><br><span class="line">	$child = <span class="number">2</span>*$s+<span class="number">1</span>; <span class="comment">//左孩子结点的位置。($i+1 为当前调整结点的右孩子结点的位置)  </span></span><br><span class="line">	<span class="keyword">while</span> ($child &lt; $length) &#123;  </span><br><span class="line">		<span class="keyword">if</span>($child+<span class="number">1</span> &lt; $length &amp;&amp; $arr[$child] &lt; $arr[$child+<span class="number">1</span>]) &#123; <span class="comment">// 如果右孩子大于左孩子(找到比当前待调整结点大的孩子结点)  </span></span><br><span class="line">			++$child ;  </span><br><span class="line">		&#125;  </span><br><span class="line">		<span class="keyword">if</span>($arr[$s]&lt;$arr[$child]) &#123;  <span class="comment">// 如果较大的子结点大于父结点  </span></span><br><span class="line">			$arr[$s] = $arr[$child]; <span class="comment">// 那么把较大的子结点往上移动，替换它的父结点  </span></span><br><span class="line">			$s = $child;       <span class="comment">// 重新设置$s ,即待调整的下一个结点的位置 $i </span></span><br><span class="line">			$child = <span class="number">2</span>*$s+<span class="number">1</span>;  </span><br><span class="line">		&#125;  <span class="keyword">else</span> &#123;            <span class="comment">// 如果当前待调整结点大于它的左右孩子，则不需要调整，直接退出  </span></span><br><span class="line">			<span class="keyword">break</span>;  </span><br><span class="line">		&#125;  </span><br><span class="line">		$arr[$s] = $tmp;         <span class="comment">// 当前待调整的结点放到比其大的孩子结点位置上  </span></span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="keyword">echo</span> implode(<span class="string">','</span>, $arr).PHP_EOL;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> *  * 初始堆进行调整 </span></span><br><span class="line"><span class="comment"> *   * 将$arr[0..length-1]建成堆 </span></span><br><span class="line"><span class="comment"> *    * 调整完之后第一个元素是序列的最小的元素 </span></span><br><span class="line"><span class="comment"> *     */</span>  </span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">buildingHeap</span><span class="params">( &amp;$arr , $length)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">	<span class="comment">//最后一个有孩子的节点的位置 $i=  ($length -1) / 2  </span></span><br><span class="line">	<span class="keyword">for</span> ($i = ($length <span class="number">-1</span>) / <span class="number">2</span> ; $i &gt;= <span class="number">0</span>; --$i)  </span><br><span class="line">		heapAdjust($arr, $i, $length);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 堆排序算法 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span><span class="params">( &amp;$arr, $length)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">	<span class="comment">//初始堆  </span></span><br><span class="line">	buildingHeap($arr, $length);  </span><br><span class="line">	<span class="comment">//从最后一个元素开始对序列进行调整  </span></span><br><span class="line">	<span class="keyword">for</span> ($i = $length - <span class="number">1</span>; $i &gt; <span class="number">0</span>; --$i)  </span><br><span class="line">	&#123;  </span><br><span class="line">		<span class="comment">//交换堆顶元素H[0]和堆中最后一个元素  </span></span><br><span class="line">		$temp = $arr[$i]; $arr[$i] = $arr[<span class="number">0</span>]; $arr[<span class="number">0</span>] = $temp;  </span><br><span class="line">		<span class="comment">//每次交换堆顶元素和堆中最后一个元素之后，都要对堆进行调整  </span></span><br><span class="line">		heapAdjust($arr,<span class="number">0</span>,$i);  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h4><h5 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h5><p><strong>基本思想</strong>：在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。<br>冒泡排序的示例：<br><img src="/images/sort-algorithm/bubble _sort.jpg" alt="冒泡排序"></p>
<p><strong>算法的实现</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span><span class="params">(&amp;$arr, $n)</span></span>&#123;  </span><br><span class="line">	<span class="keyword">for</span>($i =<span class="number">0</span> ; $i&lt; $n<span class="number">-1</span>; ++$i) &#123;  </span><br><span class="line">		<span class="keyword">for</span>($j = <span class="number">0</span>; $j &lt; $n-$i<span class="number">-1</span>; ++$j) &#123;  </span><br><span class="line">			<span class="keyword">if</span>($arr[$j] &gt; $arr[$j+<span class="number">1</span>])  </span><br><span class="line">			&#123;  </span><br><span class="line">				$tmp = $arr[$j]; </span><br><span class="line">				$arr[$j] = $arr[$j+<span class="number">1</span>] ;</span><br><span class="line">				$arr[$j+<span class="number">1</span>] = $tmp;  </span><br><span class="line">			&#125;  </span><br><span class="line">		&#125;  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>冒泡排序算法的改进</strong><br>对冒泡排序常见的改进方法是加入一标志性变量exchange，用于标志某一趟排序过程中是否有数据交换，如果进行某一趟排序时并没有进行数据交换，则说明数据已经按要求排列好，可立即结束排序，避免不必要的比较过程。本文再提供以下两种改进算法：<br>1．设置一标志性变量$bFlag ,用于记录每趟排序中是否有位置交换，如果没有则直接结束外层循环，否则进行交换。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span><span class="params">($arr)</span></span>&#123;<span class="comment">//$arr(1...n)是待排序的文件，采用自下向上扫描，对$arr做冒泡排序</span></span><br><span class="line">    $bFlag = <span class="keyword">true</span>; <span class="comment">//交换标志</span></span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;count($arr); $i++)&#123; <span class="comment">//最多做n-1趟排序</span></span><br><span class="line">        $bFlag = <span class="keyword">false</span>; <span class="comment">//本趟排序开始前，交换标志应为假</span></span><br><span class="line">        <span class="keyword">for</span>($j = count($arr)<span class="number">-2</span>; $j &gt;= $i; $j--)&#123; <span class="comment">//对当前无序区$arr[i..n]自下向上扫描</span></span><br><span class="line">            <span class="keyword">if</span>( $arr[$j+<span class="number">1</span>] &lt; $arr[$j] )&#123;<span class="comment">//交换记录</span></span><br><span class="line">                $temp = $arr[$j+<span class="number">1</span>]; <span class="comment">//$temp不是哨兵，仅做暂存单元</span></span><br><span class="line">                $arr[$j+<span class="number">1</span>] = $arr[$j];</span><br><span class="line">                $arr[$j] = $temp;</span><br><span class="line">                $bFlag = <span class="keyword">true</span>; <span class="comment">//发生了交换，故将交换标志置为真</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!$bFlag)&#123; <span class="comment">//本趟排序未发生交换，提前终止算法</span></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">//endfor(外循环)</span></span><br><span class="line">    print_r($arr);</span><br><span class="line">&#125; <span class="comment">//BubbleSort</span></span><br></pre></td></tr></table></figure></p>
<p>2.传统冒泡排序中每一趟排序操作只能找到一个最大值或最小值,我们考虑利用在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者), 从而使排序趟数几乎减少了一半。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span> <span class="params">( $arr, $n)</span></span>&#123;  </span><br><span class="line">	$low = <span class="number">0</span>;   </span><br><span class="line">	$high = $n <span class="number">-1</span>; <span class="comment">//设置变量的初始值  </span></span><br><span class="line">	<span class="keyword">while</span> ($low &lt; $high) &#123;  </span><br><span class="line">		<span class="keyword">for</span> ($j = $low; $j&lt; $high; ++$j) <span class="comment">//正向冒泡,找到最大者  </span></span><br><span class="line">			<span class="keyword">if</span> ($arr[$j]&gt; $arr[$j+<span class="number">1</span>]) &#123;  </span><br><span class="line">				$tmp = $arr[$j]; </span><br><span class="line">				$arr[$j]=$arr[$j+<span class="number">1</span>];</span><br><span class="line">				$arr[$j+<span class="number">1</span>]=$tmp;  </span><br><span class="line">			&#125;   </span><br><span class="line">		--$high;                 <span class="comment">//修改high值, 前移一位  </span></span><br><span class="line">		<span class="keyword">for</span> ( $j=$high; $j&gt;$low; --$j) <span class="comment">//反向冒泡,找到最小者  </span></span><br><span class="line">			<span class="keyword">if</span> ($arr[$j]&lt;$arr[$j<span class="number">-1</span>]) &#123;  </span><br><span class="line">				$tmp = $arr[$j]; </span><br><span class="line">				$arr[$j]=$arr[$j<span class="number">-1</span>];</span><br><span class="line">				$arr[$j<span class="number">-1</span>]=$tmp;  </span><br><span class="line">			&#125;  </span><br><span class="line">		++$low;                  <span class="comment">//修改low值,后移一位  </span></span><br><span class="line">	&#125;   </span><br><span class="line">	<span class="keyword">echo</span> implode(<span class="string">','</span>, $arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="交换排序-1"><a href="#交换排序-1" class="headerlink" title="交换排序"></a>交换排序</h4><h5 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h5><p><strong>基本思想</strong>：<br>1）选择一个基准元素,通常选择第一个元素或者最后一个元素,<br>2）通过一趟排序讲待排序的记录分割成独立的两部分，其中一部分记录的元素值均比基准元素值小。另一部分记录的<br>元素值比基准值大。<br>3）此时基准元素在其排好序后的正确位置<br>4）然后分别对这两部分记录用同样的方法继续进行排序，直到整个序列有序。</p>
<p>快速排序的示例：<br>（a）一趟排序的过程：<br><img src="/images/sort-algorithm/quick_sort1.jpg" alt="first quick sort"><br>（b）排序的全过程：<br><img src="/images/sort-algorithm/quick_sort2.jpg" alt="quick sort"></p>
<p><strong>算法的实现</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span><span class="params">($array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count( $array ) &lt;= <span class="number">1</span>) <span class="keyword">return</span> $array;</span><br><span class="line">    $key = $array [<span class="number">0</span>];</span><br><span class="line">    $left_arr = <span class="keyword">array</span> ();</span><br><span class="line">    $right_arr = <span class="keyword">array</span> ();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">1</span>; $i &lt; count( $array ); $i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($array [$i] &lt;= $key)</span><br><span class="line">            $left_arr [] = $array [$i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            $right_arr [] = $array [$i];</span><br><span class="line">    &#125;</span><br><span class="line">    $left_arr = quick_sort ( $left_arr );</span><br><span class="line">    $right_arr = quick_sort ( $right_arr );</span><br><span class="line">    <span class="keyword">return</span> array_merge ( $left_arr, <span class="keyword">array</span> ($key ), $right_arr );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>附：相关资料<br><a href="http://blog.csdn.net/hguisu/article/details/7776068" target="_blank" rel="noopener">八大排序算法</a></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql 数据库主从同步(Master-Slave)]]></title>
      <url>http://jasonhzy.github.io/2016/02/05/mysql-master-slave/</url>
      <content type="html"><![CDATA[<p><img src="/images/master-slave/master-slave.jpg" alt="原理图"></p>
<a id="more"></a>
<h2 id="主从复制的原理"><a href="#主从复制的原理" class="headerlink" title="主从复制的原理"></a>主从复制的原理</h2><blockquote>
<p>分为同步复制和异步复制，实际复制架构中大部分为异步复制。 复制的基本过程如下：<br>1).Slave上面的IO进程连接上Master，并请求从指定日志文件的指定位置（或者从最开始的日志）之后的日志内容；<br>2).Master接收到来自Slave的IO进程的请求后，通过负责复制的IO进程根据请求信息读取制定日志指定位置之后的日志信息，返回给Slave<br>的IO进程。返回信息中除了日志所包含的信息之外，还包括本次返回的信息已经到Master端的bin-log文件的名称以及bin-log的位置；<br>3).Slave的IO进程接收到信息后，将接收到的日志内容依次添加到Slave端的relay-log文件的最末端，并将读取到的Master端的<br>bin-log的文件名和位置记录到master-info文件中，以便在下一次读取的时候能够清楚的告诉Master“我需要从某个bin-log的哪个位置开始往后的日志内容，请发给我”；<br>4).Slave的Sql进程检测到relay-log中新增加了内容后，会马上解析relay-log的内容成为在Master端真实执行时候的那些可执行的内容，并在自身执行。</p>
</blockquote>
<p><img src="/images/master-slave/master-slave-detail.png" alt="detail"></p>
<h2 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h2><ul>
<li>OS：CentOS</li>
<li>主服务器master：192.168.11.120</li>
<li>从服务器slave：192.168.11.139</li>
</ul>
<h2 id="mysql主从配置"><a href="#mysql主从配置" class="headerlink" title="mysql主从配置"></a>mysql主从配置</h2><h3 id="mysql主服务器配置-master"><a href="#mysql主服务器配置-master" class="headerlink" title="mysql主服务器配置(master)"></a>mysql主服务器配置(master)</h3><p>master服务器配置:<br>vim /etc/my.cnf</p>
<pre><code>[mysqld]
server-id=1
log-bin=/var/lib/mysql/mysql-bin # 启用二进制日志
binlog-do-db=jasontest #指定数据库，如果不指定就是全部数据库
#binlog-ignore-db = mysql,information_schema #忽略写入binlog的库
</code></pre><p>重启服务器：</p>
<pre><code>service mysqld  restart #systemctl restart mysqld.service --- centos7.x重启mysql
</code></pre><p>在主服务器上建立帐户并授权slave：</p>
<pre><code>#创建slave帐号，密码123456
mysql&gt; GRANT REPLICATION SLAVE ON *.* to &apos;slave&apos;@&apos;192.168.11.%&apos; identified by &apos;123456&apos;; 
#更新数据库权限
mysql&gt;flush privileges;
</code></pre><p>查询master的状态：</p>
<pre><code>mysql&gt; show master status;
</code></pre><p>显示结果：<br>        <img src="/images/master-slave/master-status.png" alt="slave status"></p>
<p>注：执行完这个步骤后不要再操作主数据库了，防止主数据库状态值变化</p>
<p>在主库show slave hosts查看有哪些从库节点：</p>
<pre><code>mysql&gt; show slave hosts;
+-----------+------+------+-----------+
| Server_id | Host | Port | Master_id |
+-----------+------+------+-----------+
|         2 |      | 3306 |         1 |
+-----------+------+------+-----------+
1 row in set (0.00 sec)
</code></pre><h3 id="mysql从服务器配置-slave"><a href="#mysql从服务器配置-slave" class="headerlink" title="mysql从服务器配置(slave)"></a>mysql从服务器配置(slave)</h3><p>slave服务器配置:<br>vim /etc/my.cnf</p>
<pre><code>[mysqld]
server-id=2
log-bin=/var/lib/mysql/mysql-bin # 启用二进制日志
binlog-do-db=jasontest #指定数据库，如果不指定就是全部数据库
</code></pre><p>重启服务器：</p>
<pre><code>service mysqld  restart #systemctl restart mysqld.service --- centos7.x重启mysql
</code></pre><p>设置同步源：</p>
<pre><code>mysql&gt; CHANGE MASTER TO MASTER_HOST=&apos;192.168.11.120&apos;, #主服务器master的ip
    MASTER_USER=&apos;slave&apos;,
    MASTER_PASSWORD=&apos;123456&apos;,
    MASTER_LOG_FILE=&apos;mysql-bin.000022&apos;,  #对应show master status中File
    MASTER_LOG_POS=245;                     #对应show master status中Position
</code></pre><p>备注：如果忘记同步用户账号和密码，查看slave库文件夹下的master.info文件查看信息，例如：</p>
<pre><code># cat /data/master.info
60
mysql-bin.000022 #主库的bin文件
245
192.168.11.120 #主库的IP
slave  #主从同步的账号
123456 #主从同步的密码
3306   #连接主库的端口
...
</code></pre><p>启用同步：</p>
<pre><code>mysql&gt;start slave
</code></pre><p>停止同步：</p>
<pre><code>mysql&gt;stop slave
</code></pre><p>检查从服务器状态：</p>
<pre><code>mysql&gt; SHOW SLAVE STATUS\G;
</code></pre><p>显示结果：<br>    <img src="/images/master-slave/slave-status.png" alt="slave status"></p>
<p><strong>注意：</strong>Slave_IO_Running及Slave_SQL_Running进程必须正常运行，即YES状态，否则说明同步失败</p>
<p>下面介绍几个比较关键的参数，全面的说明可阅读<a href="https://dev.mysql.com/doc/refman/5.5/en/show-slave-status.html" target="_blank" rel="noopener">参考手册</a>。</p>
<ul>
<li>Slave_IO_Running: IO线程是否正常运行</li>
<li>Slave_SQL_Running: SQL线程是否正常运行</li>
<li>Master_Log_File: IO线程正在读取的主服务器日志文件</li>
<li>Read_Master_Log_Pos: IO线程正在读取的主服务器日志文件的位置</li>
<li>Relay_Log_File: SQL线程正在读取和执行的本地日志文件</li>
<li>Relay_Log_Pos: SQL线程正在读取和执行的本地日志文件的位置</li>
<li>Relay_Master_Log_File: SQL线程正在重演的事件所在的主服务器日志文件</li>
<li>Exec_Master_Log_Pos: SQL线程正在重演的事件在主服务器日志文件中的位置</li>
<li>Seconds_Behind_Master:如果网络没有明显的延迟，该参数标志着SQL线程的事件重演速度。如果该值较大且不断递增，调整<a href="https://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit" target="_blank" rel="noopener">innodb_flush_log_at_trx_commit</a>会有比较明显的效果，但是可能会在MySQL进程崩溃时丢失数据。</li>
</ul>
<h3 id="mysql数据库同步验证"><a href="#mysql数据库同步验证" class="headerlink" title="mysql数据库同步验证"></a>mysql数据库同步验证</h3><p>主从数据库设置工作已经完成，可以在master新建数据库和表，插入和修改数据，查看slave是否获得同步，测试一下是否成功。</p>
<h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><p>1、Slave_IO_Running: No Slave_SQL_Running: No</p>
<pre><code>需要开启slave，即：start slave
</code></pre><p>2、Slave_IO_Running: No Slave_SQL_Running: Yes</p>
<pre><code>出现error，如Last_IO_Error: error connecting to master &apos;slave@192.168.11.120:3306&apos; - retry-time: 60  retries: 86400
</code></pre><p>解决方案：</p>
<pre><code>1).mysql -h192.168.11.120 -uslave  -p
如果出现ERROR 2003 (HY000): Can&apos;t connect to MySQL server on &apos;192.168.11.120&apos; (113) 说明服务器不允许远程访问

2).netstat -an | grep 3306
查看是否开启远程访问的端口3306

3).centos下配置开启3306端口：
centos7.x下：
vim /etc/firewalld/zones/public.xml 添加3306端口：

&lt;zone&gt;
    &lt;short&gt;Public&lt;/short&gt;
    &lt;description&gt;For use in public areas. You do not trust the other computers on networks 
        to not harm your computer. Only selected incoming connections are accepted.&lt;/description&gt;
    &lt;service name=&quot;dhcpv6-client&quot;/&gt;
    &lt;service name=&quot;ssh&quot;/&gt;
    &lt;service name=&quot;http&quot;/&gt;
    &lt;port protocol=&quot;tcp&quot; port=&quot;3306&quot;/&gt;
&lt;/zone&gt;
重启firewalld：systemctl restart firewalld.service

centos6.x下：
vim /etc/sysconfig/iptables 添加3306端口：

-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT   #允许80端口通过防火墙
-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT   #允许3306端口通过防火墙
-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT

如果/etc/my.cnf或者/etc/mysql/my.cnf配置文件中有bind-address，则需要修改配置：
（1）注释掉 即：#bind-address=127.0.0.1
（2）修改为：bind-addess=192.168.11.120 即本机的ip
（3）修改为：bind-address=0.0.0.0
</code></pre><p>3、修改同步账号的密码</p>
<p>1）主库上复制账户的信息</p>
<pre><code>&gt; show grants for &apos;slave&apos;@&apos;192.168.11.%&apos;;
+---------------------------------------------------------------------------------------------------+
| Grants for slave@192.168.11.%                                                                     |
+---------------------------------------------------------------------------------------------------+
| GRANT REPLICATION SLAVE ON *.* to &apos;slave&apos;@&apos;192.168.11.%&apos; IDENTIFIED BY PASSWORD &apos;*xxxxxxxxxxxxxxx&apos;|
+---------------------------------------------------------------------------------------------------+
</code></pre><p>2）修改复制账户密码</p>
<pre><code>&gt; grant replication slave on *.* to &apos;slave&apos;@&apos;192.168.11.%&apos; identified by &apos;repl&apos;;
&gt; flush privileges;
</code></pre><p>3）查看从库同步情况(stop slave –&gt; start slave –&gt; show slave status\G)</p>
<pre><code>Last_IO_Errno: 1045
Last_IO_Error: error connecting to master &apos;slave@192.168.11.120:3306&apos; - retry-time: 60  retries: 1
</code></pre><p>4）更改重库连接密码，该信息记录在从库master.info文件中 </p>
<pre><code>&gt; stop slave;
&gt; change master to      #由于仅修改了同步账号的密码，可以只重新设置密码即可             
    -&gt; master_user=&apos;slave&apos;,        
    -&gt; master_password=&apos;repl&apos;;
&gt; start slave;
</code></pre><p>启动同步之后，再次查看slave状态，可以看到已经成功</p>
<p>4、清除主从同步信息</p>
<p>1）reset master<br>删除所有的binglog日志文件，并将日志索引文件清空，重新开始所有新的日志文件。用于第一次搭建主从数据库时，用于主库的初始化binglog操作。主从正在运行时，万不可如此操作。</p>
<pre><code>mysql&gt; show master status\G
*************************** 1. row ***************************
            File: mysql-bin.000015
        Position: 28170
    Binlog_Do_DB: 
Binlog_Ignore_DB: mysql
1 row in set (0.04 sec)

mysql&gt; reset master;
Query OK, 0 rows affected (0.03 sec)

mysql&gt; show master status\G;
*************************** 1. row ***************************
            File: mysql-bin.000001
        Position: 106
    Binlog_Do_DB: 
Binlog_Ignore_DB: 
1 row in set (0.01 sec)
</code></pre><p>2）reset slave<br>删除slave数据库的master.info和relay-log.info文件，但里面的同步信息(即连接信息，包括主库地址、端口、用户、密码等)仍在。</p>
<pre><code>mysql&gt; show slave status\G
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 10.10.28.30
                  Master_User: test
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000015
          Read_Master_Log_Pos: 39249001
               #可在my.cnf设置relay-log = mysql-relay-bin，默认使用的是host_name-relay-bin.nnnnnn
               Relay_Log_File: iZ2ze5vyj2j0ati6ddbtddZ-relay-bin.000059 
                Relay_Log_Pos: 1223762
        Relay_Master_Log_File: mysql-bin.000013
        ...

mysql&gt; stop slave;        
Query OK, 0 rows affected (0.01 sec)    

mysql&gt; reset slave;                
Query OK, 0 rows affected (0.04 sec)

mysql&gt; show slave status\G;
*************************** 1\. row ***************************
              Slave_IO_State: 
                 Master_Host: 10.10.28.30
                 Master_User: test
                 Master_Port: 3306
               Connect_Retry: 20
             Master_Log_File: mysql-bin.000015
         Read_Master_Log_Pos: 39249001
              Relay_Log_File: iZ2ze5vyj2j0ati6ddbtddZ-relay-bin.00001 
               Relay_Log_Pos: 10
       Relay_Master_Log_File: mysql-bin.000013
       ...
</code></pre><p> 3）reset slave all<br>将所有同步信息彻底清理，常用于主从关系破坏之后，从库重新初始化进行配置或者移除当前slave<br>    mysql&gt; stop slave;<br>    Query OK, 0 rows affected (0.02 sec) </p>
<pre><code>mysql&gt; reset slave all; 
Query OK, 0 rows affected (0.04 sec) 

mysql&gt; show slave status\G; 
Empty set (0.02 sec)            
</code></pre>]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How to Keep Alive SSH Sessions]]></title>
      <url>http://jasonhzy.github.io/2016/02/03/ssh-alive/</url>
      <content type="html"><![CDATA[<p>Many NAT firewalls time out idle sessions after a certain period of time to keep their trunks clean. Sometimes the interval between session drops is 24 hours, but on many commodity firewalls, connections are killed after as little as 300 seconds. To avoid having your SSH sessions become unresponsive after e.g. 5 minutes, do the following:<br><a id="more"></a></p>
<h2 id="On-Windows-PuTTY"><a href="#On-Windows-PuTTY" class="headerlink" title="On Windows (PuTTY) "></a>On Windows (PuTTY) <img src="/images/ssh/putty.png" alt="putty"></h2><p>In your session properties, go to Connection and under Sending of null packets to keep session active, set Seconds between keepalives (0 to turn off)<br>to e.g. 300 (5 minutes).</p>
<h2 id="On-Linux-ssh"><a href="#On-Linux-ssh" class="headerlink" title="On Linux (ssh) "></a>On Linux (ssh) <img src="/images/ssh/konsole.png" alt="terminal"></h2><p>To enable the keep alive system-wide (root access required), edit <strong>/etc/ssh/ssh_config</strong>; to set the settings for just your user, edit<br><strong>~/.ssh/config</strong>(create the file if it doesn’t exist). Insert the following:</p>
<pre><code>Host *
    ServerAliveInterval 300
    ServerAliveCountMax 2
</code></pre><p>You can also make your OpenSSH server keep alive all connections with clients by adding the following to <strong>/etc/ssh/sshd_config</strong>:</p>
<pre><code>ClientAliveInterval 300
ClientAliveCountMax 2
</code></pre><p>These settings will make the SSH client or server send a null packet to the other side every <strong>300 seconds</strong> (5 minutes), and give up if it doesn’t receive any response after <strong>2 tries</strong>, at which point the connection is likely to have been discarded anyway.<br>From the <strong>ssh_config</strong> man page:</p>
<blockquote>
<p><strong>ServerAliveCountMax</strong><br>Sets the number of server alive messages (see below) which may be sent without ssh(1) receiving any messages back from the server. If this threshold is reached while server alive messages are being sent, ssh will disconnect from the server, terminating the session. It is important to note that the use of server alive messages is very different from TCPKeepAlive (below). The server alive messages are sent through the encrypted channel and therefore will not be spoofable. The TCP keepalive option enabled by TCPKeepAlive is spoofable. The server alive mechanism is valuable when the client or server depend on knowing when a connection has become inactive.</p>
<p>The default value is 3. If, for example, ServerAliveInterval (see below) is set to 15 and ServerAliveCountMax is left at the default, if the server becomes unresponsive, ssh will disconnect after approximately 45 seconds. This option applies to protocol version 2 only; in protocol version 1 there is no mechanism to request a response from the server to the server alive messages, so disconnection is the responsibility of the TCP stack.</p>
<p><strong>ServerAliveInterval</strong><br>Sets a timeout interval in seconds after which if no data has been received from the server, ssh(1) will send a message through the encrypted channel to request a response from the server. The default is 0, indicating that these messages will not be sent to the server, or 300 if the BatchMode option is set. This option applies to protocol version 2 only. ProtocolKeepAlives and SetupTimeOut are Debian-specific compatibility aliases for this option.</p>
</blockquote>
<p>文章摘自：<a href="https://patrickmn.com/aside/how-to-keep-alive-ssh-sessions/" target="_blank" rel="noopener">How to Keep Alive SSH Sessions</a></p>
]]></content>
      
        <categories>
            
            <category> SSH </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git基本命令]]></title>
      <url>http://jasonhzy.github.io/2016/02/03/git-tech/</url>
      <content type="html"><![CDATA[<h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><p><img src="/images/git.jpg" alt="Git command"></p>
<a id="more"></a>
<h3 id="安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中"><a href="#安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中" class="headerlink" title="安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中"></a>安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中</h3><pre><code>git config --global user.name &quot;jasonhzy&quot;
git config --global user.email &quot;lotush@163.com&quot;
</code></pre><p>检查你的设置(Checking Your Settings) 命令：</p>
<pre><code>git config --list
　　user.name=Scott Chacon
　　user.email=schacon@gmail.com
　　color.status=auto
　　color.branch=auto
　　color.interactive=auto
　　color.diff=auto
　　...
</code></pre><h3 id="创建一个本地仓库的克隆版本"><a href="#创建一个本地仓库的克隆版本" class="headerlink" title="创建一个本地仓库的克隆版本"></a>创建一个本地仓库的克隆版本</h3><p>初始化Git仓库</p>
<pre><code>git init --bare xxxx.git #xxx.git即仓库名称    
</code></pre><p>克隆代码仓库</p>
<pre><code>git clone https://github.com/PinetTech/pinet-wechat.git &lt;指定目录&gt;
</code></pre><p>克隆指定分支(jason分支)</p>
<pre><code>git clone -b jason https://github.com/PinetTech/pinet-wechat.git
</code></pre><h3 id="添加文件到缓冲区"><a href="#添加文件到缓冲区" class="headerlink" title="添加文件到缓冲区"></a>添加文件到缓冲区</h3><pre><code>git add &lt;filename&gt;或者git add *
</code></pre><h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><pre><code>git commit -m &quot;代码提交信息&quot;
</code></pre><p>对于当前已经提交过的信息，如需要修改，可执行：</p>
<pre><code>git commit --amend
</code></pre><p>对于当前已经提交过作者信息，如需要修改，可执行：</p>
<pre><code>git commit --amend --author=&quot;newName &lt;newEmail&gt;&quot;        
</code></pre><p>修改整个历史记录中的某些错误的author、email的方式： git rebase        </p>
<pre><code># git rebase  模式
git rebase -i -p a990e4e63c9e2dc19396efc51b693c314f3384d4 
# 弹出编辑器，在需要修改的 commit 处 由 picked 改变为 edit ，然后 wq 退出 vim；
git commit --amend --author &apos;newName &lt;newEmail&gt;&apos;
# 执行后即变更了相应的 author 和 email 
git rebase --continue 
</code></pre><h3 id="你的改动现在已经在本地仓库的-HEAD-中了。执行如下命令以将这些改动提交到远端仓库"><a href="#你的改动现在已经在本地仓库的-HEAD-中了。执行如下命令以将这些改动提交到远端仓库" class="headerlink" title="你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库"></a>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库</h3><pre><code>git push origin &lt;branchName&gt;
</code></pre><h3 id="可以把-master-换成想要推送的任何分支，创建分支并切换过去"><a href="#可以把-master-换成想要推送的任何分支，创建分支并切换过去" class="headerlink" title="可以把 master 换成想要推送的任何分支，创建分支并切换过去"></a>可以把 master 换成想要推送的任何分支，创建分支并切换过去</h3><pre><code>git checkout -b &lt;branchName&gt;
</code></pre><p>切换回某个分支：</p>
<pre><code>git checkout &lt;branchName&gt;
</code></pre><h3 id="创建、查看、删除、重命名分支"><a href="#创建、查看、删除、重命名分支" class="headerlink" title="创建、查看、删除、重命名分支"></a>创建、查看、删除、重命名分支</h3><p>创建分支：</p>
<pre><code>git branch &lt;branchName&gt;
</code></pre><p>查看分支：</p>
<pre><code>git branch #查看本地分支
git branch -a #查看远程分支
</code></pre><p>删掉新建的分支(本地分支)：</p>
<pre><code>git branch -d &lt;branchName&gt;
</code></pre><p>删除远程分支:</p>
<pre><code>git push origin --delete &lt;branchName&gt; 或者 git push origin :&lt;branchName&gt;
</code></pre><p>重命名本地分支：</p>
<pre><code>git branch -m &lt;old_branch_name&gt; &lt;new_branch_name&gt;
</code></pre><p>删除不存在对应远程分支的本地分支:</p>
<pre><code>git remote prune origin或者git fetch -p
</code></pre><h3 id="git上修改后还原所有的"><a href="#git上修改后还原所有的" class="headerlink" title="git上修改后还原所有的"></a>git上修改后还原所有的</h3><pre><code>git reset --hard
</code></pre><h3 id="提交之前撤销add操作"><a href="#提交之前撤销add操作" class="headerlink" title="提交之前撤销add操作"></a>提交之前撤销add操作</h3><pre><code>git reset HEAD 或者    git revert HEAD --no-commit
</code></pre><h3 id="查看文件被谁改动"><a href="#查看文件被谁改动" class="headerlink" title="查看文件被谁改动"></a>查看文件被谁改动</h3><pre><code>git blame FILE
</code></pre><h3 id="还原已经add或commit的"><a href="#还原已经add或commit的" class="headerlink" title="还原已经add或commit的"></a>还原已经add或commit的</h3><p>git log 命令查看提交的历史记录<br>在Git中，用HEAD表示当前版本，也就是最新的提交(commit)，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100，例如回退到上一个版本：</p>
<pre><code>git reset HEAD^/commit id
#改变本地HEAD的指针还原到工作区，即已经提交的可以恢复到当前工作区，可以再次修改提交
git reset --hard HEAD^/commit id
#强制移动指针到这个分支，会销毁它前面的所有的信息，本地也没有了，即不可恢复到工作区进行修改了
</code></pre><p><strong>注意</strong>:<br>1).新建的文件和目录，且从未提交至版本库，此类文件的状态为Untracked files，删除方法如下:</p>
<pre><code>git clean -n    # 将显示哪些未被追踪的文件和文件夹可以清理
git clean -d    # 清理未被追踪的文件夹
git clean -f    # 清理未被追踪的文件(clean.requireForce=false可不加-f选项)
git clean -df . # 其中的.表示当前目录及所有子目录中的文件，也可以直接指定对应的文件路径
</code></pre><p>2)提交过版本库，但未提交至暂存区的文件（未执行git add）,此类文件的状态为Changes not staged for commit，撤销方法:</p>
<pre><code>git checkout . #其中的.表示当前目录及所有子目录中的文件，也可以直接指定对应的文件路径
</code></pre><h3 id="恢复到某个版本"><a href="#恢复到某个版本" class="headerlink" title="恢复到某个版本"></a>恢复到某个版本</h3><p>git reflog用来记录每一次操作的命令，记录着每次操作的commit_id<br>如果回退到某个版本:</p>
<pre><code>git reset --hard &lt;commit id&gt;
git revert &lt;commit id&gt;
</code></pre><h3 id="忽略已跟踪文件的改动"><a href="#忽略已跟踪文件的改动" class="headerlink" title="忽略已跟踪文件的改动"></a>忽略已跟踪文件的改动</h3><p>有时需让git忽略某个文件的更新，比如配置文件</p>
<pre><code>git update-index --assume-unchanged /path/to/filgit old-branchese #忽略跟踪
git update-index --no-assume-unchanged /path/to/file  #恢复跟踪
</code></pre><h3 id="Git补丁管理-方便在多台机器上开发同步时用"><a href="#Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a>Git补丁管理(方便在多台机器上开发同步时用)</h3><p>生成补丁:</p>
<pre><code>git diff &gt; ../sync.patch
</code></pre><p>打补丁:</p>
<pre><code>git apply ../sync.patch
</code></pre><p>测试补丁能否成功:</p>
<pre><code>git apply --check  ../sync.patch
</code></pre><p>注意：在相同分支下操作</p>
<h3 id="Pull-远程分支"><a href="#Pull-远程分支" class="headerlink" title="Pull 远程分支"></a>Pull 远程分支</h3><p>Pull 远程分支是指，取回远程服务器上某个分支的更新，再与本地的指定分支合并。其格式为：</p>
<pre><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;
</code></pre><p>例如：取回 origin 主机的 dev 分支，与本地的 master 分支合并</p>
<pre><code>git pull origin dev:master
</code></pre><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略：</p>
<pre><code>git pull origin dev
</code></pre><p>如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，<br>由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。但是，你可以改变这个行为，加上参数-p<br>就会在本地删除远程已经删除的分支。</p>
<pre><code>git pull -p
</code></pre><h3 id="Git-push到多个远程库"><a href="#Git-push到多个远程库" class="headerlink" title="Git push到多个远程库"></a>Git push到多个远程库</h3><pre><code>git remote add origin git@github.com:looly/hutool.git #远程仓库1
git remote add osc git@git.oschina.net:loolly/hutool.git #远程仓库2
git add . 
git commit -m &apos;First commit&apos; 
git push origin master
git push osc master

git remote rm   [alias]      #删除一个别名,eg:origin osc
git remote rename [old-alias] [new-alias] #重命名,eg:git remote rename osc test
git remote show [主机名] #加上主机名，可以查看该主机的详细信息
</code></pre><h3 id="远程url切换"><a href="#远程url切换" class="headerlink" title="远程url切换"></a>远程url切换</h3><pre><code>git remote set-url origin &lt;URL&gt; #origin是可以替换的
</code></pre><h3 id="在已忽略文件夹中不忽略指定文件夹，例如："><a href="#在已忽略文件夹中不忽略指定文件夹，例如：" class="headerlink" title="在已忽略文件夹中不忽略指定文件夹，例如："></a>在已忽略文件夹中不忽略指定文件夹，例如：</h3><pre><code>themes/*
!themes/jacman/
</code></pre><p>注意点：</p>
<ul>
<li>空行不匹配任何内容,所以可以作为块分隔符；</li>
<li># 开头表示注释,如果相匹配 #,可以在前面加一个反斜杠,即 #</li>
<li>除非加了反斜杠,否则一连串的空格会被忽略；</li>
<li>如果在匹配的内容前面加上 ! ,则这些匹配过的部分将被移出,如果要匹配以 ! 开头的内容,需要加上反斜杠,如 !important.txt</li>
<li>如果一个匹配 pattern 后面有一个斜杠,如 foo/,则默认会匹配所有（包含父子文件夹）中的 foo 文件夹内容</li>
<li>如果一个匹配 pattern 不包含斜杠,如 foo,Git 会将其作为一个 shell 的查找命令匹配内容</li>
</ul>
<h3 id="Git查看、删除、重命名tag"><a href="#Git查看、删除、重命名tag" class="headerlink" title="Git查看、删除、重命名tag"></a>Git查看、删除、重命名tag</h3><p>创建tag：</p>
<pre><code>git tag &lt;tagname&gt; 或者 git tag -a &lt;tagname&gt; -m &quot;create tag desc&quot;
</code></pre><p>把本地tag推送到远程：</p>
<pre><code>git push --tags
</code></pre><p>获取远程tag</p>
<pre><code>git fetch origin tag &lt;tagname&gt;
</code></pre><p>删除tag：</p>
<pre><code>git tag -d &lt;tagname&gt;   #删除本地tag
git push origin --delete tag &lt;tagname&gt; #删除远程tag
git push origin :refs/tags/&lt;tagname&gt;  #删除远tag
</code></pre><h3 id="用diff来检查改动"><a href="#用diff来检查改动" class="headerlink" title="用diff来检查改动"></a>用diff来检查改动</h3><p><img src="/images/git-diff.jpg" alt="git diff"></p>
<p>比较分支和版本</p>
<p>比较两个分支，或是两个特定项目版本。来让我们看看在 “jason” 分支的哪些改动并不存在于“master”上：</p>
<pre><code>git diff master..jason
</code></pre><p>这些比较信息仅仅是在分支层面上的，你也可以比较任意的两个项目版本之间的内容：</p>
<pre><code>git diff 0023cdd..fcd6199
</code></pre><h2 id="Git支持四种数据传输协议，四种传输协议各自的优势和不足"><a href="#Git支持四种数据传输协议，四种传输协议各自的优势和不足" class="headerlink" title="Git支持四种数据传输协议，四种传输协议各自的优势和不足"></a>Git支持四种数据传输协议，四种传输协议各自的优势和不足</h2><table>
<thead>
<tr>
<th>传输协议</th>
<th>优势</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>本地传输</td>
<td>1. 远程仓库部署在本地目录，Git client-server之间的数据通信类似本地文件的复制剪切，数据的通信速度较快；2.资源的权限沿用本地操作系统的文件权限和网络访问权限，不需要单独配置。</td>
<td>1.由于远程仓库在本地目录，资源毁灭性丢失的危险性增大。</td>
</tr>
<tr>
<td>ssh协议(安全外壳传输协议ssh://)</td>
<td>1.服务搭建相对较简单；2.基于公钥私钥对的方式进行加密授权数据传输；3.同时支持数据的读和写操作。</td>
<td>1.不支持匿名访问，必须通过ssh访问主机才能读写仓库。</td>
</tr>
<tr>
<td>Git协议(git://)</td>
<td>1.自身携带的传输协议，传输速度最快的协议；2.使用类似ssh相同的数据传输机制，但取消了加密解密的开销。</td>
<td>1.没有授权机制，要么所有客户端都可读，要么所有客户端都可写，不能根据情况选择性配置读写权限；2.服务搭建相对较复杂。</td>
</tr>
<tr>
<td>http/https协议（超文本传输协议）</td>
<td>1.服务搭建相对较简单，基于Apache等web容器就可以实现；2.授权机制简单，能够访问Git仓库所在服务器的web服务的人都可以获取远程仓库资源。</td>
<td>1. 数据通信网络开销较大；2. 执行写操作需要基于ssh协议。</td>
</tr>
</tbody>
</table>
<h2 id="常见解决问题方案"><a href="#常见解决问题方案" class="headerlink" title="常见解决问题方案"></a>常见解决问题方案</h2><p>1.git add添加要提交的文件的时候，如果文件名是中文，会显示形如274\232\350\256\256\346\200\273\347\273\223.png 的乱码,core.quotepath设为false的话，就不会对0x80以上的字符进行quote,中文显示正常。有两种解决方案：<br>1）利用git命令配置core.quotepath为false</p>
<pre><code>git config --global core.quotepath false
</code></pre><p>2）修改 ~/.gitconfig，找到 [core] 的位置後面，加上：</p>
<pre><code>[core]
    quotepath = false
</code></pre><p>附：相关资料</p>
<ul>
<li><a href="http://www.bootcss.com/p/git-guide/" target="_blank" rel="noopener">git - 简易指南</a>  </li>
<li><a href="http://git-scm.com/" target="_blank" rel="noopener">git 官网</a></li>
<li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="noopener">猴子都能懂的git入门</a></li>
<li><a href="/download/msysGit.png">msysGit</a></li>
<li><a href="/download/git.jpeg">Git学习</a></li>
<li><a href="http://zengrong.net/post/1249.htm" target="_blank" rel="noopener">git乱码解决方案汇总</a></li>
<li><a href="https://www.zybuluo.com/phper/note/223883" target="_blank" rel="noopener">git reset&amp;revert</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vim IDE搭建]]></title>
      <url>http://jasonhzy.github.io/2016/02/03/vim-ide/</url>
      <content type="html"><![CDATA[<p>VIM IDE界面：<br><img src="/images/vim-ide.png" alt="vim ide"></p>
<a id="more"></a>
<p>.vimrc基本配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br></pre></td><td class="code"><pre><span class="line"> <span class="string">"开启语法高亮功能</span></span><br><span class="line"><span class="string"> syntax enable</span></span><br><span class="line"><span class="string"> "</span>允许用指定语法高亮配色方案替换默认方案</span><br><span class="line"> syntax on</span><br><span class="line"></span><br><span class="line"> <span class="built_in">set</span> nocompatible <span class="string">" not compatible with vi</span></span><br><span class="line"><span class="string"> set autoread "</span> detect when a file is changed</span><br><span class="line"></span><br><span class="line"> <span class="string">" make backspace behave in a sane manner</span></span><br><span class="line"><span class="string"> set backspace=indent,eol,start</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "</span> <span class="built_in">set</span> a map leader <span class="keyword">for</span> more key combos</span><br><span class="line"> <span class="built_in">let</span> mapleader = <span class="string">','</span></span><br><span class="line"> <span class="built_in">let</span> g:mapleader = <span class="string">','</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="string">"可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）</span></span><br><span class="line"><span class="string"> if has('mouse')</span></span><br><span class="line"><span class="string">  set mouse=a</span></span><br><span class="line"><span class="string"> endif</span></span><br><span class="line"><span class="string"> "</span><span class="built_in">set</span> selection=exclusive</span><br><span class="line"> <span class="string">"set selectmode=mouse,key  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "</span>显示行号</span><br><span class="line"> <span class="built_in">set</span> nu</span><br><span class="line"></span><br><span class="line"> <span class="built_in">set</span> shiftwidth=4 <span class="string">" 设定 &lt;&lt; 和 &gt;&gt; 命令移动时的宽度为 4</span></span><br><span class="line"><span class="string"> set shiftround "</span> round indent to a multiple of <span class="string">'shiftwidth'</span></span><br><span class="line"> <span class="built_in">set</span> softtabstop=4 <span class="string">" 使得按退格键时可以一次删掉 4 个空格</span></span><br><span class="line"><span class="string"> set tabstop=4 "</span> 设定 tab 长度为 4</span><br><span class="line"> <span class="string">"set expandtab</span></span><br><span class="line"><span class="string"> set showmatch        "</span> 设置匹配模式，显示匹配的括号</span><br><span class="line"></span><br><span class="line"> <span class="built_in">set</span> hlsearch <span class="string">"highlight searches</span></span><br><span class="line"><span class="string"> set incsearch "</span><span class="keyword">do</span> incremental searching</span><br><span class="line"> <span class="built_in">set</span> ignorecase</span><br><span class="line"></span><br><span class="line"> <span class="built_in">set</span> wrap <span class="string">"turn on line wrapping</span></span><br><span class="line"><span class="string"> set wrapmargin=8 "</span> wrap lines when coming within n characters from side</span><br><span class="line"> <span class="built_in">set</span> linebreak <span class="string">" set soft wrapping</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> set autoindent "</span> automatically <span class="built_in">set</span> indent of new line</span><br><span class="line"> <span class="string">"set smartindent        "</span> 智能对齐方式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string"> "</span> =&gt; vim支持多种折叠：</span><br><span class="line"> <span class="string">"		手动建立折叠（manual）、</span></span><br><span class="line"><span class="string"> "</span>		基于缩进进行折叠（indent）、</span><br><span class="line"> <span class="string">"		基于语法进行折叠（syntax）、</span></span><br><span class="line"><span class="string"> "</span>		未更改文本构成折叠（diff）等</span><br><span class="line"> <span class="string">" =&gt; 折叠快捷方式： </span></span><br><span class="line"><span class="string"> "</span>		za 打开或关闭当前折叠</span><br><span class="line"> <span class="string">"		zM 关闭所有折叠</span></span><br><span class="line"><span class="string"> "</span>		zR 打开所有折叠</span><br><span class="line"> <span class="string">"		zc 折叠</span></span><br><span class="line"><span class="string"> "</span>		zC 对所在范围内所有嵌套的折叠点进行折叠</span><br><span class="line"> <span class="string">"		zo 展开折叠</span></span><br><span class="line"><span class="string"> "</span>		zO 对所在范围内所有嵌套的折叠点展开</span><br><span class="line"> <span class="string">"		[z 到当前打开的折叠的开始处。</span></span><br><span class="line"><span class="string"> "</span>		]z 到当前打开的折叠的末尾处。</span><br><span class="line"> <span class="string">"		zj 向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。</span></span><br><span class="line"><span class="string"> "</span>		zk 向上移动到前一折叠的结束处。关闭的折叠也被计入。</span><br><span class="line"> <span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string"> "</span> 基于缩进进行代码折叠</span><br><span class="line"> <span class="built_in">set</span> foldmethod=indent</span><br><span class="line"> <span class="string">" 启动 vim 时关闭折叠代码</span></span><br><span class="line"><span class="string"> set nofoldenable</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string"> "</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></span><br><span class="line"> <span class="string">" =&gt; Files, backups, and undo</span></span><br><span class="line"><span class="string"> "</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></span><br><span class="line"> <span class="string">"</span></span><br><span class="line"><span class="string"> "</span><span class="built_in">set</span> nobackup</span><br><span class="line"> <span class="string">"set nowritebackup</span></span><br><span class="line"><span class="string"> "</span>禁止生成临时文件,*.swp</span><br><span class="line"> <span class="built_in">set</span> noswapfile</span><br><span class="line"> <span class="built_in">set</span> backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp</span><br><span class="line"> <span class="built_in">set</span> directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp</span><br><span class="line"></span><br><span class="line"> <span class="string">"在编辑过程中，在右下角显示光标位置的状态行</span></span><br><span class="line"><span class="string"> set ruler</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></span><br><span class="line"> <span class="string">" =&gt; StatusLine</span></span><br><span class="line"><span class="string"> "</span> <span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string"> set laststatus=2 "</span> show the satus line all the time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string"> "</span> =&gt; Mappings</span><br><span class="line"> <span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string"> "</span> General mappings/shortcuts <span class="keyword">for</span> functionality</span><br><span class="line"> <span class="string">" Additional, plugin-specific mappings are located under</span></span><br><span class="line"><span class="string"> "</span> the plugins section</span><br><span class="line"> <span class="string">"Close the current buffer</span></span><br><span class="line"><span class="string"> noremap &lt;C-d&gt; :q&lt;cr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "</span>不显示行号 </span><br><span class="line"> nmap &lt;F3&gt; :<span class="built_in">set</span> nu!&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"> <span class="string">"撤销修改</span></span><br><span class="line"><span class="string"> nnoremap &lt;S-z&gt; &lt;ESC&gt;u&lt;cr&gt;</span></span><br><span class="line"><span class="string"> inoremap &lt;S-z&gt; &lt;ESC&gt;u&lt;cr&gt;</span></span><br><span class="line"><span class="string"> vnoremap &lt;S-z&gt; &lt;ESC&gt;u&lt;cr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> map &lt;C-a&gt; ggVG</span></span><br><span class="line"><span class="string"> map! &lt;C-a&gt; ggVG</span></span><br><span class="line"><span class="string"> vnoremap &lt;C-c&gt; "</span>+y</span><br><span class="line"> <span class="string">"map &lt;C-v&gt; "</span>+p</span><br><span class="line"> map &lt;C-S-x&gt; gU</span><br><span class="line"> map &lt;c<span class="_">-s</span>-y&gt; gu</span><br><span class="line"></span><br><span class="line"> <span class="string">"使用箭头导航buffer"</span></span><br><span class="line"> map &lt;S-right&gt; :bn&lt;cr&gt;</span><br><span class="line"> map &lt;S-left&gt; :bp&lt;cr&gt;</span><br><span class="line"> <span class="built_in">set</span> autowrite <span class="string">"在切换buffer时自动保存当前的文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "</span>ALT+up/down行内容的移动(<span class="keyword">for</span> linux)</span><br><span class="line"> map &lt;M-Up&gt; dd&lt;Up&gt;&lt;Up&gt;p </span><br><span class="line"> map &lt;M-Down&gt; ddp</span><br><span class="line"></span><br><span class="line"> <span class="string">"ALT+up/down行内容的移动(mac)</span></span><br><span class="line"><span class="string"> "</span> Normal mode</span><br><span class="line"> <span class="string">"nnoremap &lt;S-j&gt; :m .+1&lt;CR&gt;==</span></span><br><span class="line"><span class="string"> "</span>nnoremap &lt;S-k&gt; :m .-2&lt;CR&gt;==</span><br><span class="line"></span><br><span class="line"> <span class="string">" Insert mode</span></span><br><span class="line"><span class="string"> "</span>inoremap &lt;S-j&gt; &lt;ESC&gt;:m .+1&lt;CR&gt;==gi</span><br><span class="line"> <span class="string">"inoremap &lt;S-k&gt; &lt;ESC&gt;:m .-2&lt;CR&gt;==gi</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> "</span> Visual mode</span><br><span class="line"> <span class="string">"vnoremap &lt;S-j&gt; :m '&gt;+1&lt;CR&gt;gv=gv</span></span><br><span class="line"><span class="string"> "</span>vnoremap &lt;S-k&gt; :m <span class="string">'&lt;-2&lt;CR&gt;gv=gv</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "toggle invisible characters</span></span><br><span class="line"><span class="string"> "set invlist</span></span><br><span class="line"><span class="string"> "set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮</span></span><br><span class="line"><span class="string"> "highlight SpecialKey ctermbg=none " make the highlighting of tabs less annoying</span></span><br><span class="line"><span class="string"> "set showbreak=↳</span></span><br><span class="line"><span class="string"> "nmap &lt;leader&gt;l :set list!&lt;cr&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> cmap w!! w !sudo tee &gt;/dev/null %</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "Plugins</span></span><br><span class="line"><span class="string"> set nocompatible                " be iMproved</span></span><br><span class="line"><span class="string"> filetype off                    " required!</span></span><br><span class="line"><span class="string"> set rtp+=~/.vim/bundle/Vundle.vim</span></span><br><span class="line"><span class="string"> call vundle#begin()</span></span><br><span class="line"><span class="string"> "plugin  </span></span><br><span class="line"><span class="string"> Plugin '</span>VundleVim/Vundle.vim<span class="string">'</span></span><br><span class="line"><span class="string"> Plugin '</span>scrooloose/nerdtree<span class="string">'</span></span><br><span class="line"><span class="string"> Plugin '</span>scrooloose/nerdcommenter<span class="string">' "code comment</span></span><br><span class="line"><span class="string"> Plugin '</span>scrooloose/syntastic<span class="string">'</span></span><br><span class="line"><span class="string"> Plugin '</span>Valloric/YouCompleteMe<span class="string">'</span></span><br><span class="line"><span class="string"> Plugin '</span>bling/vim-airline<span class="string">'</span></span><br><span class="line"><span class="string"> Plugin '</span>majutsushi/tagbar<span class="string">'		"install ctags plugin firstly		</span></span><br><span class="line"><span class="string"> Plugin '</span>terryma/vim-multiple-cursors<span class="string">'</span></span><br><span class="line"><span class="string"> Plugin '</span>tpope/vim-fugitive<span class="string">'		"git plugin</span></span><br><span class="line"><span class="string"> Plugin '</span>kien/ctrlp.vim<span class="string">'			"search file plugin</span></span><br><span class="line"><span class="string"> Plugin '</span>AutoClose<span class="string">'			"输入(，&#123;等需要配对的符号时，自动帮你补全剩余半个		</span></span><br><span class="line"><span class="string"> Plugin '</span>Tabular<span class="string">'				"代码更加易于纵向排版，以=或,符号对齐</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> Plugin '</span>t9md/vim-choosewin<span class="string">'  "支持类Tmux的操作</span></span><br><span class="line"><span class="string"> Plugin '</span>shawncplus/phpcomplete.vim<span class="string">'</span></span><br><span class="line"><span class="string"> Plugin '</span>suan/vim-instant-markdown<span class="string">' "[sudo] npm -g install instant-markdown-d,实时预览markdown文件</span></span><br><span class="line"><span class="string"> Plugin '</span>jiangmiao/auto-pairs<span class="string">'</span></span><br><span class="line"><span class="string"> Plugin '</span>tpope/vim-surround<span class="string">'</span></span><br><span class="line"><span class="string"> Plugin '</span>flazz/vim-colorschemes<span class="string">'</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> call vundle#end()            " required</span></span><br><span class="line"><span class="string"> filetype plugin indent on    " required</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "MiniBufferExplorer</span></span><br><span class="line"><span class="string"> let g:miniBufExplMapWindowNavVim = 1 </span></span><br><span class="line"><span class="string"> let g:miniBufExplMapWindowNavArrows = 1 </span></span><br><span class="line"><span class="string"> let g:miniBufExplMapCTabSwitchBufs = 1 </span></span><br><span class="line"><span class="string"> let g:miniBufExplModSelTarget = 1 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "NERDTree</span></span><br><span class="line"><span class="string"> " 使用 NERDTree 插件查看工程文件。设置快捷键，速记：file list</span></span><br><span class="line"><span class="string"> nmap &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;</span></span><br><span class="line"><span class="string"> " 设置NERDTree子窗口宽度</span></span><br><span class="line"><span class="string"> let NERDTreeWinSize=32</span></span><br><span class="line"><span class="string"> " 设置NERDTree子窗口位置</span></span><br><span class="line"><span class="string"> let NERDTreeWinPos="left"</span></span><br><span class="line"><span class="string"> " 显示隐藏文件</span></span><br><span class="line"><span class="string"> let NERDTreeShowHidden=1</span></span><br><span class="line"><span class="string"> " NERDTree 子窗口中不显示冗余帮助信息</span></span><br><span class="line"><span class="string"> let NERDTreeMinimalUI=1</span></span><br><span class="line"><span class="string"> " 删除文件时自动删除文件对应 buffer</span></span><br><span class="line"><span class="string"> let NERDTreeAutoDeleteBuffer=1</span></span><br><span class="line"><span class="string"> let NERDTreeQuitOnOpen=0 "打开文件后不关闭NERDTreeFind窗口</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "autocmd vimenter * NERDTree</span></span><br><span class="line"><span class="string"> autocmd bufenter * if (winnr("$") == 1 &amp;&amp; exists("b:NERDTreeType") &amp;&amp; b:NERDTreeType == "primary") | q | endif</span></span><br><span class="line"><span class="string"> autocmd VimEnter * wincmd p " 默认进入右侧编辑区</span></span><br><span class="line"><span class="string"> "autocmd VimEnter,BufWinEnter * NERDTreeFind | wincmd p "进入vim时打开 NERDTreeFind窗口</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "powerline</span></span><br><span class="line"><span class="string"> "set laststatus=2</span></span><br><span class="line"><span class="string"> "set guifont=PowerlineSymbols\ for\ Powerline</span></span><br><span class="line"><span class="string"> "set nocompatible</span></span><br><span class="line"><span class="string"> "set t_Co=256</span></span><br><span class="line"><span class="string"> "let g:Powerline_symbols = '</span>unicode<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "airline</span></span><br><span class="line"><span class="string"> set t_Co=256</span></span><br><span class="line"><span class="string"> let g:airline_powerline_fonts = 1</span></span><br><span class="line"><span class="string"> "let g:airline_theme='</span>wombat<span class="string">'</span></span><br><span class="line"><span class="string"> " display open buffers in tabline</span></span><br><span class="line"><span class="string"> let g:airline#extensions#tabline#enabled = 1 </span></span><br><span class="line"><span class="string"> let g:airline#extensions#tabline#buffer_nr_show = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "Tagbar settings</span></span><br><span class="line"><span class="string"> nmap &lt;F8&gt; :TagbarToggle&lt;CR&gt;   </span></span><br><span class="line"><span class="string"> let g:tagbar_autofocus = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> " map fuzzyfinder (CtrlP) plugin</span></span><br><span class="line"><span class="string"> " nmap &lt;silent&gt; &lt;leader&gt;t :CtrlP&lt;cr&gt;</span></span><br><span class="line"><span class="string"> " nmap &lt;silent&gt; &lt;leader&gt;r :CtrlPBuffer&lt;cr&gt;</span></span><br><span class="line"><span class="string"> let g:ctrlp_map='</span>&lt;C-S-h&gt;<span class="string">'</span></span><br><span class="line"><span class="string"> let g:ctrlp_dotfiles=1</span></span><br><span class="line"><span class="string"> let g:ctrlp_working_path_mode = '</span>ra<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> " CtrlP ignore patterns</span></span><br><span class="line"><span class="string"> " let g:ctrlp_custom_ignore = &#123;</span></span><br><span class="line"><span class="string"> "             \ '</span>dir<span class="string">':</span></span><br><span class="line"><span class="string"> " '</span>\.git$\|node_modules$\|bower_components$\|\.hg$\|\.svn$<span class="string">',</span></span><br><span class="line"><span class="string"> "             \ '</span>file<span class="string">': '</span>\.exe$\|\.so$<span class="string">'</span></span><br><span class="line"><span class="string"> "             \ &#125;</span></span><br><span class="line"><span class="string"> " only show files that are not ignored by git</span></span><br><span class="line"><span class="string"> let g:ctrlp_user_command = ['</span>.git/<span class="string">', '</span>git --git-dir=%s/.git ls-files -oc --exclude-standard<span class="string">']</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> " search the nearest ancestor that contains .git, .hg, .svn</span></span><br><span class="line"><span class="string"> let g:ctrlp_working_path_mode = 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "NERD Commenter</span></span><br><span class="line"><span class="string"> "&lt;leader&gt;ca 转换注释的方式，比如： /**/和//</span></span><br><span class="line"><span class="string"> "&lt;leader&gt;cc 注释当前行和选中行</span></span><br><span class="line"><span class="string"> "&lt;leader&gt;c  如果被选区域有部分被注释，则对被选区域执行取消注释操作，其它情况执行反转注释操作</span></span><br><span class="line"><span class="string"> "&lt;leader&gt;cs 添加性感的注释，代码开头介绍部分通常使用该注释</span></span><br><span class="line"><span class="string"> "&lt;leader&gt;cA 跳转到该行结尾添加注释，并进入编辑模式</span></span><br><span class="line"><span class="string"> "&lt;leader&gt;cu 取消注释</span></span><br><span class="line"><span class="string"> "&lt;leader&gt;ci 执行反转注释操作，选中区域注释部分取消注释，非注释部分添加注释</span></span><br><span class="line"><span class="string"> "&lt;leader&gt;cm 对被选区域用一对注释符进行注释，前面的注释对每一行都会添加注释</span></span><br><span class="line"><span class="string"> "&lt;leader&gt;cy 添加注释，并复制被添加注释的部分 </span></span><br><span class="line"><span class="string"> "&lt;leader&gt;c$ 注释当前光标到改行结尾的内容  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> " Fugitive Shortcuts</span></span><br><span class="line"><span class="string"> "nmap &lt;silent&gt; &lt;leader&gt;gs :Gstatus&lt;cr&gt;</span></span><br><span class="line"><span class="string"> "nmap &lt;leader&gt;ge :Gedit&lt;cr&gt;</span></span><br><span class="line"><span class="string"> "nmap &lt;silent&gt;&lt;leader&gt;gr :Gread&lt;cr&gt;</span></span><br><span class="line"><span class="string"> "nmap &lt;silent&gt;&lt;leader&gt;gb :Gblame&lt;cr&gt;</span></span><br><span class="line"><span class="string"> nmap gs :Gstatus&lt;cr&gt;</span></span><br><span class="line"><span class="string"> nmap ge :Gedit&lt;cr&gt;</span></span><br><span class="line"><span class="string"> nmap gr :Gread&lt;cr&gt;</span></span><br><span class="line"><span class="string"> nmap gb :Gblame&lt;cr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> " syntastic</span></span><br><span class="line"><span class="string"> let g:syntastic_check_on_open = 0 "是否在打开文件时检查</span></span><br><span class="line"><span class="string"> let g:syntastic_check_on_wq = 1 "是否在保存文件后检查</span></span><br><span class="line"><span class="string"> let g:syntastic_error_symbol = '</span>✗<span class="string">'</span></span><br><span class="line"><span class="string"> let g:syntastic_warning_symbol = '</span>⚠<span class="string">'</span></span><br><span class="line"><span class="string"> let g:syntastic_auto_loc_list = 1</span></span><br><span class="line"><span class="string"> let g:syntastic_loc_list_height = 5</span></span><br><span class="line"><span class="string"> let g:syntastic_enable_highlighting = 0</span></span><br><span class="line"><span class="string"> let g:syntastic_php_checkers = ['</span>php<span class="string">', '</span>phpcs<span class="string">', '</span>phpmd<span class="string">', '</span>phplint<span class="string">']</span></span><br><span class="line"><span class="string"> let g:syntastic_html_checkers = []</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> " YouCompleteMe</span></span><br><span class="line"><span class="string"> autocmd FileType php set omnifunc=phpcomplete#CompletePHP</span></span><br><span class="line"><span class="string"> let g:ycm_complete_in_comments = 1                "在注释输入中也能补全</span></span><br><span class="line"><span class="string"> let g:ycm_complete_in_strings = 1                "在字符串输入中也能补全</span></span><br><span class="line"><span class="string"> let g:ycm_collect_identifiers_from_tags_files=1                 " 开启 YCM 基于标签引擎</span></span><br><span class="line"><span class="string"> let g:ycm_collect_identifiers_from_comments_and_strings = 1    "注释和字符串中的文字也会被收入补全</span></span><br><span class="line"><span class="string"> let g:ycm_seed_identifiers_with_syntax=1            "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开</span></span><br><span class="line"><span class="string"> let g:ycm_collect_identifiers_from_tags_files = 1</span></span><br><span class="line"><span class="string"> let g:ycm_min_num_of_chars_for_completion=2            " 从第2个键入字符就开始罗列匹配项`</span></span><br><span class="line"><span class="string"> let g:ycm_key_invoke_completion = '</span>&lt;C-n&gt;<span class="string">' "直接触发自动补全, &lt;C-Space&gt;for mac</span></span><br><span class="line"><span class="string"> let g:ycm_cache_omnifunc=0                "禁止缓存匹配项,每次都重新生成匹配项</span></span><br><span class="line"><span class="string"> let g:ycm_seed_identifiers_with_syntax=1	"开启语义补全</span></span><br><span class="line"><span class="string"> let g:ycm_complete_in_comments = 1        "在注释输入中也能补全</span></span><br><span class="line"><span class="string"> let g:ycm_complete_in_strings = 1         "在字符串输入中也能补全</span></span><br><span class="line"><span class="string"> set completeopt-=preview                  "YCM的previw窗口比较恼人，还是关闭比较好"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> " 比较喜欢用tab来选择补全...</span></span><br><span class="line"><span class="string"> function! MyTabFunction ()</span></span><br><span class="line"><span class="string">let line = getline('</span>.<span class="string">')</span></span><br><span class="line"><span class="string">let substr = strpart(line, -1, col('</span>.<span class="string">')+1)</span></span><br><span class="line"><span class="string">let substr = matchstr(substr, "[^ \t]*$")</span></span><br><span class="line"><span class="string">if strlen(substr) == 0</span></span><br><span class="line"><span class="string">return "\&lt;tab&gt;"</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string">return pumvisible() ? "\&lt;c-n&gt;" :</span></span><br><span class="line"><span class="string">"\&lt;c-x&gt;\&lt;c-o&gt;"</span></span><br><span class="line"><span class="string"> endfunction</span></span><br><span class="line"><span class="string"> inoremap &lt;tab&gt; &lt;c-r&gt;=MyTabFunction()&lt;cr&gt;"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> " 跳转到定义处, 分屏打开 </span></span><br><span class="line"><span class="string"> let g:ycm_goto_buffer_command = '</span>horizontal-split<span class="string">'</span></span><br><span class="line"><span class="string"> let g:ycm_error_symbol = '</span>&gt;&gt;<span class="string">'</span></span><br><span class="line"><span class="string"> let g:ycm_warning_symbol = '</span>&gt;*<span class="string">'</span></span><br><span class="line"><span class="string"> nmap &lt;leader&gt;gd :YcmDiags&lt;CR&gt;</span></span><br><span class="line"><span class="string"> nnoremap &lt;leader&gt;gl :YcmCompleter GoToDeclaration&lt;CR&gt;           " 跳转到申明处</span></span><br><span class="line"><span class="string"> nnoremap &lt;leader&gt;gf :YcmCompleter GoToDefinition&lt;CR&gt;            " 跳转到定义处</span></span><br><span class="line"><span class="string"> nnoremap &lt;leader&gt;gg :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "minibufexplorer</span></span><br><span class="line"><span class="string"> "let g:miniBufExplorerMoreThanOne=0   "避免出现多个窗口</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "multiple-cursors</span></span><br><span class="line"><span class="string"> let g:multi_cursor_use_default_mapping=0</span></span><br><span class="line"><span class="string"> " Default mapping</span></span><br><span class="line"><span class="string"> let g:multi_cursor_next_key='</span>&lt;C-n&gt;<span class="string">'</span></span><br><span class="line"><span class="string"> let g:multi_cursor_prev_key='</span>&lt;C-p&gt;<span class="string">'</span></span><br><span class="line"><span class="string"> let g:multi_cursor_skip_key='</span>&lt;C-x&gt;<span class="string">'</span></span><br><span class="line"><span class="string"> let g:multi_cursor_quit_key='</span>&lt;Esc&gt;<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "tabular</span></span><br><span class="line"><span class="string"> "eg :Tab /|, :Tab/:, :Tab /:\zs</span></span><br><span class="line"><span class="string"> let g:tabular_loaded = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "与tmux中使用up/down/left/right键出现ABCD冲突, 使用tmux时要禁用</span></span><br><span class="line"><span class="string"> let g:autoclose_on = 1</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> " Window Chooser ------------------------------</span></span><br><span class="line"><span class="string"> " mapping</span></span><br><span class="line"><span class="string"> nmap  -  &lt;plug&gt;(choosewin)</span></span><br><span class="line"><span class="string"> " show big letters</span></span><br><span class="line"><span class="string"> let g:choosewin_overlay_enable = 1</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> " auto pairs</span></span><br><span class="line"><span class="string"> let g:AutoPairsFlyMode = 0</span></span><br><span class="line"><span class="string"> let g:AutoPairsShortcutBackInsert = '</span>&lt;M-b&gt;<span class="string">'</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> " xdebug</span></span><br><span class="line"><span class="string"> "let g:debuggerMaxDepth = 5</span></span><br><span class="line"><span class="string"> "let g:debuggerPort = 8888</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> " vim json格式化</span></span><br><span class="line"><span class="string"> map &lt;F4&gt; :%!python -m json.tool&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：<br>1、安装YouCompleteMe，出现YouCompleteMe unavailable: requires Vim compiled with Python (2.7.1+ or 3.4+) support</p>
<p>MAC OS下MACPORTS安装vim，首先查看：</p>
<pre><code>$ vim --version | grep python      
+comments          +libcall           -python            +vreplace
+conceal           +linebreak         -python3           +wildignore
</code></pre><p>可见vim未支持python，则增加python支持修复即可：</p>
<pre><code>sudo port install vim +python
</code></pre>]]></content>
      
        <categories>
            
            <category> Vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Apache htaccess]]></title>
      <url>http://jasonhzy.github.io/2016/02/03/apache-htaccess/</url>
      <content type="html"><![CDATA[<blockquote>
<p>&emsp;&emsp;.htaccess文件(或者”分布式配置文件”)提供了针对目录改变配置的方法，即在一个特定的文档目录中放置一个包含一个或多个指令的文件，以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。</p>
</blockquote>
<a id="more"></a>
<p>.htaccess编写是用正则的方式，整理分享一下.htaccess 的参数说明:</p>
<pre><code>[F] —— Forbidden(禁止): 命令服务器返回 403 Forbidden错误给用户浏览器
[L] —— Last rule(最后一条规则): 告诉服务器在本条规则执行完后停止重写URL
[N] —— Next(下一条规则): 告诉服务器继续重写，指导所有重写指令都执行过
[G] —— Gone(丢失): 命令服务器返回410 GONE(no longer exists)错误消息
[P] —— Proxy(代理): 告诉服务器通过mod_proxy模块处理用户请求
[C] —— Chain(捆绑): 告诉服务器将当前的规则和前面的规则进行捆绑
[R] —— Redirect(重定向):命令服务器发出重定向消息，以便用户浏览器发出
        rewritten/modified(重写/修改)URL的请求
[NC] —— No Case(不区分大小写): 对客户端请求的URL不区分大小写
[PT] —— Pass Through(放行): 让mod_rewrite模块将重写的URL传回给Apache做进一步处理
[OR] —— Or(逻辑或): 用逻辑“或”将两个表达式连接在一起，如果结果为“真”，则会应用后继的相关规则
[NE] —— No Escape(禁用转义): 命令服务器在输出时禁用转义字符
[NS] —— No Subrequest(禁用子请求): 如果存在内部子请求，则跳过当前命令
[QSA] —— Append Query String(追加查询字符串): 命令服务器在URL末尾追加查询字符串
[S=x] —— Skip(跳过): 如果满足某指定的条件，则跳过后面第x调规则
[E=variable:value] —— Environmental Variable(环境变量): 命令服务器将值value赋给变量variable
[T=MIME-type] —— Mime Type(MIME类型): 声明目标资源所属的MIME类型

# —— 位于行首时表示注释。
- —— 命令Apache“不要”重写URL，例如“xxx.domain.com.* – [F]”
! —— 逻辑非。例如“!string” 将会匹配除了“string”以外的所有字符串
^$ —— 匹配“空字符”、“空行”
-d —— 测试字符串是否是已存在的目录，例如RewriteCond %{REQUEST_FILENAME} !-d
-f —— 测试字符串是否是已存在的文件 例如 RewriteCond %{REQUEST_FILENAME} !-f
-s —— 测试字符串所指文件是否有“非零”值
</code></pre><p>.htaccess文件禁止访问.git、.svn等目录。打开.htaccess文件，添加如下代码：</p>
<pre><code>RewriteEngine on
RewriteRule ^.git - [F,L]
</code></pre><p><strong>Example:</strong></p>
<pre><code>RewriteEngine on 打开引擎
RewriteRule test.html /test.php [L] 
RewriteRule test.html?$ /tianqi.php?s1=&amp;s2=&amp;S3= [QSA,L] 用于多个参数的情况
RewriteRule tianqi-([0-9]+).html /tianqi.php?id=$1 [L]
RewriteCond %{HTTP_HOST} ^www.example.com [NC]  
RewriteRule ^(.*)$ http://example.com/$1 [L,R=301]  
</code></pre><h2 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h2><ul>
<li>‘redirect|R [=code]’ (强制重定向 redirect)<br>以http: //thishost[:thisport]/(使新的URL成为一个URI)为前缀的Substitution可以强制性执行一个外部重定向。如果code没有指定，则产生一个HTTP响应代码302(临时性移动)。如果需要使用在300-400范围内的其他响应代码，只需在此指定这个数值即可，另外，还可以使用下列符号名称之一: temp (默认的), permanent,seeother.用它可以把规范化的URL反馈给客户端，如, 重写<code>/~&#39;&#39;为</code>/u/‘’，或对/u/user加上斜杠，等等。<br>注意:在使用这个标记时，必须确保该替换字段是一个有效的URL!否则，它会指向一个无效的位置!并且要记住，此标记本身只是对URL加上<a href="http://thishost[:thisport]/的前缀，重写操作仍然会继续。通常，你会希望停止重写操作而立即重定向，则还需要使用&#39;L&#39;标记" target="_blank" rel="noopener">http://thishost[:thisport]/的前缀，重写操作仍然会继续。通常，你会希望停止重写操作而立即重定向，则还需要使用&#39;L&#39;标记</a>.</li>
<li>‘forbidden|F’ (强制URL为被禁止的 forbidden)<br>强制当前URL为被禁止的，即，立即反馈一个HTTP响应代码403(被禁止的)。使用这个标记，可以链接若干RewriteConds以有条件地阻塞某些URL。</li>
<li>‘gone|G’ (强制URL为已废弃的 gone)<br>强制当前URL为已废弃的，即，立即反馈一个HTTP响应代码410(已废弃的)。使用这个标记，可以标明页面已经被废弃而不存在了.</li>
<li>‘proxy|P’ (强制为代理 proxy)<br>此 标记使替换成分被内部地强制为代理请求，并立即(即重写规则处理立即中断)把处理移交给代理模块。你必须确保此替换串是一个有效的(比如常见的以<a href="http://hostname开头的)能够为Apache代理模块所处理的URI。使用这个标记，可以把某些远程成分映射到本地服务器名称空间，从而增强了ProxyPass指令的功能。" target="_blank" rel="noopener">http://hostname开头的)能够为Apache代理模块所处理的URI。使用这个标记，可以把某些远程成分映射到本地服务器名称空间，从而增强了ProxyPass指令的功能。</a><br>注意:要使用这个功能，代理模块必须编译在Apache服务器中。如果你不能确定，可以检查<code>httpd -l&#39;&#39;的输出中是否有mod_proxy.c。如果有，则mod_rewrite可以使用这个功能；如果没有，则必须启用mod_proxy并重新编译</code>httpd’’程序。</li>
<li>‘last|L’ (最后一个规则 last)<br>立即停止重写操作，并不再应用其他重写规则。它对应于Perl中的last命令或C语言中的break命令。这个标记可以阻止当前已被重写的URL为其后继的规则所重写。举例，使用它可以重写根路径的URL(‘/‘)为实际存在的URL, 比如, ‘/e/www/‘.</li>
<li>‘next|N’ (重新执行 next round)<br>重新执行重写操作(从第一个规则重新开 始).这时再次进行处理的URL已经不是原始的URL了，而是经最后一个重写规则处理的URL。它对应于Perl中的next命令或C语言中的continue命令。<br>此标记可以重新开始重写操作，即立即回到循环的头部。但是要小心，不要制造死循环!</li>
<li>‘chain|C’ (与下一个规则相链接 chained)<br>此标记使当前规则与下一个(其本身又可以与其后继规则相链接的，并可以如此反复的)规则相链接。 它产生这样一个效果:如果一个规则被匹配，通常会继续处理其后继规则，即这个标记不起作用；如果规则不能被匹配，则其后继的链接的规则会被忽略。比如，在执行一个外部重定向时，对一个目录级规则集，你可能需要删除<code>.www&#39;&#39; (此处不应该出现</code>.www’’的’)。</li>
<li>‘type|T=MIME-type’ (强制MIME类型 type)<br>强制目标文件的MIME类型为MIME-type。比如，它可以用于模拟mod_alias中的ScriptAlias指令，以内部地强制被映射目录中的所有文件的MIME类型为<code></code>application/x-httpd-cgi’’.</li>
<li>‘nosubreq|NS’ (仅用于不对内部子请求进行处理 no internal sub-request)<br>在当前请求是一个内部子请求时，此标记强制重写引擎跳过该重写规则。比如，在mod_include试图搜索可能的目录默认文件(index.xxx)时，Apache会内部地产生子请求。对子请求，它不一定有用的，而且如果整个规则集都起作用，它甚至可能会引发错误。所以，可以用这个标记来排除某些规则。<br>根据你的需要遵循以下原则:<br>如果你使用了有CGI脚本的URL前缀，以强制它们由CGI脚本处理，而对子请求处理的出错率(或者开销)很高，在这种情况下，可以使用这个标记。</li>
<li>‘nocase|NC’ (忽略大小写 no case)<br>它使Pattern忽略大小写，即, 在Pattern与当前URL匹配时，’A-Z’ 和’a-z’没有区别。</li>
<li>‘qsappend|QSA’ (追加请求串 query string append)<br>此标记强制重写引擎在已有的替换串中追加一个请求串，而不是简单的替换。如果需要通过重写规则在请求串中增加信息，就可以使用这个标记。</li>
<li>‘noescape|NE’ (在输出中不对URI作转义 no URI escaping)<br>此 标记阻止mod_rewrite对重写结果应用常规的URI转义规则。一般情况下，特殊字符(如’%’, ‘$’, ‘;’等)会被转义为等值的十六进制编码。此标记可以阻止这样的转义，以允许百分号等符号出现在输出中，如： RewriteRule /foo/(.*) /bar?arg=P1\%3d$1 [R,NE] 可以使’/foo/zed’转向到一个安全的请求’/bar?arg=P1=zed’.</li>
<li>‘passthrough|PT’ (移交给下一个处理器 pass through)<br>此标记强制重写引擎将内部结构request_rec中的uri字段设置为filename字段的值，它只是一个小修改，使之能对来自其他URI到文件名翻译器的Alias，ScriptAlias, Redirect等指令的输出进行后续处理。举一个能说明其含义的例子：<br>如果要通过mod_rewrite的重写引擎重写/abc为/def，然后通过mod_alias使/def转变为/ghi，可以这样:<br>  RewriteRule ^/abc(.*) /def$1 [PT]<br>  Alias /def /ghi<br>如果省略了PT标记，虽然mod_rewrite运作正常， 即作为一个使用API的URI到文件名翻译器，它可以重写uri=/abc/…为filename=/def/…，但是，后续的mod_alias在试图作URI到文件名的翻译时，则会失效。<br>注意: 如果需要混合使用不同的包含URI到文件名翻译器的模块时，就必须使用这个标记。混合使用mod_alias和mod_rewrite就是个典型的例子。<br>For Apache hackers<br>如果当前Apache API除了URI到文件名hook之外，还有一个文件名到文件名的hook，就不需要这个标记了! 但是，如果没有这样一个hook，则此标记是唯一的解决方案。Apache Group讨论过这个问题，并在Apache 2.0 版本中会增加这样一个hook。</li>
<li>‘skip|S=num’ (跳过后继的规则 skip)<br>此标记强制重写引擎跳过当前匹配规则后继的num个规则。它可以实现一个伪if-then-else的构造:最后一个规则是then从句，而被跳过的skip=N个规则是else从句.(它和’chain|C’标记是不同的!)</li>
<li>‘env|E=VAR:VAL’ (设置环境变量 environment variable)<br>此标记使环境变量VAR的值为VAL, VAL可以包含可扩展的反向引用的正则表达式$N和%N。此标记可以多次使用以设置多个变量。这些变量可以在其后许多情况下被间接引用，但通常是在XSSI(via or CGI (如$ENV{‘VAR’})中，也可以在后继的RewriteCond指令的pattern中通过%{ENV:VAR}作引用。使用它可以从URL中剥离并记住一些信息。’cookie|CO=NAME:VAL:domain[:lifetime[:path]]’ (设置cookie)它在客户端浏览器上设置一个cookie。 cookie的名称是NAME，其值是VAL。domain字段是该cookie的域，比如’.apache.org’,可选的lifetime是cookie生命期的分钟数，可选的path是cookie的路径。)</li>
</ul>
<h2 id="部分指令格式配置详解"><a href="#部分指令格式配置详解" class="headerlink" title="部分指令格式配置详解"></a>部分指令格式配置详解</h2><p>1.RewriteEngine，用来设置是否启动url rewrite，开启配置即：</p>
<pre><code>RewriteEngine on
</code></pre><p>2.RewriteBase，设置目录级重写的基准URL</p>
<pre><code>RewriteEngine on
RewriteBase /test  #将会重定向到http://example.com/base/xxx
</code></pre><p>3.RewriteCond 和 RewriteRule，表示如果符合某个或某几个条件则执行RewriteCond下面紧邻的RewriteRule语句，例如防盗链</p>
<pre><code>RewriteEngine on
RewriteCond %{HTTP_REFERER} !^$ [NC]
RewriteCond %{HTTP_REFERER} !^https://www.example.com$ [NC]
RewriteRule .(gif|jpg|png|jpeg|bmp)$ https://www.example.com/404.jpg [R,NC]
</code></pre>]]></content>
      
        <categories>
            
            <category> Apache </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Apache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP状态码]]></title>
      <url>http://jasonhzy.github.io/2016/02/01/http-status/</url>
      <content type="html"><![CDATA[<blockquote>
<p>HTTP状态码（英语：HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码</p>
</blockquote>
<style>
    table th:first-of-type, th:nth-of-type(2) {
        width: 20%;
    }
</style>

<table>
<thead>
<tr>
<th style="text-align:center">状态码</th>
<th style="text-align:center">范围</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1XX</td>
<td style="text-align:center">100-101</td>
<td style="text-align:center">信息提示</td>
</tr>
<tr>
<td style="text-align:center">2XX</td>
<td style="text-align:center">200-206</td>
<td style="text-align:center">成功</td>
</tr>
<tr>
<td style="text-align:center">3XX</td>
<td style="text-align:center">300-305</td>
<td style="text-align:center">重定向</td>
</tr>
<tr>
<td style="text-align:center">4XX</td>
<td style="text-align:center">400-415</td>
<td style="text-align:center">客户端错误</td>
</tr>
<tr>
<td style="text-align:center">5XX</td>
<td style="text-align:center">500-505</td>
<td style="text-align:center">服务器错误</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>下面列出了各种HTTP状态码的含义：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>状态码</strong></th>
<th style="text-align:left"><strong>状态信息</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">100</td>
<td style="text-align:left">Continue</td>
<td style="text-align:left">初始的请求已经接受，客户应当继续发送请求的其余部分(HTTP 1.1新)</td>
</tr>
<tr>
<td style="text-align:center">101</td>
<td style="text-align:left">Switching Protocols</td>
<td style="text-align:left">服务器将遵从客户的请求转换到另外一种协议(HTTP 1.1新)</td>
</tr>
<tr>
<td style="text-align:center">200</td>
<td style="text-align:left">OK</td>
<td style="text-align:left">一切正常，对GET和POST请求的应答文档跟在后面</td>
</tr>
<tr>
<td style="text-align:center">201</td>
<td style="text-align:left">Created</td>
<td style="text-align:left">服务器已经创建了文档，Location头给出了它的URL</td>
</tr>
<tr>
<td style="text-align:center">202</td>
<td style="text-align:left">Accepted</td>
<td style="text-align:left">已经接受请求，但处理尚未完成</td>
</tr>
<tr>
<td style="text-align:center">203</td>
<td style="text-align:left">Non-Authoritative Information</td>
<td style="text-align:left">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝</td>
</tr>
<tr>
<td style="text-align:center">204</td>
<td style="text-align:left">No Content</td>
<td style="text-align:left">没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的</td>
</tr>
<tr>
<td style="text-align:center">205</td>
<td style="text-align:left">Reset Content</td>
<td style="text-align:left">没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容</td>
</tr>
<tr>
<td style="text-align:center">206</td>
<td style="text-align:left">Partial Content</td>
<td style="text-align:left">客户发送了一个带有Range头的GET请求，服务器完成了它</td>
</tr>
<tr>
<td style="text-align:center">300</td>
<td style="text-align:left">Multiple Choices</td>
<td style="text-align:left">客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明</td>
</tr>
<tr>
<td style="text-align:center">301</td>
<td style="text-align:left">Moved Permanently</td>
<td style="text-align:left">客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL</td>
</tr>
<tr>
<td style="text-align:center">302</td>
<td style="text-align:left">Found</td>
<td style="text-align:left">类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求<a href="http://host/~user（缺少了后面的斜杠），有的服务器返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。" target="_blank" rel="noopener">http://host/~user（缺少了后面的斜杠），有的服务器返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。</a></td>
</tr>
<tr>
<td style="text-align:center">303</td>
<td style="text-align:left">See Other</td>
<td style="text-align:left">类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取</td>
</tr>
<tr>
<td style="text-align:center">304</td>
<td style="text-align:left">Not Modified</td>
<td style="text-align:left">客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用</td>
</tr>
<tr>
<td style="text-align:center">305</td>
<td style="text-align:left">Use Proxy</td>
<td style="text-align:left">客户请求的文档应该通过Location头所指明的代理服务器提取</td>
</tr>
<tr>
<td style="text-align:center">306</td>
<td style="text-align:left">Unused</td>
<td style="text-align:left">此代码被用于前一版本。目前已不再使用，但是代码依然被保留</td>
</tr>
<tr>
<td style="text-align:center">307</td>
<td style="text-align:left">Temporary Redirect</td>
<td style="text-align:left">和302（Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才能重定向。由于这个原因，HTTP1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只能跟随对GET请求的重定向</td>
</tr>
<tr>
<td style="text-align:center">400</td>
<td style="text-align:left">Bad Request</td>
<td style="text-align:left">请求出现语法错误</td>
</tr>
<tr>
<td style="text-align:center">401</td>
<td style="text-align:left">Unauthorized</td>
<td style="text-align:left">客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填写合适的Authorization头后再次发出请求</td>
</tr>
<tr>
<td style="text-align:center">402</td>
<td style="text-align:left">Payment Required</td>
<td style="text-align:left">该状态码是为了将来可能的需求而预留的</td>
</tr>
<tr>
<td style="text-align:center">403</td>
<td style="text-align:left">Forbidden</td>
<td style="text-align:left">资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致</td>
</tr>
<tr>
<td style="text-align:center">404</td>
<td style="text-align:left">Not Found</td>
<td style="text-align:left">无法找到指定位置的资源。这也是一个常用的应答</td>
</tr>
<tr>
<td style="text-align:center">405</td>
<td style="text-align:left">Method Not Allowed</td>
<td style="text-align:left">请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用</td>
</tr>
<tr>
<td style="text-align:center">406</td>
<td style="text-align:left">Not Acceptable</td>
<td style="text-align:left">指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容</td>
</tr>
<tr>
<td style="text-align:center">407</td>
<td style="text-align:left">Proxy Authentication Required</td>
<td style="text-align:left">类似于401，表示客户必须先经过代理服务器的授权</td>
</tr>
<tr>
<td style="text-align:center">408</td>
<td style="text-align:left">Request Timeout</td>
<td style="text-align:left">在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求</td>
</tr>
<tr>
<td style="text-align:center">409</td>
<td style="text-align:left">Conflict</td>
<td style="text-align:left">通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功</td>
</tr>
<tr>
<td style="text-align:center">410</td>
<td style="text-align:left">Gone</td>
<td style="text-align:left">所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而404表示由于未知的原因文档不可用</td>
</tr>
<tr>
<td style="text-align:center">411</td>
<td style="text-align:left">Length Required</td>
<td style="text-align:left">服务器不能处理请求，除非客户发送一个Content-Length头</td>
</tr>
<tr>
<td style="text-align:center">412</td>
<td style="text-align:left">Precondition Failed</td>
<td style="text-align:left">请求头中指定的一些前提条件失败</td>
</tr>
<tr>
<td style="text-align:center">413</td>
<td style="text-align:left">Request Entity Too Large</td>
<td style="text-align:left">目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头</td>
</tr>
<tr>
<td style="text-align:center">414</td>
<td style="text-align:left">Request URI Too Long</td>
<td style="text-align:left">URI太长</td>
</tr>
<tr>
<td style="text-align:center">415</td>
<td style="text-align:left">Unsupported Media Type</td>
<td style="text-align:left">对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝</td>
</tr>
<tr>
<td style="text-align:center">416</td>
<td style="text-align:left">Requested Range Not Satisfiable</td>
<td style="text-align:left">服务器不能满足客户在请求中指定的Range头</td>
</tr>
<tr>
<td style="text-align:center">500</td>
<td style="text-align:left">Internal Server Error</td>
<td style="text-align:left">服务器遇到了意料不到的情况，不能完成客户的请求</td>
</tr>
<tr>
<td style="text-align:center">501</td>
<td style="text-align:left">Not Implemented</td>
<td style="text-align:left">服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求</td>
</tr>
<tr>
<td style="text-align:center">502</td>
<td style="text-align:left">Bad Gateway</td>
<td style="text-align:left">服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答</td>
</tr>
<tr>
<td style="text-align:center">503</td>
<td style="text-align:left">Service Unavailable</td>
<td style="text-align:left">服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个 Retry-After头</td>
</tr>
<tr>
<td style="text-align:center">504</td>
<td style="text-align:left">Gateway Timeout</td>
<td style="text-align:left">由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答</td>
</tr>
<tr>
<td style="text-align:center">505</td>
<td style="text-align:left">HTTP Version Not Supported</td>
<td style="text-align:left">服务器不支持请求中所指明的HTTP版本</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> HTTP(s) </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 函数图]]></title>
      <url>http://jasonhzy.github.io/2016/01/31/php-fun/</url>
      <content type="html"><![CDATA[<p>分享一张PHP函数图，便于学习记忆<br><a id="more"></a><br><img src="/images/php-fun.jpg" alt="PHP函数图"></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS7.x 配置LAMP环境]]></title>
      <url>http://jasonhzy.github.io/2016/01/25/centos-install/</url>
      <content type="html"><![CDATA[<h3 id="服务器基本配置"><a href="#服务器基本配置" class="headerlink" title="服务器基本配置"></a>服务器基本配置</h3><h4 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h4><pre><code>/etc/sysconfig/network-scripts/ifcfg-xxxx修改ONBOOT=&quot;yes&quot;
service network restart
</code></pre><a id="more"></a>
<h4 id="firewall配置"><a href="#firewall配置" class="headerlink" title="firewall配置"></a>firewall配置</h4><h5 id="需要开通的服务和端口"><a href="#需要开通的服务和端口" class="headerlink" title="需要开通的服务和端口"></a>需要开通的服务和端口</h5><pre><code>在vim /etc/firewalld/zones/public.xml 加入端口或者服务
    &lt;service name=&quot;http&quot;/&gt; 
    &lt;service name=&quot;https&quot;/&gt; 
    &lt;port protocol=&quot;tcp&quot; port=&quot;8080&quot;/&gt; 

    或者
    firewall-cmd --zone=public --add-port=8080/tcp --permanent
    firewall-cmd --zone=public --add-service=http  --permanent
    firewall-cmd --zone=public --add-service=https --permanent
    命令含义：
    --zone #作用域
    --add-port=80/tcp #添加端口，格式为：端口/通讯协议
    --permanent #永久生效，没有此参数重启后失效

    查看是否启用：
    firewall-cmd --permanent --zone=public --query-port=8080/tcp
    firewall-cmd --permanent --zone=public --query-service=http

    删除端口或者服务：
    firewall-cmd --zone=public --remove-service=http  --permanent
    firewall-cmd --zone=public --remove-port=8080/tcp  --permanent
</code></pre><h5 id="启动firewall"><a href="#启动firewall" class="headerlink" title="启动firewall"></a>启动firewall</h5><pre><code>systemctl enable firewalld #加入开机启动
systemctl start firewalld #启用firewalld
systemctl list-unit-files | grep firewalld #查看是否加入开机启
</code></pre><h3 id="安装网络工具"><a href="#安装网络工具" class="headerlink" title="安装网络工具"></a>安装网络工具</h3><pre><code>yum -y install net-tools 
</code></pre><p>安装过后，就可以用ifconfig命令了</p>
<h3 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h3><pre><code>vi /etc/selinux/config
#SELINUX=enforcing #注释掉
#SELINUXTYPE=targeted #注释掉
SELINUX=disabled #增加
</code></pre><p>重启服务器即可</p>
<h3 id="PHP环境配置"><a href="#PHP环境配置" class="headerlink" title="PHP环境配置"></a>PHP环境配置</h3><h4 id="安装PHP及其扩展"><a href="#安装PHP及其扩展" class="headerlink" title="安装PHP及其扩展"></a>安装PHP及其扩展</h4><pre><code>yum -y install php55w php55w-devel php55w-mysql php55w-mcrypt php55w-mbstring 
                php55w-xml php55w-gd php55w-bcmath php55w-pecl-imagick
</code></pre><h4 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h4><pre><code>yum –y install httpd
</code></pre><h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><pre><code>yum –y install mariadb*
</code></pre><h3 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h3><h4 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h4><pre><code>vim /etc/httpd/conf.d/vhosts.conf  #vhosts.conf 如若没有即表示创建
</code></pre><h4 id="添加VirtualHost"><a href="#添加VirtualHost" class="headerlink" title="添加VirtualHost:"></a>添加VirtualHost:</h4><pre><code>&lt;VirtualHost *:80&gt;
    DocumentRoot &quot;/var/www/project&quot;
    ServerName www.xxx.com
    &lt;Directory &quot;/var/www/project&quot;&gt;
        AllowOverride All
        Options +FollowSymLinks
        Order allow,deny
        Allow from All
    &lt;/Directory&gt;
    ErrorLog &quot;logs/project-error_log&quot;
    CustomLog &quot;logs/project-access_log&quot; common
&lt;/VirtualHost&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SELinux]]></title>
      <url>http://jasonhzy.github.io/2016/01/25/selinux/</url>
      <content type="html"><![CDATA[<h2 id="SELinux-简介"><a href="#SELinux-简介" class="headerlink" title="SELinux 简介"></a>SELinux 简介</h2><p>SELinux 全称是 Secure Enhanced Linux， 是MAC (Mandatory Access Control，强制访问控制系统)的一个实现，目的在于明确的指明某个进程可以访问哪些资源(文件、网络端口等)</p>
<a id="more"></a>
<p>MAC 的工作方式：<br>linux 传统的权限管理称为『自主式存取控制 (Discretionary Access Control, DAC)』，基本上就是依据程序的拥有者与文件资源的rwx权限来决定有无存取的能力。为了解决这种单一的权限管理模式，SELinux 导入了委任式存取控制 (Mandatory Access Control, MAC)。<br>MAC 的管理方式大概分为4个模块分别是： </p>
<ul>
<li>主体（ sbuject ）：用户或者用户运行的进程，比如/usr/sbin/httpd </li>
<li>对象 ( object ) ：被主体访问的对象（资源），比如File、Directory、IP、Socket等系统资源；</li>
<li>政策 ( policy ) ：定义主体读取对象的规则数据库</li>
<li>安全性上下文（security context）：SELinux 的核心，分为进程安全上下文、文件安全上下文</li>
</ul>
<p>简而言之，MAC通过既定的各种政策，将主体（也就是 process）通过安全性文本，与目标进行对比从而最终得出主体对于目标是否有使用权限的方式。 </p>
<h2 id="SELinux-模式"><a href="#SELinux-模式" class="headerlink" title="SELinux 模式"></a>SELinux 模式</h2><p>SELinux 拥有三个基本的操作模式，当中 Enforcing 是缺省的模式。此外，它还有一个 targeted 或 mls 的修饰语。这管制 SELinux 规则的应用有多广泛，当中targeted是较宽松的级别。</p>
<ul>
<li>Enforcing： 这个缺省模式会在系统上启用并实施 SELinux 的安全性政策，拒绝访问及记录行动</li>
<li>Permissive： 在 Permissive 模式下，SELinux 会被启用但不会实施安全性政策，而只会发出警告及记录行动。Permissive 模式在排除 SELinux 的问题时很有用</li>
<li>Disabled： SELinux 已被停用</li>
</ul>
<h2 id="安全性上下文"><a href="#安全性上下文" class="headerlink" title="安全性上下文"></a>安全性上下文</h2><p>SELinux 系统中的进程和文件都标记了 SELinux 的上下文，这个上下文包含了许多有用的信息，包括SELinux用户(不同于Linux系统的用户)、角色(Role)、类型(Type)和级别(Security Level)等。<br>SELinux 上下文广泛使用在 进程、Linux用户、文件中</p>
<pre><code>ls -Z [file|dir] #查看文件或目录的SELinux上下文信息
ps -eZ    #查看进程上下文信息
id -Z     #查看Linux系统用户相关的SELinux上下文信息
</code></pre><p>SELinux 上下文的组成：</p>
<pre><code>user:role:type:level

$ ls -Z
drwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 .
drwxr-xr-x. root root system_u:object_r:var_t:s0               ..
drwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 html
drwxr-xr-x. root root unconfined_u:object_r:svirt_sandbox_file_t:s0 jenkins
drwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 project
</code></pre><p>user：用户区域，指的是selinux环境下的用户，可用semanage login -l 查看SELinux 用户与 Linux 用户之间的映射关系<br>role：通过角色可以决定 SELinux 用户可以访问哪些域，而最终决定了SELinux 用户可以访问哪些对象类型。通过这种机制可以降低权限提升的风险<br>type：类型是类型强制(Type Enforcement)机制的一个属性，也是 TE 机制在 SELinux 中的实现，为进程定义了域，为文件定义了类型<br>level：控制级别，Multi-Category Security(MCS)    </p>
<h2 id="启用-禁用SELinux"><a href="#启用-禁用SELinux" class="headerlink" title="启用/禁用SELinux"></a>启用/禁用SELinux</h2><p>查看SELinux是否开启     </p>
<pre><code>$ sestatus -v
SELinux status:                 enabled
SELinuxfs mount:                /selinux
Current mode:                   enforcing
Mode from config file:          enforcing
Policy version:                 21
Policy from config file:        targeted
</code></pre><p>如果SELinux status参数为enabled即为开启状态</p>
<p>关闭SELinux</p>
<p>1) 永久关闭，修改/etc/selinux/config文件，之后重启机器即可</p>
<pre><code>SELINUX=disabled
</code></pre><p>2) 临时关闭（不用重启机器）：</p>
<pre><code>setenforce 0  #设置SELinux 成为permissive模式， 
setenforce 1 设置SELinux 成为enforcing模式
</code></pre><h2 id="日志分析与故障排除"><a href="#日志分析与故障排除" class="headerlink" title="日志分析与故障排除"></a>日志分析与故障排除</h2><p>默认情况下，SELinux的日志信息是由Linux审计系统auditd写在 /var/log/audit/audit.log里<br>autitd守护进程未启动，则写在/var/log/messages里</p>
<p>如果auditd.service未启动（selinux已开启的情况下），查看/var/log/message:</p>
<pre><code>May 10 19:44:09 localhost kernel: audit: type=1400 audit(1525952649.863:10): avc:  denied  { read } for  pid=615 comm=&quot;auditd&quot; 
name=&quot;ld.so.cache&quot; dev=&quot;dm-0&quot; ino=8488256 scontext=system_u:system_r:auditd_t:s0 tcontext=system_u:object_r:unlabeled_t:s0 tclass=file permissive=1
</code></pre><p>此时启动出错可采用如下方式解决，即：</p>
<pre><code>semanage permissive -a auditd_t 
</code></pre><p>例如：配置redis，修改默认端口为5000，启动时日志文件/var/log/messages出现的信息：</p>
<pre><code>type=AVC msg=audit(1511937910.858:596): avc:  denied  { name_bind } for pid=17835 
comm=&quot;redis-server&quot; src=5000 scontext=system_u:system_r:redis_t:s0 
tcontext=system_u:object_r:commplex_main_port_t:s0 tclass=tcp_socket
</code></pre><p>audit2allow -w -a 查看详细的信息</p>
<p><img src="/images/selinux/audit2allow.png" alt="audit2allow"><br><img src="/images/selinux/ausearch.png" alt="ausearch">    </p>
<h3 id="利用-audit2allow-创建自定-SELinux-政策模块"><a href="#利用-audit2allow-创建自定-SELinux-政策模块" class="headerlink" title="利用 audit2allow 创建自定 SELinux 政策模块"></a>利用 audit2allow 创建自定 SELinux 政策模块</h3><pre><code>grep redis /var/log/audit/audit.log | audit2allow -M redis
或者
ausearch -m AVC | audit2allow -a -M redis(名称自定义)
</code></pre><p><img src="/images/selinux/ausearch-audit2allow.png" alt="ausearch-audit2allow">    </p>
<h3 id="5-利用-semodule-这个指令将拒绝的政策模块装入现有的-SELinux-政策内"><a href="#5-利用-semodule-这个指令将拒绝的政策模块装入现有的-SELinux-政策内" class="headerlink" title="5.利用 semodule 这个指令将拒绝的政策模块装入现有的 SELinux 政策内"></a>5.利用 semodule 这个指令将拒绝的政策模块装入现有的 SELinux 政策内</h3><pre><code>semodule -i redis.pp
</code></pre><p>也可以使用sealert    来解决问题(需要安装yum install setroubleshoot)</p>
<p><img src="/images/selinux/sealert.png" alt="sealert">        </p>
<h3 id="查看支持的端口"><a href="#查看支持的端口" class="headerlink" title="查看支持的端口"></a>查看支持的端口</h3><pre><code>semanage port -l | grep redis        

例如：
[root@localhost ~]# semanage port -l | grep redis
redis_port_t    tcp      6379, 16379, 26379
</code></pre><h3 id="SELinux相关的工具"><a href="#SELinux相关的工具" class="headerlink" title="SELinux相关的工具"></a>SELinux相关的工具</h3><p>policycoreutils：提供与 SELinux 相关的命令，比如 restorecon, secon, setfiles, semodule , load_policy 和 setsebool 来操作和管理 SELinux。<br>policycoreutils-python：提供命令比如 semanage, audit2allow, audit2why和chcat来管理和操作SELinux。<br>setroubleshoot-server：翻译 SELinux 的拒绝操作体质信息，为 sealert 工具提供可以查看的、可读性好的信息。<br>setools/setools-console/setools-gui：这些安装包提供了与 SELinux 相关的策略分析、检索、日志审计与监控、文件上下文管理管理的相关工具。setools是元工具，setools-gui提供了 apol, seaudit 工具；setool-console 则提供了 sechecker, sediff, seinfo, sesearch, 和 findcon 等命令行工具。<br>mcstrans：提供对 SELinux 上文中的级别（比如 s0-s0:c0.c1023）翻译的工具。<br>libselinux-utils：提供 avcstat, getenforce, getsebool, matchpathcon, selinuxconlist, selinuxdefcon, selinuxenabled, 和 setenforce 工具。</p>
<p>参考资料</p>
<p><a href="https://wiki.centos.org/zh/HowTos/SELinux#head-2c3b6731592632a3657bfb57b10adb2aa6d3d96a" target="_blank" rel="noopener">CentOS SELinux</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SELinux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webtatic Yum Repository]]></title>
      <url>http://jasonhzy.github.io/2016/01/25/webtatic-yum-repository/</url>
      <content type="html"><![CDATA[<h4 id="Webtatic-Yum-Repository"><a href="#Webtatic-Yum-Repository" class="headerlink" title="Webtatic Yum Repository"></a>Webtatic Yum Repository</h4><p>The Webtatic Yum repository is a CentOS/RHEL repository containing updated web-related packages. Its main goals are:</p>
<ul>
<li>to provide CentOS/RHEL administrators with the latest stable minor releases of web development/hosting software, which are not provided in CentOS/RHEL<br>distribution minor releases.</li>
<li>to serve as an additional installation option for some of Webtatic’s projects.</li>
</ul>
<a id="more"></a>
<p>All packages are signed using GnuPG, and are verified using the <a href="https://mirror.webtatic.com/yum/RPM-GPG-KEY-webtatic-andy" target="_blank" rel="noopener">Webtatic EL 5/6</a> and <a href="https://mirror.webtatic.com/yum/RPM-GPG-KEY-webtatic-el7" target="_blank" rel="noopener">Webtatic<br>EL 7</a> GPG keys:</p>
<h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><p>To set up the repository, install the webtatic-release RPM:</p>
<p>Webtatic EL7 for CentOS/RHEL 7:</p>
<pre><code>rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm
rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
</code></pre><p>Webtatic EL6 for CentOS/RHEL 6:</p>
<pre><code>rpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm
</code></pre><p>Webtatic EL5.1 for CentOS/RHEL 5:</p>
<pre><code>rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm
</code></pre><p>文章摘自：<a href="https://webtatic.com/projects/yum-repository/" target="_blank" rel="noopener">Webtatic.com</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown]]></title>
      <url>http://jasonhzy.github.io/2016/01/22/markdown/</url>
      <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>自从学习使用 <code>markdown</code> 以来，收集的学习资料、软件工具、使用指南等，如果你没有听说过或者还没有体验过<code>markdown</code> 进行写作文章，强烈建议 have a try !</p>
<a id="more"></a>
<h2 id="markdown-介绍"><a href="#markdown-介绍" class="headerlink" title="markdown 介绍"></a>markdown 介绍</h2><blockquote>
<p>Markdown 是一种轻量级标记语言，它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。 - <strong>wikipedia</strong></p>
</blockquote>
<ul>
<li><a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Daring Fireball: Markdown</a> Project markdown</li>
<li><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Markdown wikipedia 介绍</a></li>
<li><a href="http://fletcherpenney.net/multimarkdown/" target="_blank" rel="noopener">MultiMarkdown</a> 引入更多标记特性和输出选项的改进版Markdown</li>
</ul>
<h2 id="why-markdown"><a href="#why-markdown" class="headerlink" title="why markdown"></a>why markdown</h2><ul>
<li>纯文本，兼容性极强，可以用任意文本编辑器打开.</li>
<li>语法简单（the syntax is so simple you can barely call it “syntax.”），零学习成本，极好的可读性，让你专注于文字写作而不是页面排版，并且兼容 HTML，simple<br>but powerful .</li>
<li>格式转换方便，Markdown 的文本你可以轻松转换为 html、pdf、epub、电子书等。</li>
<li>适合团队协作，可以使用 git/svn 等进行版本控制管理。</li>
<li><a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html" target="_blank" rel="noopener">阳志平：为什么 Markdown 成为科技界写作主流？</a></li>
<li><a href="http://www.ituring.com.cn/article/828?q=markdown" target="_blank" rel="noopener">图灵社区：用Markdown来写自由书籍-开源技术的方案</a></li>
</ul>
<p>目前很多在线服务商均支持使用markdown编写：</p>
<ul>
<li><a href="https://github.com" target="_blank" rel="noopener">Github</a> 最先支持，使用Markdown的一个分支版本来格式化评论、消息以及其它内容。</li>
<li><a href="http://stackoverflow.com/" target="_blank" rel="noopener">Stack Overflow</a> 使用一种 Markdown 的分支作为它的文章格式化系统。</li>
<li><a href="http://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a> 国内技术人的博客家园，每天活跃上万用户，高质量社区。</li>
<li><a href="http://www.csdn.net/" target="_blank" rel="noopener">CSDN</a> 号称全球最大中文IT社区，涵盖了多种语言、架构、博客、俱乐部等模块的技术论坛。</li>
<li><a href="http://www.ituring.com.cn/" target="_blank" rel="noopener">图灵社区</a> 使用markdown语法供用户写作电子书.</li>
<li><a href="http://www.jianshu.com/" target="_blank" rel="noopener">简书</a> 重拾文字的力量，交流故事，沟通想法，一个基于内容分享的社区。</li>
<li><a href="http://www.wiz.cn/" target="_blank" rel="noopener">为知笔记</a> 国内顶尖笔记软件，支持使用Markdown语法编辑笔记。</li>
<li>……</li>
</ul>
<h2 id="markdown-使用"><a href="#markdown-使用" class="headerlink" title="markdown 使用"></a>markdown 使用</h2><ul>
<li><a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="noopener">Markdown: Basics （快速入门）</a></li>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">Markdown 完整语法说明 (简体中文版)</a></li>
<li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">Github: Mastering Markdown</a> GitHub 帮助中关于 Markdown 的语法帮助</li>
<li><a href="https://github.com/hzlzh/1MarkDown" target="_blank" rel="noopener">MarkDown 语法团队规范</a> 语法规范简洁版</li>
<li><a href="http://www.cirosantilli.com/markdown-style-guide/" target="_blank" rel="noopener">Markdown Style Guide</a> 语法规范复杂版</li>
<li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank" rel="noopener">Markdown Cheatsheet</a></li>
<li><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="noopener">GitHub Flavored Markdown</a> GitHub 使用的 Markdown 语法，略微不同于标准 Markdown<br>语法。提供了一些更加简洁的语法，类似 URL autolinking, Strikethrough, Fenced code blocks, Syntax highlighting 等等</li>
<li><a href="http://fletcherpenney.net/multimarkdown/" target="_blank" rel="noopener">MultiMarkdown 介绍</a> 对 markdown 进行的扩展功能</li>
</ul>
<h2 id="markdown-工具"><a href="#markdown-工具" class="headerlink" title="markdown 工具"></a>markdown 工具</h2><ul>
<li><a href="https://maxiang.info/" target="_blank" rel="noopener">马克飞象</a> web/chrome 离线客户端，markdown<br>全功能支持，最大特点内容能够同步到印象笔记（evernote）中，笔记的用户重度推荐，按年收费，目前作者 <a href="http://weibo.com/u/2788354117" target="_blank" rel="noopener">@weibo</a><br>正在开发跨平台的客户端。</li>
<li><a href="https://stackedit.io/" target="_blank" rel="noopener">StackEdit</a> 在线 markdown 编辑器，可同步文档到Google Drive和 Dropbox，可发布文章到 Blogger，GitHub，Google<br>Drive，Dropbox，Tumblr和WordPress。</li>
<li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">cmd 作业部落</a> 支持 win/mac/linux/web/chrome<br>全平台，支持实时同步预览，支持代码高亮、数学公式，区分写作和阅读模式，支持在线存储，分享文稿网址。</li>
<li><a href="http://macdown.uranusjr.com/" target="_blank" rel="noopener">MacDown</a> OSX 上的 Markdown 开源编辑器，支持代码高亮，实时预览等。</li>
<li><a href="http://www.markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a> Windows上的全功能Markdown编辑器，推荐win上使用，基本全部功能。</li>
<li><a href="http://marked2app.com/" target="_blank" rel="noopener">Marked2</a> 多种 md 显示方案，不能够编辑文件，只用来展示文件，配合 <a href="https://packagecontrol.io/packages/MarkdownEditing" target="_blank" rel="noopener">subline text markdown<br>edit</a> 插件，完美使用；</li>
<li><a href="http://zh.mweb.im/" target="_blank" rel="noopener">MWeb</a> 专业的 Markdown<br>写作、记笔记、静态博客生成软件，由国内独立开发者<a href="http://weibo.com/oulvhai" target="_blank" rel="noopener">@oulvhai</a>开发，支持Toc、Table、代码高亮、支持发布到 Wordrpess<br>博客、支持 Metaweblog API 的博客服务、Wordpress.com、Evernote 和印象笔记、Blogger、Scriptogr.am、Tumblr等服务。</li>
<li><a href="http://pad.haroopress.com/user.html" target="_blank" rel="noopener">Haroopad</a><br>又一款简洁多功能的跨平台编辑器，全功能支持，再加上对社交网络友好的连接，多种主题等，感兴趣的可以看看。详情参考<a href="https://github.com/xirong/my-markdown/issues/1" target="_blank" rel="noopener">issue#1</a></li>
<li><a href="http://sspai.com/32483" target="_blank" rel="noopener">码字必备：18 款优秀的 Markdown 写作工具 | 2015 年度盘点</a> 喜欢哪一款，就看你的了。</li>
<li>这几款就够了，多了就有选择症 ……</li>
</ul>
<h2 id="reference-参考"><a href="#reference-参考" class="headerlink" title="reference 参考"></a>reference 参考</h2><ul>
<li><a href="http://brettterpstra.com/2011/08/31/why-markdown-a-two-minute-explanation/" target="_blank" rel="noopener">Why Markdown? A two-minute explanation</a></li>
<li><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">简书：献给写作者的 Markdown 新手指南</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
