<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Mysql Explain使用分析]]></title>
      <url>http://jasonhzy.github.io/2017/06/14/mysql-explain/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>MySQL提供了一个explain命令, 它可以对select语句进行分析, 并输出select执行的详细信息, 以供开发人员针对查询性能进行优化.explain命令用法十分简单, 在select语句前加上explain就可以了, 例如:</p>
<pre><code>explain SELECT * FROM bank where id = 1;
</code></pre><a id="more"></a>
<p>explain命令的输出内容大致如下:<br><img src="/images/mysql-explain/explain-style.png" alt="explain-style"></p>
<h3 id="explain各列详解"><a href="#explain各列详解" class="headerlink" title="explain各列详解"></a>explain各列详解</h3><p>一般12个字段(其中partitions和filtered 5.5版本普通模式下没有），会对重要的字段内容进行分析说明:</p>
<h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>表示SELECT查询标识符，用于标识执行顺序，基本是数字；执行顺序原则：id数据值大的优先执行,id值相同的从上往下顺序执行</p>
<h4 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h4><p>select_type 表示了查询的类型, 它的常用取值有: </p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
<th>样例</th>
</tr>
</thead>
<tbody>
<tr>
<td>SIMPLE</td>
<td>简单查询，标识查询不包含任何子查询或者UNION语句</td>
<td>explain select * from tabname</td>
</tr>
<tr>
<td>PRIMARY</td>
<td>复杂查询的外层查询，一般都在第一行，代表这是一个复杂查询的最外层查询</td>
<td></td>
</tr>
<tr>
<td>UNION</td>
<td>复杂查询中，UNION子句第二个或之后的子查询（第一个被标为PRIMARY）</td>
<td>explain select <em> from tabname union select </em> from tabname</td>
</tr>
<tr>
<td>SUBQUERY</td>
<td>复杂查询的子查询，指不在FROM子句中的那些</td>
<td>explain select * from tabname where id=(select max(id) from tabname)</td>
</tr>
<tr>
<td>DEPENDENT SUBQUERY</td>
<td>复杂查询中，依赖外部查询的子查询</td>
<td>explain select * from tabname where id not in(select id from tabname)</td>
</tr>
<tr>
<td>DERIVED</td>
<td>在FROM子句中的子查询</td>
<td></td>
</tr>
<tr>
<td>DEPENDENT UNION</td>
<td>复杂查询中，依赖外部查询的UNION子句查询</td>
<td>explain select * from tabname where id in (select id from tabname union select id from tabname)</td>
</tr>
<tr>
<td>UNION RESULT</td>
<td>复杂查询中，UNION的结果，这是一个从匿名临时表检索最终结果的查询</td>
<td></td>
</tr>
<tr>
<td>MATERIALIZED</td>
<td>复杂查询中，物化视图子句</td>
<td></td>
</tr>
<tr>
<td>UNCACHEABLE SUBQUERY</td>
<td>不可缓存的子查询</td>
<td></td>
</tr>
<tr>
<td>UNCACHEABLE UNION</td>
<td>不可缓存的UNION子查询</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><p>表示查询涉及的表或衍生表,如果指定了别名就显示的别名。&lt;derivedN&gt;N就是id值，指该id值对应的那一步操作的结果。还有&lt;unionM,N&gt;这种类型，出现在UNION语句中</p>
<p>eg:<br>&lt;derivedN&gt;类型, eg:<br>explain select *  from (select 1) b;</p>
<p>&lt;unionM,N&gt;类型, eg:<br>explain select * from bank where id in  (select id from bank where id = 1 union select id from bank where id = 2);</p>
<h4 id="partitions"><a href="#partitions" class="headerlink" title="partitions"></a>partitions</h4><p>针对MySQL内置分区表，表示当前使用了哪些子分区；用于确认查询对分区的过滤效率</p>
<h4 id="type-重要"><a href="#type-重要" class="headerlink" title="type [重要]"></a>type [重要]</h4><p>常见以下几种类型，查询效率理论上由好到差<br><strong>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</strong><br>详细说明每种常见type表示的含义：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>system</td>
<td>被查询表中有且只有一条数据且为系统表.这是const连接类型的特例</td>
</tr>
<tr>
<td>const</td>
<td>针对主键或唯一索引的等值查询扫描，最多只返回一行数据，eg：SELECT * FROM tbl_name WHERE primary_key = 1</td>
</tr>
<tr>
<td>eq_ref</td>
<td>当使用了主键索引，唯一索引等只会唯一地找出一条记录的情况，这种类型就会出现，这种类型的性能相当好。</td>
</tr>
<tr>
<td>ref</td>
<td>当使用除了主键索引、唯一索引以外的索引来匹配值时，或者使用了最左前缀索引（包括唯一索引和主键的），就会出现这个类型</td>
</tr>
<tr>
<td>ref_or_null</td>
<td>连接类型类似ref，只是搜索的行中包含NULL值MySQL做了额外的查找。eg: SELECT * FROM ref_table WHERE key_column = ‘1’ or key_column IS NULL</td>
</tr>
<tr>
<td>fulltext</td>
<td>使用全文索引时出现。</td>
</tr>
<tr>
<td>index_merge</td>
<td>多个索引同时优化，本质上是每个索引单独使用，再通过某种算法来合并结果</td>
</tr>
<tr>
<td>index_subquery</td>
<td>索引替换子查询，如果有这样的语句SELECT * FROM table WHERE value IN(SELECT key_column FROM table where xxx)，IN后面的语句会被索引直接代替，来提高效率</td>
</tr>
<tr>
<td>unique_subquery</td>
<td>唯一索引替换子查询，和index_subquery类似，只不过是使用唯一索引来替换IN后面的子句</td>
</tr>
<tr>
<td>range</td>
<td>范围扫描，比index强一些，因为它是从索引的某个点开始的，用不着遍历全部索引。一些带有BETWEEN，各种比较符号的语句容易出现这种类型，但是要特别注意IN和OR，这也会显示成range，但是其性能跟index差不多</td>
</tr>
<tr>
<td>index</td>
<td>按索引顺序全表扫描，通常性能和全表扫描没什么区别，除非Extra列中有”Using index”字样，那说明使用了覆盖索引，这种情况下要快于ALL，因为直接扫描索引就能获取数据，而索引通常比表小的多</td>
</tr>
<tr>
<td>ALL</td>
<td>全表扫描。最差的一种类型，从数据表中逐行查找数据，应考虑查询优化了！</td>
</tr>
</tbody>
</table>
<h4 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h4><p>表示MySQL查询优化器发现当前查询可能被使用地索引，但不一定能会利用，如果possible_key的列举的索引越多，往往说明索引创建不合理，查询效率不是最高效；</p>
<h4 id="key"><a href="#key" class="headerlink" title="key"></a>key</h4><p>显示MySQL实际决定使用的键（索引）。如果没有选择索引，键是NULL。注意：对于组合索引，查询可能只使用其部分字段</p>
<h4 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h4><p>表示查询优化器使用了索引的字节数，可以评估组合索引是否完全被使用，或只有最左部分字段使用<br>key_len字节的计算规则：</p>
<pre><code>字符串
    char(n): n 字节长度
    varchar(n): 如果是 utf8 编码, 则是 3 n + 2字节; 如果是 utf8mb4 编码, 则是 4 n + 2 字节.
数值类型:
    TINYINT: 1字节
    SMALLINT: 2字节
    MEDIUMINT: 3字节
    INT: 4字节
    BIGINT: 8字节
时间类型
    DATE: 3字节
    TIMESTAMP: 4字节
    DATETIME: 8字节
字段属性: 
    NULL 属性 占用一个字节. 如果一个字段是 NOT NULL 的, 则没有此属性.
</code></pre><p>key_len的长度计算方式例如：</p>
<pre><code>varchr(10)变长字段且允许NULL      : 10*(Char Set：utf8=3,gbk=2,latin1=1)+1(NULL)+2(变长字段)
varchr(10)变长字段且不允许NULL    : 10*(Char Set：utf8=3,gbk=2,latin1=1)+2(变长字段)
char(10)固定字段且允许NULL        : 10*(Char Set：utf8=3,gbk=2,latin1=1)+1(NULL)
char(10)固定字段且允许NULL        : 10*(Char Set：utf8=3,gbk=2,latin1=1)
</code></pre><p>实例如下:</p>
<p>数据库bank表结构：</p>
<pre><code>CREATE TABLE IF NOT EXISTS `bank` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `bank_name` varchar(100) NOT NULL DEFAULT &apos;&apos;,
  `bank_no` varchar(30) DEFAULT &apos;&apos;,
  `parent_bank_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `foreignkey` (`parent_bank_id`),
  KEY `unionkey` (`bank_name`,`bank_no`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
</code></pre><p>explain执行结果：</p>
<p><img src="/images/mysql-explain/explain-keylen.png" alt="explain-keylen"></p>
<p>计算的key_len即 100 ＊ 3 ＋ 2(如果bank_name允许null，则为100 ＊ 3 ＋ 2 ＋ 1)</p>
<h4 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h4><p>MySQL查询优化器根据统计信息，估算SQL要查找到结果集需要扫描读取的数据行数; 这个值非常直观显示SQL的效率好坏，原则rows越少越好</p>
<h4 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h4><p>EXplain 中的很多额外的信息会在 Extra 字段显示, 常见的有以下几种:</p>
<table>
<thead>
<tr>
<th>Extra</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>using where</td>
<td>使用过滤条件</td>
</tr>
<tr>
<td>using index</td>
<td>查询是覆盖了索引的</td>
</tr>
<tr>
<td>using temporary</td>
<td>使用临时表存储结果集，常见于排序和分组查询</td>
</tr>
<tr>
<td>using filesort</td>
<td>有排序</td>
</tr>
<tr>
<td>not exists</td>
<td>mysql优化了left join，一旦它找到了匹配left join标准的行， 就不再搜索了</td>
</tr>
<tr>
<td>distinct</td>
<td>查找到第一个匹配的行之后，mysql则会停止对当前行的搜索</td>
</tr>
<tr>
<td>impossible where</td>
<td>where子句总数失败的查询</td>
</tr>
<tr>
<td>impossible having</td>
<td>having子句总数失败的查询</td>
</tr>
<tr>
<td>using join buffer</td>
<td>使用连接缓存</td>
</tr>
<tr>
<td>select tables optimized away</td>
<td>没有groupby情况下使用min(),max(),或者count(*)</td>
</tr>
<tr>
<td>using index for group-by</td>
<td>与using index类似，在使用group-by时可从索引中找到字段</td>
</tr>
</tbody>
</table>
<p>参考资料<br><a href="https://dev.mysql.com/doc/refman/5.6/en/explain-output.html#explain-extra-information" target="_blank" rel="external">EXPLAIN Output Format</a><br><a href="http://blog.csdn.net/kk185800961/article/details/49179619" target="_blank" rel="external">MySQL EXPLAIN 实践汇总</a><br><a href="https://zhuoroger.github.io/2016/08/11/mysql-explain/" target="_blank" rel="external">细说MySQL Explain和Optimizer Trace简介</a><br><a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="external">MySQL性能优化神器 Explain使用分析</a></p>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP GD库合成图片]]></title>
      <url>http://jasonhzy.github.io/2017/01/07/php-generate-qr/</url>
      <content type="html"><![CDATA[<p>引入phpqrcode，并结合php提供的类库gd进行图片合成</p>
<a id="more"></a>
<h4 id="安装GD库"><a href="#安装GD库" class="headerlink" title="安装GD库"></a>安装GD库</h4><ol>
<li>终端内运行php -m，可以查看到是否安装gd库</li>
<li>安装gd库<br> apt-get install php5-gd     #ubuntu<br> yum install php5-gd      #centos</li>
</ol>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@desc</span>: generate qrcode</div><div class="line"> */</div><div class="line">define(<span class="string">"QRCODE_PATH"</span>, dirname(<span class="keyword">__FILE__</span>));</div><div class="line"><span class="keyword">include</span> <span class="string">'phpqrcode/qrlib.php'</span>;</div><div class="line"><span class="comment">//download zip file</span></div><div class="line"><span class="comment">//download($zipName);</span></div><div class="line"></div><div class="line">generate_qr(<span class="string">'123456'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_qr</span><span class="params">($str)</span></span>&#123;</div><div class="line">    $font = QRCODE_PATH.<span class="string">'/hwxh.ttf'</span>;</div><div class="line">    $num = str_pad($str, <span class="string">'6'</span>, <span class="string">'0'</span>, STR_PAD_LEFT);</div><div class="line">    $txt = <span class="string">'收   银   台   :   '</span> .trim(preg_replace(<span class="string">'/(\d)/'</span>, <span class="string">'$1   '</span>, $num));</div><div class="line">    $url = <span class="string">'https://example.com/'</span> . $num; <span class="comment">//二维码内容</span></div><div class="line">    $qrcode = <span class="string">"/tmp/&#123;$num&#125;_qr.png"</span>;</div><div class="line"></div><div class="line">    $level = <span class="string">'L'</span>;<span class="comment">//容错级别</span></div><div class="line">    $size = <span class="number">10</span>;<span class="comment">//生成图片大小</span></div><div class="line">    QRcode::png($url, $qrcode, $level, $size, <span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="comment">//二维码宽/高度</span></div><div class="line">    $qrcode = imagecreatefrompng($qrcode);</div><div class="line">    $qrcode_w = imagesx($qrcode);</div><div class="line">    $qrcode_h = imagesy($qrcode);</div><div class="line"></div><div class="line">    $bg_w = <span class="number">768</span>; <span class="comment">// 背景图片宽度</span></div><div class="line">    $bg_h = <span class="number">800</span>; <span class="comment">// 背景图片高度</span></div><div class="line"></div><div class="line">    $bg_img = imagecreatetruecolor($bg_w, $bg_h);</div><div class="line">    $white = imagecolorallocate($bg_img, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</div><div class="line">    imagefill($bg_img, <span class="number">0</span>, <span class="number">0</span>, $white);</div><div class="line"></div><div class="line">    imagecopyresampled($bg_img, $qrcode, <span class="number">15</span>, <span class="number">-10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">740</span>, <span class="number">740</span>, $qrcode_w, $qrcode_h);</div><div class="line"></div><div class="line">    $black = imagecolorallocate($bg_img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    $fontsize = <span class="number">28</span>;</div><div class="line">    $fontbox = imagettfbbox($fontsize, <span class="number">0</span>, $font, $txt);</div><div class="line">    imagettftext($bg_img, $fontsize, <span class="number">0</span>, ceil(($bg_w - $fontbox[<span class="number">2</span>])/<span class="number">2</span>), $bg_w + <span class="number">5</span>, $black, $font, $txt);</div><div class="line"></div><div class="line">    $qr =  <span class="string">"/tmp/qr_$num.png"</span>;</div><div class="line">    imagepng($bg_img, $qr);</div><div class="line">    imagedestroy($qrcode);</div><div class="line">    imagedestroy($bg_img);</div><div class="line"></div><div class="line">    $fp  = fopen($qr, <span class="string">'rb'</span>, <span class="number">0</span>);</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 修改图片分辨率</div><div class="line">     */</div><div class="line">    $base64= <span class="string">'data:image/png;base64,'</span>.base64_encode(fread($fp, filesize($qr)));</div><div class="line">    $file = file_get_contents($base64);</div><div class="line">    $filename = <span class="string">"$num.png"</span>;</div><div class="line"></div><div class="line">    <span class="comment">//数据块长度为9</span></div><div class="line">    $len = pack(<span class="string">"N"</span>, <span class="number">9</span>);</div><div class="line">    <span class="comment">//数据块类型标志为pHYs</span></div><div class="line">    $sign = pack(<span class="string">"A*"</span>, <span class="string">"pHYs"</span>);</div><div class="line">    <span class="comment">//X方向和Y方向的分辨率均为300DPI（1像素/英寸=39.37像素/米），单位为米（0为未知，1为米）</span></div><div class="line">    $data = pack(<span class="string">"NNC"</span>, <span class="number">300</span> * <span class="number">39.37</span>, <span class="number">300</span> * <span class="number">39.37</span>, <span class="number">0x01</span>);</div><div class="line">    <span class="comment">//CRC检验码由数据块符号和数据域计算得到</span></div><div class="line">    $checksum = pack(<span class="string">"N"</span>, crc32($sign . $data));</div><div class="line">    $phys = $len . $sign . $data . $checksum;</div><div class="line"></div><div class="line">    $pos = strpos($file, <span class="string">"pHYs"</span>);</div><div class="line">    <span class="keyword">if</span> ($pos &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//修改pHYs数据块</span></div><div class="line">        $file = substr_replace($file, $phys, $pos - <span class="number">4</span>, <span class="number">21</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//IHDR结束位置（PNG头固定长度为8，IHDR固定长度为25）</span></div><div class="line">        $pos = <span class="number">33</span>;</div><div class="line">        <span class="comment">//将pHYs数据块插入到IHDR之后</span></div><div class="line">        $file = substr_replace($file, $phys, $pos, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    file_put_contents(QRCODE_PATH.<span class="string">"/images/$filename"</span>, $file);</div><div class="line">    <span class="comment">//header("Content-type: image/png");</span></div><div class="line">    <span class="comment">//header('Content-Disposition: attachment; filename="' . $filename . '"');</span></div><div class="line"></div><div class="line">    unlink(<span class="string">"/tmp/&#123;$num&#125;_qr.png"</span>);</div><div class="line">    unlink(<span class="string">"/tmp/qr_$num.png"</span>);</div><div class="line">    <span class="comment">//	echo $file;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span><span class="params">($zipName)</span></span>&#123;</div><div class="line">    <span class="comment">//实例化zipArchive类</span></div><div class="line">    $zip = <span class="keyword">new</span> zipArchive();</div><div class="line">    <span class="keyword">if</span>(!$zip-&gt;open($zipName, ZIPARCHIVE::CREATE))&#123;</div><div class="line">        <span class="keyword">exit</span>(<span class="string">'不能下载'</span>);</div><div class="line">    &#125; <span class="comment">//打开的方式来进行创建 若有则打开 若没有则进行创建</span></div><div class="line">    <span class="comment">//循环将要下载的文件路径添加到压缩包</span></div><div class="line">    $files = glob(QRCODE_PATH.<span class="string">'/images/*'</span>);</div><div class="line">    <span class="keyword">foreach</span> ($files <span class="keyword">as</span> $file) &#123;</div><div class="line">        <span class="keyword">if</span>(file_exists($file))&#123;</div><div class="line">            $zip-&gt;addFile($file, basename($file));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//关闭压缩包</span></div><div class="line">    $zip-&gt;close();</div><div class="line"><span class="comment">//    //实现文件的下载</span></div><div class="line"><span class="comment">//    header('Content-Type:Application/zip');</span></div><div class="line"><span class="comment">//    header('Content-Disposition:attachment; filename="' . basename($zipName) . '"');</span></div><div class="line"><span class="comment">//    header('Content-Length:' . filesize($zipName));</span></div><div class="line"><span class="comment">//    readfile($zipName);</span></div><div class="line"><span class="comment">//    //删除生成的压缩文件</span></div><div class="line"><span class="comment">//    unlink($zipName);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><img src="/images/phpqrcode.png" alt="Example"></p>
<p>参考资料<br><a href="http://phpqrcode.sourceforge.net/" target="_blank" rel="external">phpqrcode</a><br><a href="/download/hwxh.ttf">字体下载</a></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> QRcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 配置LAMP环境]]></title>
      <url>http://jasonhzy.github.io/2016/09/27/ubuntu-install/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="/images/ubuntu-lamp.jpg" alt="ubuntu lamp"></p>
<p>不同版本的ubuntu，所提供源不同，自然所包含的php、mysql、apache等的版本也是不同的，安装的时候需要选择相应的版本进行安装，如果提供的不能满足需求，需要手动添加源（即/etc/apt/sources.list下添源链接或者add-apt-repository命令添加PPA源）</p>
<a id="more"></a>
<p>Apache2目录结构：</p>
<pre><code>apache2
|--apache2.conf
|--conf-available
|--conf-enabled
|--conf.d
|--envvars
|--http.conf
|--magic
|--mods-available
|--mods-enabled
|--ports.conf
|--sites-avaliable
|--sites-enabled
</code></pre><ul>
<li>apache2.conf: 主要配置文件</li>
<li>envvars: Apache2环境变量设置，例如apache的用户和组</li>
<li>httpd.conf：遗留的Apache2主要配置文件。这个文件是空的，其中的配置选项都转移到其他配置文件里了</li>
<li>ports.conf: 监听 80 端口（默认HTTP通信端口）和 443 端口（SSL支持）如果你想 apache 监听其他端口，只需添加更多的 Listen 指令</li>
<li>conf.d/: 用来控制Apache的一些特殊配置，比如SSL配置。</li>
<li>sites-available/: web站点的虚拟主机文件，不同的请求对应不同的内容，但并不表示都正在使用</li>
<li>sites-enabled/: 包含正在使用的虚拟主机的定义，通常只包含到sites-available目录下文件的符号链接。</li>
<li>mods-available: 目录包含模块和模块配置文件，不是所有的模块都有配置文件 </li>
<li>mods-enabled: 持有/etc/apache2/mods-available目录下文件的链接，当该目录下有一个模块文件和其配置文件，那么Apache重启后该模块将生效</li>
</ul>
<h3 id="Apache2-conf"><a href="#Apache2-conf" class="headerlink" title="Apache2.conf"></a>Apache2.conf</h3><p>主要分成三部分，全局配置、默认服务器配置和虚拟主机配置，在Ubuntu系统下，这个文件主要负责全局配置，默认服务器和虚拟主机可以通过Include语句来处理。</p>
<p>全局配置</p>
<p>Timeout: 默认设置为300，意思是服务器用300s来处理每个请求，即接收和发送的超时时间<br>KeepAlive: 设置为On，将允许同个客户端每个连接一直保持来处理多个请求(HTTP长连接)<br>MaxKeepAliveRequests: 设置每个连接最多能处理多少个单独的请求<br>KeepAliveTimeout: 参数设置下一个请求来之前来等待多久，超过这个时间自动关闭这个connection</p>
<p>MPM配置</p>
<p>MPM（Multi-Processing Module，多进程处理模块）模式，主要包括三种稳定的模式，分别是prefork，worker和event，它们同时也代表这Apache的演变和发展</p>
<ul>
<li>event：这个MPM适用于需要有大量持续连接的(KeepAlive)的情况，KeepAlive的好处相信大家都知道，可以在同一个TCP连接中响应多次请求，这种请求方式可以使一个包含很多元素（图片，CSS，etc）的HTML网页加速一半以上。在配置文件中设置KeepAlive为On，就可以开启KeepAlive。</li>
<li>perfork：实现了一个非线程的MPM，兼容1.3，虽然速度不是很快，但是非常稳定，能够隔离每一个请求。perfork顾名思义，就是主进程先派生出一堆子进程，这样新的请求来了以后不需要等待服务器产生子进程所花的时间。使用perfork最重要的是设置MacClients的值，要足够大以发挥很好的性能，但是不能太高防止内存爆掉。</li>
<li>worker：Apache2的新MPM。多进程+多线程，资源占用小的同时也比perfork要高效的多，是未来Apache2的发展趋势吧。该MPM重要的是两个选项：MaxClients和ThreadsPerChild。ThreadsPerChild用来每个子进程允许建立的线程数，MaxClients用来控制允许建立的总线程数。</li>
</ul>
<p>Apache的模式，可以使用httpd -V命令来查看:</p>
<pre><code>Server version: Apache/2.4.18 (Unix)
Server built:   Feb 20 2016 20:03:19
Server&apos;s Module Magic Number: 20120211:52
Server loaded:  APR 1.4.8, APR-UTIL 1.5.2
Compiled using: APR 1.4.8, APR-UTIL 1.5.2
Architecture:   64-bit
Server MPM:     prefork
threaded:     no
    forked:     yes (variable process count)
</code></pre><p>综上所述，如果需要更好的伸缩性，选择worker或event，如果需要更好的稳定性和兼容性，选择perfork。如果无法评估自己的需要，不妨直接选择worker</p>
<p>如果需要切换模式，可以通过如下方法来切换：</p>
<pre><code>sudo a2dismod mpm_prefork
sudo a2enmod mpm_event
sudo service apache2 restart #重启apache2
</code></pre><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>php安装</p>
<pre><code>sudo apt-get install php5.6 php5.6-common php5.6-curl php5.6-gd php5.6-mcrypt php5.6-xml 
                    php5.6-bcmath php5.6-mbstring php5.6-mysql
</code></pre><p>mysql安装</p>
<pre><code>sudo apt-get install mysql mysql-server
</code></pre><p>apache安装</p>
<pre><code>sudo apt-get install apache2
</code></pre><p>安装对脚本语言的支持</p>
<pre><code>sudo apt-get install libapache2-mod-php5
</code></pre><h3 id="Apache中启用和禁用网站和模块"><a href="#Apache中启用和禁用网站和模块" class="headerlink" title="Apache中启用和禁用网站和模块"></a>Apache中启用和禁用网站和模块</h3><p>启用和禁用网站</p>
<pre><code>sudo a2ensite 虚拟主机文件名(example.com.conf)
sudo a2dissite 虚拟主机文件名(example.com.conf)
</code></pre><p>启用和禁用模块</p>
<pre><code>sudo a2enmod 模块配置文件名
sudo a2dismod  模块配置文件名
</code></pre><p>启用用户文件夹实现文件服务器的功能</p>
<p>1.使用如下命令启用userdir模块</p>
<pre><code>sudo a2enmod userdir
</code></pre><p>2.userdir.conf配置userdir模块</p>
<pre><code>sudo vim /etc/apache2/mods-enabled/userdir.conf
</code></pre><p>内容如下，把public_html改为你的个人文件夹名称，如果不存在则创建：</p>
<pre><code>&lt;IfModule mod_userdir.c&gt;
    UserDir public_html
    UserDir disabled root

    &lt;Directory /home/*/public_html&gt;
        AllowOverride All
        Options MultiViews Indexes SymLinksIfOwnerMatch
        &lt;Limit GET POST OPTIONS&gt;
            # Apache &lt;= 2.2:
            Order allow,deny
            Allow from all

            # Apache &gt;= 2.4:
            #Require all granted
        &lt;/Limit&gt;
        &lt;LimitExcept GET POST OPTIONS&gt;
            # Apache &lt;= 2.2:
            Order deny,allow
            Deny from all

            # Apache &gt;= 2.4:
            #Require all denied
        &lt;/LimitExcept&gt;
    &lt;/Directory&gt;
&lt;/IfModule&gt;
</code></pre><p>3.创建个人文件夹并重启APache</p>
<pre><code>sudo service apache2 restart #重启
mkdir /home/$USER/public_html
</code></pre><p>4.给你的文件添加访问权限</p>
<p>上面的AllowOverride All改为AllowOverride AuthConfig,然后给你的服务器添加认证用户，认证用户保存在/var/www/passwd/中，需要使用htpasswd命令来添加用户，如下所示:</p>
<pre><code>htpasswd -c /var/www/passwd/public_html lippi 
New password: mypassword
Re-type new password: mypassword
Adding password for user lippi
</code></pre><p>userdir.conf调整为：</p>
<pre><code>&lt;IfModule mod_userdir.c&gt;
    UserDir public_html 
    UserDir disabled root

    &lt;Directory /home/*/public_html&gt;
        AllowOverride FileInfo AuthConfig Limit Indexes
        Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
        &lt;Limit GET POST OPTIONS&gt;
            #Require all granted
            AuthType Basic
            AuthName &quot;lippi&quot;
            AuthUserFile /var/www/passwd/public_html
            Require valid-user
        &lt;/Limit&gt;
        &lt;LimitExcept GET POST OPTIONS&gt;
            Require all denied
        &lt;/LimitExcept&gt;
    &lt;/Directory&gt;
&lt;/IfModule&gt;
</code></pre><h3 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h3><p>问题一：</p>
<pre><code>root@ubuntu:~# a2ensite example.com 
ERROR:  Site example.com does not exists!
</code></pre><p>解决方案:</p>
<pre><code># cd /etc/apache2/sites-available/
# mv example.com example.com.conf
</code></pre><p>附：相关资料</p>
<ul>
<li><a href="http://blog.danthought.com/programming/2015/11/14/apache-configuration-files-on-ubuntu/" target="_blank" rel="external">Apache 配置文件</a></li>
<li><a href="http://tecadmin.net/fixed-error-site-example-com-does-not-exists-apache-a2ensite/" target="_blank" rel="external">ERROR: Site example.com does not exists!</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[phpstorm的Debug调试]]></title>
      <url>http://jasonhzy.github.io/2016/08/27/php-debug/</url>
      <content type="html"><![CDATA[<p>一直以来，调试PHP脚本都是直接在脚本中die或exit实现断点调试，下面介绍phpstorm+xdebug的组合来实现代码的调试</p>
<h3 id="安装-amp-配置xdebug"><a href="#安装-amp-配置xdebug" class="headerlink" title="安装&amp;配置xdebug"></a>安装&amp;配置xdebug</h3><h4 id="安装xdebug"><a href="#安装xdebug" class="headerlink" title="安装xdebug"></a>安装xdebug</h4><pre><code>sudo apt-get install php5.6-xdebug #ubuntu
sudo port install php56-xdebug  #mac
sudo yum install php56w-pecl-xdebug #centos
</code></pre><a id="more"></a>        
<h4 id="配置php-ini"><a href="#配置php-ini" class="headerlink" title="配置php.ini"></a>配置php.ini</h4><p>在php.ini文件中添加如下配置</p>
<pre><code>[xdebug]
;zend_extension=&quot;/opt/local/lib/php56/extensions/no-debug-non-zts-20131226/xdebug.so&quot; #mac下extension路径
xdebug.idekey=phpstorm
xdebug.remote_enable = On
xdebug.remote_host=localhost
xdebug.remote_port=8888
xdebug.remote_handler=dbgp
xdebug.profiler_append = 0
xdebug.profiler_enable = 1
xdebug.profiler_enable_trigger = 0
xdebug.profiler_output_dir = &quot;/tmp&quot;
xdebug.profiler_output_name = &quot;cachegrind.out.%t-%s&quot;
</code></pre><p>重启apache之后，通过phpinfo查看，截图如下：</p>
<p><img src="/images/xdebug/xdebug-phpinfo.png" alt="xdebug-phpinfo"></p>
<p>注意：<br>1.利用命令“php –ini”可以查看所有.ini为后缀的配置文件，如php.ini、xdebug.ini等，查看xdebug.ini文件即可看到zend_extension配置<br>2.部分参数说明:,<br>idekey：自己定义，需要与IDE里头配置一样。<br>remote_enable：远程调试是否开启。<br>remote_host：调试器所在的主机，支持本机调试，也支持远程主机调试（例如远程运行php服务将调试信息发到本地IDE）<br>remote_port：调试器启动的端口。<br>remote_hanler：运行服务器与调试器的交互协议，默认为DBGP即可。<br>profiler_enable: 开启信息存储<br>profiler_output_dir: 信息存储位置</p>
<h3 id="配置phpstorm"><a href="#配置phpstorm" class="headerlink" title="配置phpstorm"></a>配置phpstorm</h3><p>打开PhpStorm的Setting（Mac下是Preference）</p>
<h4 id="调试端口"><a href="#调试端口" class="headerlink" title="调试端口"></a>调试端口</h4><p>在Debug Port里配置一个端口号，可自定义，需保证未被其他进程占用，前一步的xdebug.remote_port应该与这里开启的端口保持一致，否则xdebug与调试器无法通信<br><img src="/images/xdebug/xdebug-port.png" alt="xdebug-port"></p>
<h4 id="DBGp-Proxy"><a href="#DBGp-Proxy" class="headerlink" title="DBGp Proxy"></a>DBGp Proxy</h4><p>配置IDE key，与前面的xdebug.idekey保持一致。(Host和Port填写与xdebug.remote_host和xdebug.remote_port保持一致[貌似不一致也是可行的，一般是localhost和80])<br><img src="/images/xdebug/xdebug-idekey.png" alt="xdebug-idekey"></p>
<h4 id="进入调试模式"><a href="#进入调试模式" class="headerlink" title="进入调试模式"></a>进入调试模式</h4><p>断点调试分3种模式：脚本调试、web application运行调试、浏览器访问自动触发调试。</p>
<h5 id="脚本调试"><a href="#脚本调试" class="headerlink" title="脚本调试"></a>脚本调试</h5><p>该模式下允许本地脚本运行时断点调试，步骤如下：<br>1.设置断点<br>2.右键选中脚本<br>3.选择Debug即可<br><img src="/images/xdebug/xdebug-script.png" alt="xdebug-script"></p>
<h5 id="web-application运行调试"><a href="#web-application运行调试" class="headerlink" title="web application运行调试"></a>web application运行调试</h5><p>该模式允许指定url访问web页面进行php代码调试，步骤如下：<br>1.设置断点<br>2.配置web application<br>3.开启Debug<br><img src="/images/xdebug/xdebug-web.png" alt="xdebug-web"></p>
<p>其中配置web application的详细步骤如下：</p>
<p>1.选择“Edit Configuration”：<br><img src="/images/xdebug/web-config-add.png" alt="xdebug-config-add"><br>2.添加“PHP Web Application”：<br><img src="/images/xdebug/web-config-modify.png" alt="xdebug-config-modify"><br>3.配置详细过程：<br><img src="/images/xdebug/web-config-server.png" alt="xdebug-config-server"><br>4.配置成功后的效果图：<br><img src="/images/xdebug/web-config-complete.png" alt="xdebug-config-complete"></p>
<h5 id="浏览器调试"><a href="#浏览器调试" class="headerlink" title="浏览器调试"></a>浏览器调试</h5><p>该模式下，浏览器需要安装调试的插件，之后浏览器访问某个页面url，自动触发IDE进入调试模式，步骤如下：</p>
<p>1.安装浏览器debug插件，并且需开启debug模式</p>
<p>chrome安装插件Xdebug helper<br><img src="/images/xdebug/chrome-debug.png" alt="chrome-debug"></p>
<p>firefox安装的插件The easiest Xdebug<br><img src="/images/xdebug/firefox-debug.png" alt="firefox-debug"></p>
<p>注意：插件内的IDE key配置必须与xdebug.idekey保持一致</p>
<p>2.PhpStorm开启监听连接<br><img src="/images/xdebug/phpstorm-listen.png" alt="phpstorm-listen"></p>
<p>3.代码内设置断点<br>4.浏览器访问页面url，即可触发IDE进入调试模式</p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Debug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx 文件路径配置alias&root]]></title>
      <url>http://jasonhzy.github.io/2016/08/25/nginx-alias-root/</url>
      <content type="html"><![CDATA[<p>nginx指定文件路径有两种方式root和alias，root与alias主要区别在于nginx如何解释location后面的uri，这会使两者分别以不同的方式将请求映射到服务器文件上。</p>
<a id="more"></a>
<h1 id="最基本的区别"><a href="#最基本的区别" class="headerlink" title="最基本的区别"></a>最基本的区别</h1><p>alias 指定的目录是准确的，给location指定一个目录。<br>root 指定目录的上级目录，并且该上级目录要含有locatoin指定名称的同名目录。<br>以root方式设置资源路径：</p>
<pre><code>语法: root path;
配置块: http、server、location、if
</code></pre><p>以alias 方式设置资源路径</p>
<pre><code>语法: alias path;
配置块: location
</code></pre><p>Example:<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">location /img/ &#123;</div><div class="line">	<span class="built_in">alias</span> /<span class="built_in">var</span>/www/<span class="built_in">image</span>/;</div><div class="line">&#125;</div><div class="line">#若按照上述配置的话，则访问/img/目录里面的文件时，ningx会自动去/<span class="built_in">var</span>/www/<span class="built_in">image</span>/目录找文件</div><div class="line">location /img/ &#123;</div><div class="line">	root /<span class="built_in">var</span>/www/<span class="built_in">image</span>;</div><div class="line">&#125;</div><div class="line">#若按照这种配置的话，则访问/img/目录下的文件时，nginx会去/<span class="built_in">var</span>/www/<span class="built_in">image</span>/img/目录下找文件</div></pre></td></tr></table></figure></p>
<p>注意：</p>
<pre><code>1.使用alias时，目录名后面一定要加”/“。
2.使用alias标签的目录块中不能使用rewrite的break。
3.alias在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。
4.alias只能位于location块中
</code></pre><h1 id="配置alias支持PHP-fastcgi解析"><a href="#配置alias支持PHP-fastcgi解析" class="headerlink" title="配置alias支持PHP fastcgi解析"></a>配置alias支持PHP fastcgi解析</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">location</span> /app &#123;</div><div class="line">	<span class="attribute">alias</span> /project/app/;</div><div class="line">	<span class="attribute">index</span> index.php;			</div><div class="line">	<span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123; <span class="comment">#方案一</span></div><div class="line">		<span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9100</span>;</div><div class="line">		<span class="attribute">fastcgi_index</span>  index.php;</div><div class="line">		<span class="attribute">include</span> fastcgi.conf;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#location ~ /app/.+\.php$ &#123; ＃方案二</span></div><div class="line"><span class="comment">#	rewrite /app/(.+\.php) /$1 break;</span></div><div class="line"><span class="comment">#	include fastcgi.conf;</span></div><div class="line"><span class="comment">#	fastcgi_pass 127.0.0.1:9100;</span></div><div class="line"><span class="comment">#	fastcgi_index index.php;</span></div><div class="line"><span class="comment">#	fastcgi_param SCRIPT_FILENAME /project/app/$fastcgi_script_name;</span></div><div class="line"><span class="comment">#&#125;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
            <tag> root&amp;alias </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tmux配置]]></title>
      <url>http://jasonhzy.github.io/2016/08/24/tmux-config/</url>
      <content type="html"><![CDATA[<h2 id="tmux简介"><a href="#tmux简介" class="headerlink" title="tmux简介"></a>tmux简介</h2><blockquote>
<p>tmux是一个优秀的终端复用软件，类似GNU screen，但来源于OpenBSD，采用BSD授权。使用它最直观的好处就是通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机；当然其功能远不止于此。</p>
</blockquote>
<p><img src="/images/tmux-config.png" alt="tmux ide"></p>
<a id="more"></a>
<p>tmux使用C/S模型构建，主要包括以下单元模块：</p>
<table>
<thead>
<tr>
<th>-</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>server</td>
<td>服务器，输入tmux命令时就开启一个服务器</td>
</tr>
<tr>
<td>session</td>
<td>会话，一个会话可以包含多个窗口</td>
</tr>
<tr>
<td>window</td>
<td>窗口，一个会话可以包含多个窗口</td>
</tr>
<tr>
<td>pane</td>
<td>面板，一个窗口可以包含多个面板</td>
</tr>
</tbody>
</table>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code>tmux new-session -t session #进入某个会话
tmux ls #列出会话 
tmux attach-session -t session #进入某个会话
tmux kill-session -t &quot;session&quot;   //删除指定会话
</code></pre><p>  Ctrl+b    激活控制台；此时以下按键生效</p>
<h3 id="session常用命令"><a href="#session常用命令" class="headerlink" title="session常用命令"></a>session常用命令</h3><table>
<thead>
<tr>
<th style="text-align:left">快捷键</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">重命名当前session</td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">列出所有快捷键；按q返回</td>
</tr>
<tr>
<td style="text-align:left">d</td>
<td style="text-align:left">脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话</td>
</tr>
<tr>
<td style="text-align:left">D</td>
<td style="text-align:left">选择要脱离的会话；在同时开启了多个会话时使用</td>
</tr>
<tr>
<td style="text-align:left">Ctrl+z</td>
<td style="text-align:left">挂起当前会话</td>
</tr>
<tr>
<td style="text-align:left">r</td>
<td style="text-align:left">强制重绘未脱离的会话</td>
</tr>
<tr>
<td style="text-align:left">s</td>
<td style="text-align:left">选择并切换会话；在同时开启了多个会话时使用</td>
</tr>
<tr>
<td style="text-align:left">:</td>
<td style="text-align:left">进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器</td>
</tr>
<tr>
<td style="text-align:left">[</td>
<td style="text-align:left">进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出</td>
</tr>
<tr>
<td style="text-align:left">~</td>
<td style="text-align:left">列出提示信息缓存；其中包含了之前tmux返回的各种提示信息</td>
</tr>
<tr>
<td style="text-align:left">t</td>
<td style="text-align:left">显示时间</td>
</tr>
<tr>
<td style="text-align:left">(</td>
<td style="text-align:left">切换session 切换到上一个session</td>
</tr>
<tr>
<td style="text-align:left">)</td>
<td style="text-align:left">切换session 切换到下一个session</td>
</tr>
<tr>
<td style="text-align:left">L</td>
<td style="text-align:left">切换session 到前一个活跃的session</td>
</tr>
</tbody>
</table>
<h3 id="window常用命令"><a href="#window常用命令" class="headerlink" title="window常用命令"></a>window常用命令</h3><table>
<thead>
<tr>
<th style="text-align:left">快捷键</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">c</td>
<td style="text-align:left">创建新窗口</td>
</tr>
<tr>
<td style="text-align:left">&amp;</td>
<td style="text-align:left">关闭当前窗口</td>
</tr>
<tr>
<td style="text-align:left">数字键</td>
<td style="text-align:left">切换至指定窗口</td>
</tr>
<tr>
<td style="text-align:left">p</td>
<td style="text-align:left">切换至上一窗口</td>
</tr>
<tr>
<td style="text-align:left">n</td>
<td style="text-align:left">切换至下一窗口</td>
</tr>
<tr>
<td style="text-align:left">l</td>
<td style="text-align:left">在前后两个窗口间互相切换</td>
</tr>
<tr>
<td style="text-align:left">w</td>
<td style="text-align:left">通过窗口列表切换窗口</td>
</tr>
<tr>
<td style="text-align:left">,</td>
<td style="text-align:left">重命名当前窗口；这样便于识别</td>
</tr>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">修改当前窗口编号；相当于窗口重新排序</td>
</tr>
<tr>
<td style="text-align:left">f</td>
<td style="text-align:left">在所有窗口中查找指定文本</td>
</tr>
</tbody>
</table>
<h3 id="pane常用命令"><a href="#pane常用命令" class="headerlink" title="pane常用命令"></a>pane常用命令</h3><table>
<thead>
<tr>
<th style="text-align:left">快捷键</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">”</td>
<td style="text-align:left">将当前面板平分为上下两块</td>
</tr>
<tr>
<td style="text-align:left">%</td>
<td style="text-align:left">将当前面板平分为左右两块</td>
</tr>
<tr>
<td style="text-align:left">x</td>
<td style="text-align:left">关闭当前面板</td>
</tr>
<tr>
<td style="text-align:left">!</td>
<td style="text-align:left">将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板</td>
</tr>
<tr>
<td style="text-align:left">Ctrl+方向键</td>
<td style="text-align:left">以1个单元格为单位移动边缘以调整当前面板大小</td>
</tr>
<tr>
<td style="text-align:left">Alt+方向键</td>
<td style="text-align:left">以5个单元格为单位移动边缘以调整当前面板大小</td>
</tr>
<tr>
<td style="text-align:left">Space</td>
<td style="text-align:left">在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled</td>
</tr>
<tr>
<td style="text-align:left">q</td>
<td style="text-align:left">显示面板编号</td>
</tr>
<tr>
<td style="text-align:left">o</td>
<td style="text-align:left">在当前窗口中选择下一面板</td>
</tr>
<tr>
<td style="text-align:left">方向键</td>
<td style="text-align:left">移动光标以选择面板</td>
</tr>
<tr>
<td style="text-align:left">{</td>
<td style="text-align:left">向前置换当前面板</td>
</tr>
<tr>
<td style="text-align:left">}</td>
<td style="text-align:left">向后置换当前面板</td>
</tr>
<tr>
<td style="text-align:left">Alt+o</td>
<td style="text-align:left">逆时针旋转当前窗口的面板</td>
</tr>
<tr>
<td style="text-align:left">Ctrl+o</td>
<td style="text-align:left">顺时针旋转当前窗口的面板</td>
</tr>
</tbody>
</table>
<h2 id="tmux配置文件-tmux-conf"><a href="#tmux配置文件-tmux-conf" class="headerlink" title="tmux配置文件 ~/.tmux.conf"></a>tmux配置文件 ~/.tmux.conf</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">setw -g mode-mouse on</div><div class="line"><span class="keyword">set</span> -g mouse-<span class="keyword">select</span>-pane <span class="keyword">on</span></div><div class="line"><span class="keyword">set</span> -g mouse-<span class="keyword">resize</span>-pane <span class="keyword">on</span></div><div class="line"><span class="keyword">set</span> -g mouse-<span class="keyword">select</span>-window <span class="keyword">on</span></div><div class="line">#从 <span class="number">2.1</span> 版本开始（发布于 <span class="number">2015.10</span><span class="number">.18</span>），上述 <span class="number">4</span> 个选项就不可用了。统一使用下面的配置：</div><div class="line"><span class="keyword">set</span>-<span class="keyword">option</span> -g mouse <span class="keyword">on</span>         # 开启鼠标控制</div><div class="line"></div><div class="line"># window</div><div class="line">setw -g window-<span class="keyword">status</span>-<span class="keyword">current</span>-bg red  # 当前选中窗口背景色为红色</div><div class="line"></div><div class="line">#<span class="keyword">fixed</span> window <span class="keyword">name</span> <span class="keyword">after</span> <span class="keyword">rename</span></div><div class="line">setw -g <span class="keyword">allow</span>-<span class="keyword">rename</span> <span class="keyword">off</span></div><div class="line">setw -g <span class="keyword">automatic</span>-<span class="keyword">rename</span> <span class="keyword">off</span></div><div class="line"></div><div class="line">setw -g aggressive-<span class="keyword">resize</span> <span class="keyword">off</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> tmux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tmux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP中cookie的 path/domain参数]]></title>
      <url>http://jasonhzy.github.io/2016/07/31/php-cookie/</url>
      <content type="html"><![CDATA[<p>在PHP中用setcookie 来设置网站的cookie，该函数的用法如下：</p>
<blockquote>
<p>bool setcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string$domain [, bool $secure = false [, bool $httponly = false ]]]]]])</p>
</blockquote>
<a id="more"></a>
<p>setcookie() 参数详解:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>cookie的名字</td>
<td>使用 $_COOKIE[‘cookiename’] 调用名为cookiename 的 cookie。</td>
</tr>
<tr>
<td>value</td>
<td>cookie的值，存放在客户端，不要存放敏感数据</td>
<td>假定 name 是’cookiename’，可以通过$_COOKIE[‘cookiename’] 取得其值。</td>
</tr>
<tr>
<td>expire</td>
<td>Cookie 过期的时间。这是个 Unix 时间戳，即从 Unix纪元开始的秒数。换而言之，通常用 time() 函数再加上秒数来设定 cookie 的失效期。或者用mktime()来实现。</td>
<td>time()+60<em>60</em>24*30 将设定 cookie 30 天后失效。如果未设定，cookie 将会在会话结束后（一般是浏览器关闭）失效。</td>
</tr>
<tr>
<td>path</td>
<td>Cookie 在服务器端的有效路径。</td>
<td>如果该参数设为 ‘/‘的话，cookie就在整个 domain 内有效，如果设为 ‘/foo/‘，cookie就只在 domain 下的 /foo/目录及其子目录内有效，例如 /foo/bar/。默认值为设定 cookie 的当前目录。</td>
</tr>
<tr>
<td>domain</td>
<td>该 cookie 有效的域名。</td>
<td>要使 cookie 能在如 example.com域名下的所有子域都有效的话，该参数应该设为 ‘.example.com’。虽然 . 并不必须的，但加上它会兼容更多的浏览器。如果该参数设为www.example.com 的话，就只在 www 子域内有效。细节见Cookie 规范中的 tail matching。</td>
</tr>
<tr>
<td>secure</td>
<td>指明cookie 是否仅通过安全的 HTTPS 连接传送。当设成 TRUE时，cookie 仅在安全的连接中被设置。默认值为FALSE。</td>
<td>0 或 1</td>
</tr>
<tr>
<td>httponly</td>
<td>设为true后，只能通过http访问，javascript无法访问;防止xss读取cookie;php5.2以上版本已支持HttpOnly参数的设置，同样也支持全局的HttpOnly的设置，在php.ini中，session.cookie_httponly=ture来开启全局的Cookie的HttpOnly属性</td>
<td>setcookie(“abc”, “test”,NULL, NULL, NULL, NULL, TRUE)</td>
</tr>
</tbody>
</table>
<h2 id="path参数"><a href="#path参数" class="headerlink" title="path参数"></a>path参数</h2><p>如下的目录结构：<br>coookie<br>├─child<br>│   └── child.php<br>└─father.php<br>father.php中的代码：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">setcookie(<span class="string">"father_set_0"</span>, <span class="string">"default"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>);</div><div class="line">setcookie(<span class="string">"father_set_1"</span>, <span class="string">"/"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>, <span class="string">"/"</span>);</div><div class="line">setcookie(<span class="string">"father_set_2"</span>, <span class="string">"/child/"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>, <span class="string">"/child/"</span>);</div><div class="line">setcookie(<span class="string">"father_set_3"</span>, <span class="string">"/cookie/child/"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>, <span class="string">"/cookie/child/"</span>);</div><div class="line"></div><div class="line">echo '&lt;pre&gt;';</div><div class="line">print_r($_COOKIE);</div></pre></td></tr></table></figure></p>
<p>child.php中的代码：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">setcookie(<span class="string">"child_set_0"</span>, <span class="string">"default"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>);</div><div class="line">setcookie(<span class="string">"child_set_1"</span>, <span class="string">"/"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>,<span class="string">"/"</span>);</div><div class="line">setcookie(<span class="string">"child_set_2"</span>, <span class="string">"/child/"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>, <span class="string">"/child"</span>);</div><div class="line">setcookie(<span class="string">"child_set_3"</span>, <span class="string">"/cookie/child/"</span>, time()+<span class="number">24</span>*<span class="number">3600</span>, <span class="string">"/cookie/child/"</span>);</div><div class="line"></div><div class="line">echo '&lt;pre&gt;';</div><div class="line">print_r($_COOKIE);</div></pre></td></tr></table></figure></p>
<p>按father.php—&gt;child.php—&gt;father.php—&gt;child.php的顺序访问页面，输入出结果如下：<br>第一次访问father.php:</p>
<p><img src="/images/php-cookie/father_1st_view.png" alt="father_first_view"></p>
<p>初始状态下客户端没有相关的cookie记录，在上图中只有已收到的cookie，没有已发送的cookie，则打印$_COOKIE数组时是没有输出。<br>　　从上面这点可以看出，页面的每次请求cookie的变化是：页面请求时浏览器发送客户端已有的cookie，服务器端接收cookie将其存入数组$_COOKIE数组中供程序使用；而在服务器端响应本次请求设置的cookie尚未发送到客户端时$_COOKIE数组中是没有记录的。</p>
<p>第一次访问child.php:</p>
<p><img src="/images/php-cookie/child_1st_view.png" alt="child_first_view"></p>
<p>页面打印出的$_COOKIE数组中有两个值，分别是请求时发送的数据,一个页面只能访问路径设置为当前页面路径和父路径的cookie，不能访问兄弟路径的cookie。</p>
<p>第二次访问father.php:</p>
<p><img src="/images/php-cookie/father_2nd_view.png" alt="father_second_view"></p>
<p>这里就能看出来father.php虽然设置了三个cookie，但由于路径的原因浏览器请求时并没有发送其他子路径的cookie以至于不能读取。其中”child_set_1”是子路径下的页面设置的cookie，由于路径是本页面所在路径则能读取。</p>
<p>　　还有一点值得注意的是，这次访问时没能打印出”child_set_0”的值，在child.php中”child_set_0”的路径是为空的，这点是默认为当前路径，而不是站点根目录的，所有子路径想设置cookie让父路径的页面访问则需要设置路径的。</p>
<p>第二次访问child.php:</p>
<p><img src="/images/php-cookie/child_2nd_view.png" alt="child_second_view"></p>
<p>没能打印出路径为”/child”的cookie，这点说明浏览器只发送“直系”路径关系的cookie值</p>
<p>总结：</p>
<ul>
<li>服务器端每次访问的cookie是每次请求头中发送给服务器端的</li>
<li>setcookie如果不设置路径，默认为当前页面的路径，父亲路径的页面是无法访问的 </li>
<li>客户端每次请求只发送当前路径下和“直系”关系的父路径的cookie（父路径的页面是不能访问子路径和兄弟路径的cookie的） </li>
</ul>
<h2 id="domain参数"><a href="#domain参数" class="headerlink" title="domain参数"></a>domain参数</h2><p>第五个参数$domain，它决定了cookie的作用域。现在有如下3个域名，一个顶级域名、一个二级域名和一个三级域名：<br>① lotus.com<br>②blog.lotus.com<br>③test.blog.lotus.com<br>首先在<strong>①lotus.com</strong>域名下设置cookie，做四次测试，分别设置domain参数为空、lotus.com、blog.lotus.com与test.blog.lotus.com<br>√表示该域名下能取到cookie，×表示不能取到cookie</p>
<table>
<thead>
<tr>
<th style="text-align:left">domain参数</th>
<th>lotus.com</th>
<th>blog.lotus.com</th>
<th>test.blog.lotus.com</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">setcookie(‘name’, ‘jason’, time()+100)</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘age’, ‘20’, time()+100,’/‘,’lotus.com’)</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘birthday’, ‘19901106’, time()+100,’/‘,’blog.lotus.com’)</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘sex’, ‘male’, time()+100,’/‘,’test.blog.lotus.com’)</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody>
</table>
<p>在<strong>②blog.lotus.com</strong>域名下设置cookie，测试条件同上，即domain参数为空，lotus.com，blog.lotus.com与test.blog.lotus.com</p>
<table>
<thead>
<tr>
<th style="text-align:left">domain参数</th>
<th>lotus.com</th>
<th>blog.lotus.com</th>
<th>test.blog.lotus.com</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">setcookie(‘name’, ‘jason’, time()+100)</td>
<td>×</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘age’, ‘20’, time()+100,’/‘,’lotus.com’)</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘birthday’, ‘19901106’, time()+100,’/‘,’blog.lotus.com’)</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘sex’, ‘male’, time()+100,’/‘,’test.blog.lotus.com’)</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody>
</table>
<p>在<strong>③test.blog.lotus.com</strong>域名下设置cookie，测试条件同上</p>
<table>
<thead>
<tr>
<th style="text-align:left">domain参数</th>
<th>lotus.com</th>
<th>blog.lotus.com</th>
<th>test.blog.lotus.com</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">setcookie(‘name’, ‘jason’, time()+100)</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘age’, ‘20’, time()+100,’/‘,’lotus.com’)</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘birthday’, ‘19901106’, time()+100,’/‘,’blog.lotus.com’)</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td style="text-align:left">setcookie(‘sex’, ‘male’, time()+100,’/‘,’test.blog.lotus.com’)</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
</tbody>
</table>
<p>domain的设置，有两点要注意：<br>1.在setcookie中省略domain参数，那么domain默认为当前域名。<br>2.domain参数可以设置父域名以及自身，但不能设置其它域名，包括子域名，否则cookie不起作用。<br>那么cookie的作用域：<br><strong>cookie的作用域是domain本身以及domain下的所有子域名。</strong></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> cookie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git stash用法]]></title>
      <url>http://jasonhzy.github.io/2016/06/15/git-stash/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在使用Git开发时，开发者在自己的分支上进行开发，由于需要紧急开发一个新的分支，而当前手里的完成的工作还不能合并。<br>此时，使用git stash命令可以将当前做过的修改从工作区保存到暂存区中。</p>
<a id="more"></a>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="添加改动到stash"><a href="#添加改动到stash" class="headerlink" title="添加改动到stash"></a>添加改动到stash</h3><pre><code>git stash [save [--patch] [-k|--[no-]keep-index] [-q|--quiet]
                    [-u|--include-untracked] [-a|--all]
                    [&lt;message&gt;]]
</code></pre><p>当前在jason分支上，我修改a.php文件，并增加了一个untracked files:<br><img src="/images/git-stash/git-status.png" alt="git status"></p>
<p>1.如果没有untracked files,即：</p>
<pre><code>git stash
</code></pre><p>2.如果需要在保存工作进度的时候使用指定的说明，必须使用如下格式:</p>
<pre><code>git stash save &quot;message&quot;
</code></pre><p>3.使用参数–patch会显示工作区和HEAD的差异，通过对差异文件的编辑决定在进度中<br>最终要保存的工作区的内容，通过编辑差异文件可以在进度中排除无关内容。</p>
<p>4.使用-k或者–keep-index参数，在保存进度后不会将暂存区重置（默认会将暂存区和工作区强制重置，即命令：–no-keep-index的效果）<br>5.使用-u|–include-untracked，同时储藏未跟踪文件。不影响被忽略的文件</p>
<pre><code>git stash save -u|--include-untracked
</code></pre><p><img src="/images/git-stash/git-stash.png" alt="git-stash-save">    </p>
<p>6.使用-a|–all来储藏所有的改动，包括未跟踪文件。不仅仅把新加入的代码文件放入暂存区，还会把用.gitignore忽略的文件放入暂存区</p>
<pre><code>git stash save -a|--all
</code></pre><h3 id="查看已经保存的储藏列表"><a href="#查看已经保存的储藏列表" class="headerlink" title="查看已经保存的储藏列表"></a>查看已经保存的储藏列表</h3><pre><code>$ git stash list
stash@{0}: On jason: save change msg
</code></pre><h3 id="删除储藏"><a href="#删除储藏" class="headerlink" title="删除储藏"></a>删除储藏</h3><p>如果没有指定是第几个储藏时，默认会删除最近的一次储藏</p>
<pre><code>git stash drop [-q|--quiet] [&lt;stash@{n}&gt;]
</code></pre><p>删除所有的储藏</p>
<pre><code>git stash clear
</code></pre><h3 id="查看-某次-储藏修改的内容"><a href="#查看-某次-储藏修改的内容" class="headerlink" title="查看[某次]储藏修改的内容"></a>查看[某次]储藏修改的内容</h3><p>若参数[<a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x73;&#x74;&#x61;&#x73;&#x68;&#x40;&#123;&#x6e;&#125;">&#x73;&#x74;&#x61;&#x73;&#x68;&#x40;&#123;&#x6e;&#125;</a>]不加，表示查看最后一次的储藏</p>
<pre><code>git stash show [&lt;stash@{n}&gt;]
</code></pre><h3 id="恢复保存的工作进度"><a href="#恢复保存的工作进度" class="headerlink" title="恢复保存的工作进度"></a>恢复保存的工作进度</h3><pre><code>git stash &lt;pop | apply&gt; [--index] [-q|--quiet] [&lt;stash@{n}&gt;]
</code></pre><p>如果不使用任何参数，恢复最近一次保存的工作进度</p>
<pre><code>git stash pop #会从储藏列表中删除刚刚恢复的暂存
git stash apply #不会从储藏列表中删除刚刚恢复的暂存
</code></pre><p>如果使用<a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#58;&#115;&#116;&#97;&#115;&#x68;&#64;&#123;&#110;&#x7d;">&#115;&#116;&#97;&#115;&#x68;&#64;&#123;&#110;&#x7d;</a>参数，则从该<a href="&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#115;&#116;&#97;&#115;&#104;&#x40;&#123;&#110;&#125;">&#115;&#116;&#97;&#115;&#104;&#x40;&#123;&#110;&#125;</a>中恢复保存的内容</p>
<pre><code>git stash pop &lt;stash@{n}&gt; #会从储藏列表中删除该`&lt;stash@{n}&gt;`
git stash apply &lt;stash@{n}&gt; #不会从储藏列表中删除该`&lt;stash@{n}&gt;`
</code></pre><p>–index除了恢复工作区的文件外，还会恢复暂存区的内容</p>
<pre><code>git stash pop --index
git stash apply --index
</code></pre><h3 id="使用储藏的内容创建新的分支"><a href="#使用储藏的内容创建新的分支" class="headerlink" title="使用储藏的内容创建新的分支"></a>使用储藏的内容创建新的分支</h3><p><branch-name>不能是已经存在的分支，并切换到创建的新分支，删除掉该储藏</branch-name></p>
<pre><code>git stash branch &lt;branch-name&gt; [&lt;stash@{n}&gt;]
</code></pre><h3 id="查看储藏列表的SHA-1值"><a href="#查看储藏列表的SHA-1值" class="headerlink" title="查看储藏列表的SHA-1值"></a>查看储藏列表的SHA-1值</h3><pre><code>$ git reflog show refs/stash
60a3985 refs/stash@{0}: On jason: save change msg    
</code></pre><p>参考资料</p>
<p>1.<a href="http://myoss.github.io/2016/Git%E6%93%8D%E4%BD%9C/" target="_blank" rel="external">Git操作</a></p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> Stash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python SMTP发送邮件]]></title>
      <url>http://jasonhzy.github.io/2016/06/15/python-email/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SMTP(Simple Mail Transfer Protocol,简单邮件传输协议)是发送邮件的协议，Python内置对SMTP的支持，可以发送纯文本邮件、HTML邮件以及带附件的邮件。python发送邮件主要使用到了smtplib和email两个模块，email负责构造邮件，smtplib负责发送邮件。</p>
<a id="more"></a>
<h2 id="相关模块"><a href="#相关模块" class="headerlink" title="相关模块"></a>相关模块</h2><h3 id="smtplib模块"><a href="#smtplib模块" class="headerlink" title="smtplib模块"></a>smtplib模块</h3><pre><code>smtplib.SMTP()
smtplib.SMTP([host[, port[, local_hostname[, timeout]]]])
</code></pre><p>SMTP类构造函数，表示与SMTP服务器之间的连接，通过这个连接可以向smtp服务器发送指令，执行相关操作（如：登陆、发送邮件）。所有参数都是可选的。参数意义如下：</p>
<pre><code>host：smtp服务器主机名
port：smtp服务的端口，默认是25；如果在创建SMTP对象的时候提供了这两个参数，在初始化的时候会自动调用connect方法去连接服务器。
</code></pre><p>smtplib模块还提供了SMTP_SSL类和LMTP类，对它们的操作与SMTP基本一致。<br>smtplib.SMTP提供的方法：</p>
<pre><code>SMTP.set_debuglevel(level)：#设置是否为调试模式。默认为False，即非调试模式，表示不输出任何调试信息。
SMTP.connect([host[, port]])：#连接到指定的smtp服务器。参数分别表示smpt主机和端口。
               注意: 也可以在host参数中指定端口号（如：smpt.yeah.net:25），这样就没必要给出port参数。
SMTP.docmd(cmd[, argstring])：向smtp服务器发送指令。可选参数argstring表示指令的参数。
SMTP.helo([hostname]) ：使用&quot;helo&quot;指令向服务器确认身份。相当于告诉smtp服务器“我是谁”。
SMTP.has_extn(name)：判断指定名称在服务器邮件列表中是否存在。出于安全考虑，smtp服务器往往屏蔽了该指令。
SMTP.verify(address) ：判断指定邮件地址是否在服务器中存在。出于安全考虑，smtp服务器往往屏蔽了该指令。
SMTP.login(user, password) ：登陆到smtp服务器。现在几乎所有的smtp服务器，都必须在验证用户信息合法之后才允许发送邮件。
SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options]) ：发送邮件。这里要注意一下第三个参数，
       msg是字符串，表示邮件。我们知道邮件一般由标题，发信人，收件人，邮件内容，附件等构成，发送邮件的时候，要注意msg的格式。
       这个格式就是smtp协议中定义的格式。
SMTP.quit() ：断开与smtp服务器的连接，相当于发送&quot;quit&quot;指令。
</code></pre><h3 id="email模块"><a href="#email模块" class="headerlink" title="email模块"></a>email模块</h3><p>emial模块用来处理邮件消息，包括MIME和其他基于RFC 2822 的消息文档。使用这些模块来定义邮件的内容，是非常简单的。其包括的类有<strong><a href="http://docs.python.org/3/library/email.mime.html" target="_blank" rel="external">点此查看更加详细的介绍</a></strong></p>
<pre><code>class email.mime.base.MIMEBase(_maintype, _subtype, **_params)：这是MIME的一个基类。一般不需要在使用时创建实例。
        其中_maintype是内容类型，如text或者image。_subtype是内容的minor type 类型，如plain或者gif。 **_params是一个字典，
        直接传递给Message.add_header()。
class email.mime.multipart.MIMEMultipart([_subtype[, boundary[, _subparts[, _params]]]]：MIMEBase的一个子类，
        多个MIME对象的集合，_subtype默认值为mixed。boundary是MIMEMultipart的边界，默认边界是可数的。
class email.mime.application.MIMEApplication(_data[, _subtype[, _encoder[, **_params]]])：MIMEMultipart的一个子类。
class email.mime.audio. MIMEAudio(_audiodata[, _subtype[, _encoder[, **_params]]])： MIME音频对象
class email.mime.image.MIMEImage(_imagedata[, _subtype[, _encoder[, **_params]]])：MIME二进制文件对象。
class email.mime.message.MIMEMessage(_msg[, _subtype])：具体的一个message实例.
class email.mime.text.MIMEText(_text[, _subtype[, _charset]])：MIME文本对象，其中_text是邮件内容，_subtype邮件类型，
        可以是text/plain（普通文本邮件），html/plain(html邮件),  _charset编码，可以是gb2312等等。
</code></pre><h2 id="Python-SMTP-发送带附件电子邮件示例"><a href="#Python-SMTP-发送带附件电子邮件示例" class="headerlink" title="Python SMTP 发送带附件电子邮件示例"></a>Python SMTP 发送带附件电子邮件示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="comment">#--------------------------------------------------------------------</span></div><div class="line"><span class="comment">#   程序：Python SMTP 发送带附件电子邮件</span></div><div class="line"><span class="comment">#   作者：Jason Hu</span></div><div class="line"><span class="comment">#   日期：2016-06-01</span></div><div class="line"><span class="comment">#   语言：Python</span></div><div class="line"><span class="comment">#   说明：Python内置对SMTP的支持，可以发送纯文本邮件、HTML邮件以及带附件的邮件</span></div><div class="line"><span class="comment">#---------------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</div><div class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendEmail</span><span class="params">(authInfo, fromAdd, toAdd, subject, plainText)</span>:</span></div><div class="line"></div><div class="line">        strFrom = fromAdd</div><div class="line">        strTo = <span class="string">'; '</span>.join(toAdd)</div><div class="line"></div><div class="line">        server = authInfo.get(<span class="string">'server'</span>)</div><div class="line">        smtpPort = <span class="number">25</span></div><div class="line">        sslPort = <span class="number">465</span></div><div class="line">        user = authInfo.get(<span class="string">'user'</span>)</div><div class="line">        passwd = authInfo.get(<span class="string">'password'</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (server <span class="keyword">and</span> user <span class="keyword">and</span> passwd) :</div><div class="line">                <span class="keyword">print</span> <span class="string">'incomplete login info, exit now'</span></div><div class="line">                <span class="keyword">return</span></div><div class="line"></div><div class="line">        <span class="comment"># 设定root信息</span></div><div class="line">        msgRoot = MIMEMultipart(<span class="string">'related'</span>)</div><div class="line">        msgRoot[<span class="string">'Subject'</span>] = subject</div><div class="line">        msgRoot[<span class="string">'From'</span>] = <span class="string">'%s&lt;%s&gt;'</span> % (Header(<span class="string">'测试'</span>, <span class="string">'utf-8'</span>), strFrom)</div><div class="line">        msgRoot[<span class="string">'To'</span>] = strTo</div><div class="line"></div><div class="line">        <span class="comment"># 邮件正文内容</span></div><div class="line">        msgText = MIMEText(plainText, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</div><div class="line">        msgRoot.attach(msgText)</div><div class="line"></div><div class="line">        msgAlternative = MIMEMultipart(<span class="string">'alternative'</span>)</div><div class="line">        msgRoot.attach(msgAlternative)</div><div class="line"></div><div class="line">        <span class="comment"># mail_msg = """</span></div><div class="line">        <span class="comment">#         &lt;p&gt;Python 邮件发送测试...&lt;/p&gt;</span></div><div class="line">        <span class="comment">#         &lt;p&gt;&lt;a href="http://www.runoob.com"&gt;菜鸟教程链接&lt;/a&gt;&lt;/p&gt;</span></div><div class="line">        <span class="comment">#         &lt;p&gt;图片演示：&lt;/p&gt;</span></div><div class="line">        <span class="comment">#         &lt;p&gt;&lt;img src="cid:pic_attach"&gt;&lt;/p&gt;</span></div><div class="line">        <span class="comment"># """</span></div><div class="line">        <span class="comment"># msgAlternative.attach(MIMEText(mail_msg, 'html', 'utf-8'))</span></div><div class="line"></div><div class="line">        <span class="comment">#设定内置图片信息</span></div><div class="line">        fp = open(<span class="string">'/Users/JackyBian/Desktop/aa.png'</span>, <span class="string">'rb'</span>)</div><div class="line">        msgImage = MIMEImage(fp.read())</div><div class="line">        msgImage[<span class="string">"Content-Type"</span>] = <span class="string">'application/octet-stream'</span></div><div class="line">        <span class="comment">#filename可自定义，供邮件中显示</span></div><div class="line">        msgImage[<span class="string">"Content-Disposition"</span>] = <span class="string">'attachment; filename="aa.png"'</span></div><div class="line">        fp.close()</div><div class="line">        msgImage.add_header(<span class="string">'Content-ID'</span>, <span class="string">'&lt;pic_attach&gt;'</span>)</div><div class="line">        msgAlternative.attach(msgImage)</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">                <span class="comment">#发送邮件</span></div><div class="line">                smtp = smtplib.SMTP()</div><div class="line">                smtp.connect(server, smtpPort)</div><div class="line">                <span class="comment">#ssl加密方式，通信过程加密，邮件数据安全</span></div><div class="line">                <span class="comment"># smtp = smtplib.SMTP_SSL()</span></div><div class="line">                <span class="comment"># smtp.connect(server, sslPort)</span></div><div class="line"></div><div class="line">                <span class="comment">#设定调试级别，依情况而定</span></div><div class="line">                <span class="comment"># smtp.set_debuglevel(1)</span></div><div class="line">                smtp.login(user, passwd)</div><div class="line">                smtp.sendmail(strFrom, toAdd, msgRoot.as_string())</div><div class="line">                smtp.quit()</div><div class="line">                <span class="keyword">print</span> <span class="string">"邮件发送成功!"</span></div><div class="line">        <span class="keyword">except</span> Exception, e:</div><div class="line">                <span class="keyword">print</span> <span class="string">"失败："</span> + str(e)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span> :</div><div class="line">        authInfo = &#123;&#125;</div><div class="line">        authInfo[<span class="string">'server'</span>] = <span class="string">'smtp.163.com'</span></div><div class="line">        authInfo[<span class="string">'user'</span>] = <span class="string">'h07061108@163.com'</span></div><div class="line">        authInfo[<span class="string">'password'</span>] = <span class="string">'xxxxxx'</span></div><div class="line">        fromAdd = <span class="string">'h07061108@163.com'</span></div><div class="line">        toAdd = [<span class="string">'978229997@qq.com'</span>, <span class="string">'lotushzy@163.com'</span>]</div><div class="line">        subject = <span class="string">'Email Subject'</span></div><div class="line">        plainText = <span class="string">'Email Content'</span></div><div class="line">        sendEmail(authInfo, fromAdd, toAdd, subject, plainText)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mail </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 爬虫(BeautifulSoup)]]></title>
      <url>http://jasonhzy.github.io/2016/06/02/python-reptile/</url>
      <content type="html"><![CDATA[<h2 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h2><blockquote>
<p>网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。”</p>
</blockquote>
<a id="more"></a>
<h2 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h2><p>采用easy_install或pip可以直接安装</p>
<p>1.安装MySQL-python</p>
<pre><code>pip/easy_install  install MySQL-python
</code></pre><p>2.安装BeautifulSoup<br>Beautiful Soup3 的文档,Beautiful Soup 3目前已经停止开发,我们推荐在现在的项目中使用Beautiful Soup 4,移植到BS4</p>
<pre><code>apt-get install Python-bs4  #Debain或ubuntu
pip/easy_install  install beautifulsoup4
</code></pre><h2 id="安装解析器"><a href="#安装解析器" class="headerlink" title="安装解析器"></a>安装解析器</h2><p>Beautiful Soup支持Python标准库中的HTML解析器,还支持一些第三方的解析器,其中一个是<br>lxml .根据操作系统不同,可以选择下列方法来安装lxml:</p>
<pre><code>apt-get install Python-lxml
pip/easy_install install lxml
</code></pre><p>另一个可供选择的解析器是纯Python实现的 html5lib, html5lib的解析方式与浏览器相同,可以选择下列方法来安装html5lib:</p>
<pre><code>apt-get install Python-html5lib
pip/easy_install install html5lib
</code></pre><p>下表列出了主要的解析器,以及它们的优缺点:</p>
<table>
<thead>
<tr>
<th>解析器</th>
<th>使用方法</th>
<th>优势</th>
<th>劣势</th>
</tr>
</thead>
<tbody>
<tr>
<td>Python标准库</td>
<td>BeautifulSoup(markup, “html.parser”)</td>
<td>Python的内置标准库、执行速度适中、文档容错能力强</td>
<td>Python 2.7.3 or 3.2.2)前 的版本中文档容错能力差</td>
</tr>
<tr>
<td>lxml HTML 解析器</td>
<td>BeautifulSoup(markup, “lxml”)</td>
<td>速度快、文档容错能力强</td>
<td>需要安装C语言库</td>
</tr>
<tr>
<td>lxml XML 解析器</td>
<td>BeautifulSoup(markup, [“lxml”, “xml”]) BeautifulSoup(markup, “xml”)</td>
<td>速度快、唯一支持XML的解析器</td>
<td>需要安装C语言库</td>
</tr>
<tr>
<td>html5lib</td>
<td>BeautifulSoup(markup, “html5lib”)</td>
<td>最好的容错性、以浏览器的方式解析文档、生成HTML5格式的文档</td>
<td>速度慢、不依赖外部扩展</td>
</tr>
</tbody>
</table>
<p>推荐使用lxml作为解析器,因为效率更高.在Python2.7.3之前的版本和Python3中3.2.2之前的版本,必须安装lxml或html5lib,因为那些Python版本的标准库中内置的HTML解析方法不够稳定.</p>
<h2 id="采用BeautifulSoup爬取示例"><a href="#采用BeautifulSoup爬取示例" class="headerlink" title="采用BeautifulSoup爬取示例"></a>采用BeautifulSoup爬取示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="comment">#---------------------------------------------------</span></div><div class="line"><span class="comment">#   程序：糗事百科笑料爬虫</span></div><div class="line"><span class="comment">#   作者：Jason Hu</span></div><div class="line"><span class="comment">#   日期：2016-06-01</span></div><div class="line"><span class="comment">#   语言：Python</span></div><div class="line"><span class="comment">#   说明：自定义爬取页数，并将爬取的内容保存在Mysql数据库中</span></div><div class="line"><span class="comment">#---------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> MySQLdb <span class="keyword">as</span> db</div><div class="line"><span class="keyword">from</span> warnings <span class="keyword">import</span> filterwarnings</div><div class="line"></div><div class="line"><span class="comment">#filterwarnings('ignore', category = db.Warning)</span></div><div class="line">filterwarnings(<span class="string">"ignore"</span>, <span class="string">"Table '.*' already exists"</span>)</div><div class="line">filterwarnings(<span class="string">"ignore"</span>, <span class="string">"Can't create database '.*'; database exists"</span>)</div><div class="line"></div><div class="line">page = <span class="number">1</span>  <span class="comment">#设置页数</span></div><div class="line">url = <span class="string">'http://www.qiushibaike.com/hot/page/'</span> + str(page) <span class="comment">#url地址</span></div><div class="line"><span class="comment">#有些网站反爬虫, 伪装为浏览器抓取</span></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    request = urllib2.Request(url, headers = headers)</div><div class="line">    response = urllib2.urlopen(request)</div><div class="line">    content = response.read()</div><div class="line">    soup = BeautifulSoup(content, <span class="string">'html.parser'</span>, from_encoding=<span class="string">'UTF-8'</span>)</div><div class="line">    div_article = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span> : <span class="string">'col1'</span>&#125;)</div><div class="line">    article_list = div_article.findAll(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'article block untagged mb15'</span>&#125;)</div><div class="line"></div><div class="line">    <span class="comment">#connection db to insert data</span></div><div class="line">    conn = db.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, passwd=<span class="string">''</span>, unix_socket=<span class="string">'/opt/local/var/run/mysql55/mysqld.sock'</span>)</div><div class="line">    cur = conn.cursor()</div><div class="line">    cur.execute(<span class="string">'create database if not exists python default charset utf8 collate utf8_general_ci;'</span>)</div><div class="line">    conn.select_db(<span class="string">'python'</span>)</div><div class="line">    cur.execute(<span class="string">'truncate table joke;'</span>)</div><div class="line">    sql = <span class="string">'''</span></div><div class="line">            create table if not exists joke(</div><div class="line">                `id` int not null auto_increment,</div><div class="line">                `author` varchar(30),</div><div class="line">                `photo` text,</div><div class="line">                `love_nums` int default 0,</div><div class="line">                `comment_nums` int default 0,</div><div class="line">                `content` text,</div><div class="line">                `create_time` datetime,</div><div class="line">                `update_time` datetime,</div><div class="line">                primary key(`id`)</div><div class="line">            )engine=Innodb default charset=utf8;</div><div class="line">        '''</div><div class="line">    cur.execute(sql)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> article_list:</div><div class="line">        author_tag = article.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span> : <span class="string">'author clearfix'</span>&#125;)</div><div class="line">        author_img = author_tag.img.attrs[<span class="string">'src'</span>]</div><div class="line">        author = author_tag.h2.text</div><div class="line"></div><div class="line">        content_tag = article.select(<span class="string">'div.content'</span>)</div><div class="line">        content = content_tag[<span class="number">0</span>].get_text().strip()</div><div class="line"></div><div class="line">        comment_tag = article.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'stats'</span>&#125;)</div><div class="line">        love_nums = comment_tag.find(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'stats-vote'</span>&#125;).find(<span class="string">'i'</span>).text</div><div class="line">        comment_nums = comment_tag.find(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'stats-comments'</span>&#125;).find(<span class="string">'i'</span>).text</div><div class="line"></div><div class="line">        create_time = datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</div><div class="line">        update_time = datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</div><div class="line"></div><div class="line">        joke = [author, author_img, love_nums, comment_nums, content, create_time, update_time]</div><div class="line">        cur.execute(<span class="string">'insert into joke(`author`, `photo`, `love_nums`, `comment_nums`, `content`, \</span></div><div class="line">                    `create_time`, `update_time`) values(%s, %s, %s, %s, %s, %s, %s)', joke);</div><div class="line">    conn.commit()</div><div class="line">    cur.close()</div><div class="line">    conn.close()</div><div class="line"><span class="keyword">except</span> urllib2.URLError, e:</div><div class="line">    <span class="keyword">print</span> e</div><div class="line"><span class="keyword">except</span> db.Error, e:</div><div class="line">    conn.rollback()</div><div class="line">    <span class="keyword">print</span> e</div></pre></td></tr></table></figure>
<p>参考资料</p>
<ol>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="external">Beautiful Soup 4.2.0文档</a></li>
<li><a href="https://wizardforcel.gitbooks.io/bs4-doc/content/3.html" target="_blank" rel="external">Beautiful Soup 4.2.0文档</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iframe实现无刷新上传文件]]></title>
      <url>http://jasonhzy.github.io/2016/05/25/iframe-upload/</url>
      <content type="html"><![CDATA[<h2 id="无刷新上传文件"><a href="#无刷新上传文件" class="headerlink" title="无刷新上传文件"></a>无刷新上传文件</h2><p>由于无法实现Ajax方式的文件上传，但又想实现类似的文件上传成功之后有提示的效果，或者form的submit提交保存之后有提示信息的，可以借助一些手段实现类似的无刷新并有提示信息的效果。这里采用的是iframe的方式，原理就是输出一段js代码到 iframe中，然后在iframe中来控制它的父页面</p>
<p><img src="/images/iframe-upload.png" alt="iframe"></p>
<a id="more"></a>
<h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>无刷新上传文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-class">.file</span> &#123;</div><div class="line">                <span class="attribute">position</span>: relative;</div><div class="line">                <span class="attribute">display</span>: inline-block;</div><div class="line">                <span class="attribute">background</span>: <span class="number">#D0EEFF</span>;</div><div class="line">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#99D3F5</span>;</div><div class="line">                <span class="attribute">border-radius</span>: <span class="number">4px</span>;</div><div class="line">                <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">12px</span>;</div><div class="line">                <span class="attribute">overflow</span>: hidden;</div><div class="line">                <span class="attribute">color</span>: <span class="number">#1E88C7</span>;</div><div class="line">                <span class="attribute">text-decoration</span>: none;</div><div class="line">                <span class="attribute">text-indent</span>: <span class="number">0</span>;</div><div class="line">                <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-class">.file</span> <span class="selector-tag">input</span> &#123;</div><div class="line">                <span class="attribute">position</span>: absolute;</div><div class="line">                <span class="attribute">font-size</span>: <span class="number">100px</span>;</div><div class="line">                <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">                <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">                <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-class">.file</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">                <span class="attribute">background</span>: <span class="number">#AADFFD</span>;</div><div class="line">                <span class="attribute">border-color</span>: <span class="number">#78C3F3</span>;</div><div class="line">                <span class="attribute">color</span>: <span class="number">#004974</span>;</div><div class="line">                <span class="attribute">text-decoration</span>: none;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"save.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span></span></div><div class="line">    		<span class="attr">target</span>=<span class="string">"iframe_upload"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"callback"</span> <span class="attr">value</span>=<span class="string">"jsoncallback"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"file"</span>&gt;</span>选择文件</div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">value</span>=<span class="string">"上传"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">"iframe_upload"</span> <span class="attr">style</span>=<span class="string">"visibility:hidden;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.jsoncallback=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> code = data.result_code;</div><div class="line">            <span class="keyword">if</span>(code==<span class="number">1</span>)&#123;</div><div class="line">                <span class="built_in">window</span>.location.href = data.url ? data.url : <span class="built_in">window</span>.location.href;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">               alert(data.result_msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意</strong>：</p>
<ul>
<li>form的target设为iframe的name属性值，即iframe_upload</li>
<li>添加hidden的input的标签，可以自定义回调函数名称</li>
<li>添加隐藏的iframe，name属性值与form的target必须保持一致</li>
<li>添加js代码实现信息提示</li>
</ul>
<h2 id="后台代码（PHP为例）"><a href="#后台代码（PHP为例）" class="headerlink" title="后台代码（PHP为例）"></a>后台代码（PHP为例）</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$jsoncallback = $_POST[<span class="string">'callback'</span>];</div><div class="line"><span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>) &#123;</div><div class="line">	response_post(<span class="string">'0'</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>], $jsoncallback);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="keyword">if</span>(move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], <span class="string">'/tmp/'</span>.$_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]))&#123;</div><div class="line">		response_post(<span class="string">'0'</span>, <span class="string">'文件保存成功!'</span>, $jsoncallback);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		response_post(<span class="string">'0'</span>, <span class="string">'文件保存失败!'</span>, $jsoncallback);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">response_post</span><span class="params">($msgcode, $message, $jsoncallback, $url=<span class="string">""</span>)</span></span>&#123;</div><div class="line">	$output=<span class="string">""</span>;</div><div class="line">	$output .= <span class="string">'&lt;script&gt;'</span>;</div><div class="line">	$output .= ( <span class="string">'top.'</span> . $jsoncallback . <span class="string">'('</span></div><div class="line">		.json_encode(<span class="keyword">array</span>(<span class="string">'result_code'</span> =&gt; $msgcode, <span class="string">'result_msg'</span> =&gt; $message, <span class="string">'server_time'</span>=&gt;time(), <span class="string">'url'</span>=&gt;$url))</div><div class="line">		.<span class="string">');'</span>);</div><div class="line">	$output .= <span class="string">'&lt;/script&gt;'</span>;</div><div class="line">	<span class="keyword">echo</span> $output;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iframe,PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql存储引擎]]></title>
      <url>http://jasonhzy.github.io/2016/05/18/mysql-engine/</url>
      <content type="html"><![CDATA[<h2 id="数据库存储引擎定义"><a href="#数据库存储引擎定义" class="headerlink" title="数据库存储引擎定义"></a>数据库存储引擎定义</h2><p>MySQL中的数据用各种不同的技术存储在文件（或者内存）中，这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并最终提供不同的功能和能力，这些不同的技术以及配套的相关功能在MySQL中称为存储引擎（也称为表类型）。</p>
<a id="more"></a>
<h2 id="MySQL数据库主要存储引擎"><a href="#MySQL数据库主要存储引擎" class="headerlink" title="MySQL数据库主要存储引擎"></a>MySQL数据库主要存储引擎</h2><p><img src="/images/mysql/mysql-engine.png" alt="mysql engine"></p>
<table>
<thead>
<tr>
<th>存储引擎</th>
<th>功能&amp;特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>MyISAM</td>
<td>拥有较高的插入，查询速度，但不支持事务，表级锁</td>
</tr>
<tr>
<td>InnoDB</td>
<td>5.5版本后Mysql的默认数据库存储引擎，事务型数据库的首选引擎，支持ACID事务，支持行级锁定</td>
</tr>
<tr>
<td>Memory</td>
<td>所有数据置于内存的存储引擎，拥有极高的插入，更新和查询效率。但是会占用和数据量成正比的内存空间。并且其内容会在Mysql重新启动时丢失，处理非事务表</td>
</tr>
<tr>
<td>Archive</td>
<td>非常适合存储大量的独立的，作为历史记录的数据。因为它们不经常被读取。Archive拥有高效的插入速度，但其对查询的支持相对较差</td>
</tr>
<tr>
<td>CSV</td>
<td>逻辑上由逗号分割数据的存储引擎。它会在数据库子目录里为每个数据表创建一个.CSV文件。这是一种普通文本文件，每个数据行占用一个文本行。CSV存储引擎不支持索引</td>
</tr>
<tr>
<td>BlackHole</td>
<td>黑洞引擎，写入的任何数据都会消失，一般用于记录binlog做复制的中继</td>
</tr>
<tr>
<td>MRG_MYISAM</td>
<td>将一定数量的MyISAM表联合而成一个整体，在超大规模数据存储时很有用，实现大数据的水平分表（如创建一个MRG_MyISAM引擎作为主表，可以实现读操作，更新，删除操作，在多个MyISAM引擎的子表中插入存储数据）</td>
</tr>
<tr>
<td>PERFORMANCE_SCHEMA</td>
<td>主要用于收集数据库服务器性能参数。MySQL用户是不能创建存储引擎为PERFORMANCE_SCHEMA的表</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL数据库备份和还原]]></title>
      <url>http://jasonhzy.github.io/2016/05/16/mysql-backup/</url>
      <content type="html"><![CDATA[<p><img src="/images/mysql-back/MariaDB-mysql.jpg" alt="mysql"></p>
<h2 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h2><p>MySQL 为关系型数据库(Relational Database Management System),这种所谓的”关系型”可以理解为”表格”的概念, 一个关系型数据库由一个或数个表格组成,<br>如图所示的一个表格:</p>
<a id="more"></a>
<p><img src="/images/mysql-back/mysql-table.png" alt="mysql table"></p>
<p><strong>表头(header)</strong>: 每一列的名称;<br><strong>列(row)</strong>: 具有相同数据类型的数据的集合;<br><strong>行(col)</strong>: 每一行用来描述某个人/物的具体信息;<br><strong>值(value)</strong>: 行的具体信息, 每个值必须与该列的数据类型相同;<br><strong>键(key)</strong>: 表中用来识别某个特定的人\物的方法,键的值在当前列中具有唯一性。</p>
<h2 id="备份与还原常用命令"><a href="#备份与还原常用命令" class="headerlink" title="备份与还原常用命令"></a>备份与还原常用命令</h2><p>备份MySQL数据库的命令</p>
<pre><code>mysqldump -hhostname -uusername -ppassword databasename &gt; backupfile.sql
</code></pre><p>备份MySQL数据库为带删除表的格式<br>备份MySQL数据库为带删除表的格式，能够让该备份覆盖已有数据库而不需要手动删除原有数据库。</p>
<pre><code>mysqldump -–add-drop-table -uusername -ppassword databasename &gt; backupfile.sql
</code></pre><p>直接将MySQL数据库压缩备份</p>
<pre><code>mysqldump -hhostname -uusername -ppassword databasename | gzip &gt; backupfile.sql.gz
</code></pre><p>备份MySQL数据库某个(些)表</p>
<pre><code>mysqldump -hhostname -uusername -ppassword databasename specific_table1 
specific_table2 &gt; backupfile.sql
</code></pre><p>同时备份多个MySQL数据库</p>
<pre><code>mysqldump -hhostname -uusername -ppassword –databases databasename1 databasename2 
databasename3 &gt; multibackupfile.sql
</code></pre><p>仅仅备份数据库结构</p>
<pre><code>mysqldump –no-data –databases databasename1 databasename2               
databasename3 &gt; structurebackupfile.sql
</code></pre><p>备份服务器上所有数据库</p>
<pre><code>mysqldump –all-databases &gt; allbackupfile.sql
</code></pre><p>还原MySQL数据库的命令</p>
<pre><code>mysql -hhostname -uusername -ppassword databasename &lt; backupfile.sql
</code></pre><p>还原压缩的MySQL数据库</p>
<pre><code>gunzip &lt; backupfile.sql.gz | mysql -uusername -ppassword databasename
</code></pre><p>将数据库转移到新服务器</p>
<pre><code>mysqldump -uusername -ppassword databasename | mysql –host=*.*.*.* -C databasename
</code></pre>]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux mail命令发送邮件]]></title>
      <url>http://jasonhzy.github.io/2016/05/14/linux-mail/</url>
      <content type="html"><![CDATA[<p><img src="/images/mail/email.png" alt="email info"></p>
<h2 id="在-Debian-Ubuntu-系统："><a href="#在-Debian-Ubuntu-系统：" class="headerlink" title="在 Debian / Ubuntu 系统："></a>在 Debian / Ubuntu 系统：</h2><pre><code>apt-get install mailutils
apt-get install sharutils  #支持附件发送，使用uuencode
apt-get install sendmail
apt-get install sendmail-cf
</code></pre><a id="more"></a>
<h2 id="sendmail"><a href="#sendmail" class="headerlink" title="sendmail"></a>sendmail</h2><p>启用sendmail</p>
<pre><code>service start sendmail #systemctl start sendmail.service
</code></pre><p>sendmail配置</p>
<p>sendmail默认只会为本机用户发送邮件，只有把它扩展到整个Internet，才会成为真正的邮件服务器,sendmail的配置文件：/etc/mail/sendmail.mc</p>
<pre><code>DAEMON_OPTIONS(`Family=inet,  Name=MTA-v4, Port=smtp,Addr=127.0.0.1&apos;)dnl
</code></pre><p>将Addr=127.0.0.1修改成0.0.0.0</p>
<p>修改之后产生新的配置文件：</p>
<pre><code>mv sendmail.cf sendmail.cf~   #做一个备份
m4 sendmail.mc &gt; sendmail.cf  #&gt;的左右有空格，提示错误没有安装sendmail-cf
</code></pre><h2 id="安装mailutils"><a href="#安装mailutils" class="headerlink" title="安装mailutils"></a>安装mailutils</h2><p>安装过程中会让你选择一种配置类型。一般情况下，我们需要选择第二种类型：<strong>Internet Site</strong></p>
<p><img src="/images/mail/mailutils.png" alt="mailutils"></p>
<pre><code>No configuration 表示不要做任何配置；
Internet Site 表示直接使用本地SMTP服务器发送和接收邮件；
Internet with smarthost 表示使用本地SMTP服务器接收邮件，但发送邮件时不直接使用本地SMTP服务器，
    而是使用第三方smart host来转发邮件；
Satellite system 表示邮件的发送和接收都是由第三方smarthost来完成。
Local only 表示邮件只能在本机用户之间发送和接收。
</code></pre><h2 id="发送有主题的邮件"><a href="#发送有主题的邮件" class="headerlink" title="发送有主题的邮件"></a>发送有主题的邮件</h2><pre><code>echo &quot;Email text&quot; | mail -s &quot;Test Subject&quot; user@example.com #-s的用处是指定邮件的主题
</code></pre><h2 id="从文件中读取邮件内容并发送"><a href="#从文件中读取邮件内容并发送" class="headerlink" title="从文件中读取邮件内容并发送"></a>从文件中读取邮件内容并发送</h2><pre><code>mail -s &quot;message send from file&quot; user@example.com &lt; /path/to/file
</code></pre><h2 id="将从管道获取到的echo命令输出作为邮件内容发送"><a href="#将从管道获取到的echo命令输出作为邮件内容发送" class="headerlink" title="将从管道获取到的echo命令输出作为邮件内容发送"></a>将从管道获取到的echo命令输出作为邮件内容发送</h2><pre><code>echo &quot;This is message body&quot; | mail -s &quot;This is Subject&quot;
user@example.com
</code></pre><h2 id="发送带附件的邮件"><a href="#发送带附件的邮件" class="headerlink" title="发送带附件的邮件"></a>发送带附件的邮件</h2><pre><code>echo &quot;Body with attachment&quot;| mail -a foo.tar.gz -s &quot;attached file&quot; user@example.com
</code></pre><h2 id="uuencode"><a href="#uuencode" class="headerlink" title="uuencode"></a>uuencode</h2><p>邮件传输系统最初是被设计来传送7位编码（类似ASCII）的内容的。这就意味这它是用来发送文本内容，而不能发会使用8位的二进制内容（如程序文件或者图片）。uuencode（“UNIX to UNIX encoding”，UNIX之间使用的编码方式）程序用来解决这个限制。使用uuencode，发送端将二进制格式的转换成文本格式来传输，接收端再转换回去。<br>我们可以简单地使用uuencode和mailx或者mutt配合，来发送二进制内容，类似这样：</p>
<pre><code>uuencode example.jpeg example.jpeg | mail user@example.com
</code></pre><p><strong>注意：</strong><br>1、/etc/hosts中修改为：</p>
<pre><code>127.0.0.1    localhost localhost.localdomain jason #jason计算机主机名
</code></pre><p>参考资料</p>
<p>1、<a href="https://linux.cn/article-5502-1.html" target="_blank" rel="external">发送邮件的命令行工具</a><br>2、<a href="https://www.linuxdashen.com/ubuntu搭建简易postfix邮箱服务器" target="_blank" rel="external">ubuntu搭建简易postfix邮箱服务器</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mail </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git日志格式、颜色设置]]></title>
      <url>http://jasonhzy.github.io/2016/05/05/git-log/</url>
      <content type="html"><![CDATA[<h2 id="Git多颜色输出"><a href="#Git多颜色输出" class="headerlink" title="Git多颜色输出"></a>Git多颜色输出</h2><p>git默认的输出是单一颜色的，不仅不够美观，也不容易阅读。实际上，git本身就支持用多种颜色来显示其输出的信息，只需在命令行中运行以下命令来修改git的设置，即可开启多颜色输出：</p>
<pre><code>git config --global color.status auto
git config --global color.diff auto
git config --global color.branch auto
git config --global color.interactive auto
</code></pre><a id="more"></a>
<h2 id="自定义log格式"><a href="#自定义log格式" class="headerlink" title="自定义log格式"></a>自定义log格式</h2><p>完成上述步骤后，git log命令的输出虽然有了点颜色，但还是显得枯燥(见下图)。</p>
<p><img src="/images/git-log/git-log.png" alt="git log"></p>
<p>git提供了自定义log格式的功能，尝试输入以下命令：</p>
<pre><code>git log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit
</code></pre><p>把上面命令设置一个别名lg:</p>
<pre><code>git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;
</code></pre><p>设置之后git lg即可查看log，而且显示的更加友好：</p>
<p><img src="/images/git-log/git-log-change.png" alt="git log
change"></p>
<p>如果要查看更详细的log，即：git lg/log -p    </p>
<h2 id="Git-log-输出格式化"><a href="#Git-log-输出格式化" class="headerlink" title="Git log 输出格式化:"></a>Git log 输出格式化:</h2><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%H</td>
<td style="text-align:left">commit hash</td>
</tr>
<tr>
<td>%h</td>
<td style="text-align:left">commit short hash</td>
</tr>
<tr>
<td>%T</td>
<td style="text-align:left">tree hash</td>
</tr>
<tr>
<td>%t</td>
<td style="text-align:left">tree short hash</td>
</tr>
<tr>
<td>%P</td>
<td style="text-align:left">parent hash</td>
</tr>
<tr>
<td>%p</td>
<td style="text-align:left">parent short hash</td>
</tr>
<tr>
<td>%an</td>
<td style="text-align:left">作者名字</td>
</tr>
<tr>
<td>%aN</td>
<td style="text-align:left">.mailmap 中对应的作者名字</td>
</tr>
<tr>
<td>%ae</td>
<td style="text-align:left">作者邮箱</td>
</tr>
<tr>
<td>%aE</td>
<td style="text-align:left">.mailmap 中对应的作者邮箱</td>
</tr>
<tr>
<td>%ad</td>
<td style="text-align:left">–date=制定的日期格式</td>
</tr>
<tr>
<td>%aD</td>
<td style="text-align:left">RFC2822 日期格式</td>
</tr>
<tr>
<td>%ar</td>
<td style="text-align:left">日期格式，例如：1 day ago</td>
</tr>
<tr>
<td>%at</td>
<td style="text-align:left">UNIX timestamp 日期格式</td>
</tr>
<tr>
<td>%ai</td>
<td style="text-align:left">ISO 8601 日期格式</td>
</tr>
<tr>
<td>%cn</td>
<td style="text-align:left">提交者名字</td>
</tr>
<tr>
<td>%cN</td>
<td style="text-align:left">.mailmap 对应的提交的名字</td>
</tr>
<tr>
<td>%ce</td>
<td style="text-align:left">提交者邮箱</td>
</tr>
<tr>
<td>%cE</td>
<td style="text-align:left">.mailmap 对应的提交者的邮箱</td>
</tr>
<tr>
<td>%cd</td>
<td style="text-align:left">–data=制定的提交日期的格式</td>
</tr>
<tr>
<td>%cD</td>
<td style="text-align:left">RFC2822 提交日期的格式</td>
</tr>
<tr>
<td>%cr</td>
<td style="text-align:left">提交日期的格式，例如：1day ago</td>
</tr>
<tr>
<td>%ct</td>
<td style="text-align:left">UNIX timestamp 提交日期的格式</td>
</tr>
<tr>
<td>%ci</td>
<td style="text-align:left">ISO 8601 提交日期的格式</td>
</tr>
<tr>
<td>%d</td>
<td style="text-align:left">ref 名称</td>
</tr>
<tr>
<td>%e</td>
<td style="text-align:left">encoding</td>
</tr>
<tr>
<td>%s</td>
<td style="text-align:left">commit 信息标题</td>
</tr>
<tr>
<td>%f</td>
<td style="text-align:left">过滤commit信息的标题使之可以作为文件名</td>
</tr>
<tr>
<td>%b</td>
<td style="text-align:left">commit 信息内容</td>
</tr>
<tr>
<td>%N</td>
<td style="text-align:left">commit notes</td>
</tr>
<tr>
<td>%gD</td>
<td style="text-align:left">reflog selector, e.g., refs/stash@{1}</td>
</tr>
<tr>
<td>%gd</td>
<td style="text-align:left">shortened reflog selector, e.g., stash@{1}</td>
</tr>
<tr>
<td>%gs</td>
<td style="text-align:left">reflog subject</td>
</tr>
<tr>
<td>%Cred</td>
<td style="text-align:left">切换至红色</td>
</tr>
<tr>
<td>%Cgreen</td>
<td style="text-align:left">切换至绿色</td>
</tr>
<tr>
<td>%Cblue</td>
<td style="text-align:left">切换至蓝色</td>
</tr>
<tr>
<td>%Creset</td>
<td style="text-align:left">重设颜色</td>
</tr>
<tr>
<td>%C(color)</td>
<td style="text-align:left">制定颜色，as described in color.branch.* config option</td>
</tr>
<tr>
<td>%m</td>
<td style="text-align:left">left right or boundary mark</td>
</tr>
<tr>
<td>%n</td>
<td style="text-align:left">换行</td>
</tr>
<tr>
<td>%%</td>
<td style="text-align:left">a raw %</td>
</tr>
<tr>
<td>%x00</td>
<td style="text-align:left">print a byte from a hex code</td>
</tr>
<tr>
<td>%w([[,[,]]])</td>
<td style="text-align:left">switch line wrapping, like the -w option of git-shortlog(1).</td>
</tr>
</tbody>
</table>
<h2 id="Git-log-命令支持的选项"><a href="#Git-log-命令支持的选项" class="headerlink" title="Git log 命令支持的选项"></a>Git log 命令支持的选项</h2><p>-p 按补丁格式显示每个更新之间的差异。<br>–stat 显示每次更新的文件修改统计信息。<br>–shortstat 只显示 –stat 中最后的行数修改添加移除统计。<br>–name-only 仅在提交信息后显示已修改的文件清单。<br>–name-status 显示新增、修改、删除的文件清单。<br>–abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。<br>–relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。<br>–graph 显示 ASCII 图形表示的分支合并历史。<br>–pretty 使用其他格式显示历史提交信息。可用的选项包括oneline，short，full，fuller 和 format（后跟指定格式）。</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP的cURL文件上传]]></title>
      <url>http://jasonhzy.github.io/2016/05/04/php-curl-file/</url>
      <content type="html"><![CDATA[<h2 id="cURL介绍"><a href="#cURL介绍" class="headerlink" title="cURL介绍"></a>cURL介绍</h2><p>cURL是一个利用URL语法规定来传输文件和数据的工具，支持很多协议，如HTTP、FTP、TELNET等。PHP也支持cURL 库。本文将介绍 cURL 的一些高级特性，以及在PHP中如何运用它。</p>
<a id="more"></a>
<h2 id="PHP创建cURL的基本结构"><a href="#PHP创建cURL的基本结构" class="headerlink" title="PHP创建cURL的基本结构"></a>PHP创建cURL的基本结构</h2><p>1）初始化</p>
<pre><code>curl_init()
</code></pre><p>2）设置变量</p>
<pre><code>curl_setopt()
</code></pre><p>3）执行并获取结果</p>
<pre><code>curl_exec()
</code></pre><p>4）释放cURL句柄</p>
<pre><code>curl_close()
</code></pre><h2 id="PHP-cURl实现GET和POST"><a href="#PHP-cURl实现GET和POST" class="headerlink" title="PHP cURl实现GET和POST"></a>PHP cURl实现GET和POST</h2><h3 id="GET方式实现"><a href="#GET方式实现" class="headerlink" title="GET方式实现"></a>GET方式实现</h3><pre><code>//初始化
$ch = curl_init();
//设置选项，包括URL
curl_setopt($ch, CURLOPT_URL, &quot;http://loalhost/test.php&quot;);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_HEADER, 0);
//执行并获取HTML文档内容
$output = curl_exec($ch);
//释放curl句柄
curl_close($ch);
//打印获得的数据
print_r($output);
</code></pre><h3 id="POST方式请求"><a href="#POST方式请求" class="headerlink" title="POST方式请求"></a>POST方式请求</h3><pre><code>$url = &quot;http://localhost/test.php&quot;;
$post_data = array(&apos;key&apos; =&gt; &apos;value&apos;);
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
// post数据
curl_setopt($ch, CURLOPT_POST, 1);
// post的变量
curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
$output = curl_exec($ch);
curl_close($ch);
//打印获得的数据
print_r($output);
</code></pre><p>以上方式获取到的数据是json格式的，使用json_decode函数解释成数组。    </p>
<pre><code>$output_array = json_decode($output,true);
</code></pre><h3 id="PHP不同版本之间cURL上传文件的区别"><a href="#PHP不同版本之间cURL上传文件的区别" class="headerlink" title="PHP不同版本之间cURL上传文件的区别"></a>PHP不同版本之间cURL上传文件的区别</h3><p><strong>普通curl命令形式访问</strong></p>
<pre><code>curl -F &quot;name=jason&amp;file=@/tmp/test.jpg&quot; htt://localhost/test.php
</code></pre><p><strong>PHP的cURL类库上传文件</strong></p>
<p>PHP的cURL支持通过给CURL_POSTFIELDS传递关联数组（而不是字符串）来生成multipart/form-data的POST请求。<br>传统上，PHP的cURL支持通过在数组数据中，使用“@+文件全路径”的语法附加文件，供cURL读取上传。这与命令行直接调用cURL程序的语法是一致的：</p>
<pre><code>curl_setopt(ch, CURLOPT_POSTFIELDS, array(
    &apos;file&apos; =&gt; &apos;@&apos;.realpath(&apos;image.png&apos;), 
)); 
$ curl -F &quot;file=@/absolute/path/to/image.png&quot; &lt;url&gt;
</code></pre><p>PHP从5.5开始引入了新的CURLFile类用来指向文件。CURLFile类也可以详细定义MIME类型、文件名等可能出现在multipart/form-data数据中的附加信息。PHP推荐使用CURLFile替代旧的@语法：</p>
<pre><code>curl_setopt(ch, CURLOPT_POSTFIELDS, [
    &apos;file&apos; =&gt; new CURLFile(realpath(&apos;image.png&apos;)), 
]); 
</code></pre><p>PHP5.5另外引入了CURL_SAFE_UPLOAD选项，可以强制PHP的cURL模块拒绝旧的@语法，仅接受CURLFile式的文件。5.5的默认值为false，5.6的默认值为true。</p>
<p><strong>注</strong>：PHP5.4及以下版本仅支持@语法形式；PHP5.5两种都是支持的，设置CURL_SAFE_UPLOAD＝true强制使用CURLFile方式；PHP5.6+仅支持CURLFile方式，即使设置CURL_SAFE_UPLOAD＝false也是毫无意义的。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://segmentfault.com/a/1190000000725185" target="_blank" rel="external">考虑PHP5.0~5.6各版本兼容性的cURL文件上传</a></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> CURL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo环境搭建]]></title>
      <url>http://jasonhzy.github.io/2016/03/29/hexo-create/</url>
      <content type="html"><![CDATA[<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>hexo是由Node.js驱动的一款快速、简单且功能强大的博客框架。它和jekyll相比，更快，更轻量。</p>
<blockquote>
<p>A fast, simple &amp; powerful blog framework, powered by Node.js.</p>
</blockquote>
<a id="more"></a>
<h2 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h2><pre><code>sudo port install nodejs #macports安装，位于/opt/local/bin/node
sudo apt-get install nodejs #ubuntu安装，位于/usr/bin/node

node -v #验证是否安装成功，出现版本号表示安装成功
</code></pre><p>如果出现node command not found，则可以添加(以ubuntu为例)：</p>
<pre><code>ln -s /usr/bin/nodejs /usr/bin/node
</code></pre><h2 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h2><pre><code>sudo port install npm #macports
sudo apt-get install npm #ubuntu

npm -v #验证是否安装成功，出现版本号表示安装成功
</code></pre><p>npm 版本升级：</p>
<pre><code>sudo npm cache clean -f
sudo npm install -g npm
</code></pre><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><pre><code>sudo npm install hexo -g  #-g表示全局安装,npm默认为当前项目安装
sudo npm install hexo-cli 

hexo -v #查看是否成功
</code></pre><p>hexo 基本命令：</p>
<pre><code>hexo init
#执行init命令初始化hexo到你指定的目录，如果已经添加过，就不用再次执行，
否则会重置项目文件

npm install #进入初始化之后的目录中执行，产生node_modules
hexo new &quot;postName&quot; #创建文章
hexo new page &quot;pageName&quot; #新建标签页面
hexo server #hexo s 运行本地服务器,用于预览主题
hexo clean #清除缓存文件 db.json 和已生成的静态文件 public
hexo generate #生成网站静态文件到默认设置的public文件夹
hexo generate --watch #监视文件变动
hexo deploy #部署项目, hexo d -g/hexo g -d可以同时执行上述两步操作
</code></pre><p>安装常用的插件：</p>
<pre><code>npm install hexo-generator-index --save
npm install hexo-generator-archive --save
npm install hexo-generator-category --save
npm install hexo-generator-tag --save
npm install hexo-generator-sitemap --save
npm install hexo-renderer-marked--save
npm install hexo-renderer-stylus --save 
npm install hexo-generator-feed --save 

npm install hexo-deployer-git --save #Hexo3.0版本后deploy git需要安装
npm install hexo-server --save #运行本地服务器，快速浏览网页
</code></pre><p>参考资料</p>
<p>1.<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo官网</a><br>2.<a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo主题</a><br>3.<a href="http://zhiho.github.io/2015/09/29/hexo-next/" target="_blank" rel="external">NexT主题配置</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MAC下php环境的搭建]]></title>
      <url>http://jasonhzy.github.io/2016/03/28/mamp-config/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;MAMP 这个名字来源于 Macintosh Apache MySQL PHP，显然专门用来在 Mac环境下搭建Apache、MySQL、PHP平台。OSX中已经预装了Apache和PHP环境，但是启用、配置并安装整合MySQL仍然是一件极其复杂的工作。</p>
<a id="more"></a>
<h2 id="MAC下默认PHP环境"><a href="#MAC下默认PHP环境" class="headerlink" title="MAC下默认PHP环境"></a>MAC下默认PHP环境</h2><pre><code>开启apache, 默认根目录/Library/WebServer/Documents

sudo apachectl start ＃启动apache
/usr/sbin/httpd -D FOREGROUND #可以查看启动失败的原因
</code></pre><p>测试是否成功：<a href="http://localhost/，出现“It" target="_blank" rel="external">http://localhost/，出现“It</a> works!”，表示启用成功！</p>
<p>配置apache支持<a href="http://localhost/~username/访问" target="_blank" rel="external">http://localhost/~username/访问</a></p>
<pre><code>LoadModule php5_module libexec/apache2/libphp5.so #支持php
LoadModule rewrite_module libexec/apache2/mod_rewrite.so #支持rewrite模式
LoadModule userdir_module libexec/apache2/mod_userdir.so #启用userdir
</code></pre><p>编辑/etc/apache2/extra/httpd-userdir.conf，默认是Sites（即/Users/username/Sites）文件夹，开启：</p>
<pre><code>/etc/apache2/extra/httpd-userdir.conf
</code></pre><p>在/etc/apache2/users/文件夹下新建文件：username.conf，并添加内容：</p>
<pre><code>&lt;Directory &quot;/Users/*/Sites/&quot;&gt;
    Options Indexes MultiViews FollowSymLinks
    AllowOverride All
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
</code></pre><p>如上述操作之后，可以进行测试。</p>
<h2 id="利用macports重新安装PHP环境"><a href="#利用macports重新安装PHP环境" class="headerlink" title="利用macports重新安装PHP环境"></a>利用macports重新安装PHP环境</h2><p>安装macports，可以在<a href="https://www.macports.org/install.php" target="_blank" rel="external">官网下载</a></p>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><pre><code>sudo port search mysql #查看mysql，选择需要的版本
sudo port install mysql #安装mysql
</code></pre><p>利用which mysql<br>可以查看到位于/opt/local/lib/mysql55/bin下，进入此目录下：</p>
<pre><code>./mysqld_safe  #启动mysqld的服务器
./mysql_install_db #初始化mysql数据库
</code></pre><p>初始化之后，注意查看/opt/local/var/db/mysql/目录下创建的数据库的用户和用户组，一般情况下处理成：</p>
<pre><code>sudo chown -R _mysql:_mysql /opt/local/var/db/mysql/
</code></pre><p>mysql设置开机启动：</p>
<pre><code>sudo launchctl load -w /Library/LaunchDaemons/org.macports.mysql-server.plist
ps aux | grep mysql或者sudo launchctl list | grep mysql #查看是否启用
</code></pre><p>mysql取消开机启动：</p>
<pre><code>sudo launchctl unload -w /Library/LaunchDaemons/org.macports.mysql-server.plist
</code></pre><p>启用成功之后，利用status关键词查看sock文件：</p>
<pre><code>mysql&gt; status;
</code></pre><p><img src="/images/mac-mysql.png" alt="mysql"></p>
<p>可以看到sock文件：/opt/local/var/run/mysql55/mysqld.sock</p>
<p>修改php.ini文件，使用php可以连接mysql：</p>
<pre><code>pdo_mysql.default_socket= /opt/local/var/run/mysql55/mysqld.sock
mysql.default_socket = /opt/local/var/run/mysql55/mysqld.sock
mysqli.default_socket = /opt/local/var/run/mysql55/mysqld.sock
</code></pre><p>或者查看mysql的配置文件<strong>mysql_config</strong><br>利用which mysql,可以查看到位于/opt/local/lib/mysql55/bin下，进入此目录下，即：<br>/opt/local/lib/mysql55/bin/mysql_config</p>
<pre><code>$ echo $(/opt/local/lib/mysql55/bin/mysql_config --socket)
$ /opt/local/var/run/mysql55/mysqld.sock
</code></pre><h3 id="安装PHP、Apache"><a href="#安装PHP、Apache" class="headerlink" title="安装PHP、Apache"></a>安装PHP、Apache</h3><pre><code>$ sudo port install php56 php56-curl php56-gd php56-mysqli
php56-mbstring php56-mcrypt php56-imagic php56-apache2handlerk
</code></pre><p>如果是首次安装，需要启用<strong>php56-apache2handler</strong></p>
<pre><code>$ cd /opt/local/apache2/modules
$ sudo /opt/local/apache2/bin/apxs -a -e -n php5 mod_php56.so
</code></pre><p>启用成功返回的信息：</p>
<pre><code>[activating module `php5&apos; in /opt/local/apache2/conf/httpd.conf]
</code></pre><p>检查确认是否引用<strong>mod_php56.so</strong></p>
<pre><code># Load the PHP module
LoadModule php5_module modules/mod_php56.so
</code></pre><p><strong>配置httpd.conf</strong></p>
<p>编辑/opt/local/apache2/conf/httpd.conf，<strong>DirectoryIndex</strong>添加index.php</p>
<pre><code>DirectoryIndex index.php index.html
</code></pre><p>在httpd.conf的尾部，可以看到如下的部分，打开文件之后可以看到<strong>AddType</strong>的配置</p>
<pre><code># Include PHP configurations
Include conf/extra/mod_php56.conf
</code></pre><p><strong>参考资料</strong></p>
<p>1.<a href="https://trac.macports.org/wiki/howto/MAMP" target="_blank" rel="external">howto MAMP</a></p>
]]></content>
      
        <categories>
            
            <category> MAC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MAC </tag>
            
            <tag> MAMP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MAC(OS X Yosemite)支持鼠标]]></title>
      <url>http://jasonhzy.github.io/2016/03/28/mac-vim/</url>
      <content type="html"><![CDATA[<p>设置在vim中，鼠标可以控制光标快速定位：<br>临时设置：set mouse=a<br>长久设置，在~/.vimrc中添加：set mouse=a</p>
<p>但是在mac中的vim设置之后是不起作用的，解决方案如下：</p>
<a id="more"></a>
<h2 id="安装SIMBL"><a href="#安装SIMBL" class="headerlink" title="安装SIMBL"></a>安装SIMBL</h2><p>mouseterm依赖于simbl，必须先进行安装</p>
<h2 id="安装MouseTerm"><a href="#安装MouseTerm" class="headerlink" title="安装MouseTerm"></a>安装MouseTerm</h2><h2 id="启用鼠标，编辑-vimrc，添加如下信息"><a href="#启用鼠标，编辑-vimrc，添加如下信息" class="headerlink" title="启用鼠标，编辑~/.vimrc，添加如下信息"></a>启用鼠标，编辑~/.vimrc，添加如下信息</h2><pre><code>if has(&quot;mouse&quot;)
    set mouse=a
endif
</code></pre><p>参考资料：</p>
<p>1.<a href="https://bitheap.org/mouseterm/" target="_blank" rel="external">资料MouseTerm</a><br>2.<a href="https://github.com/brodie/mouseterm.git" target="_blank" rel="external">MouseTerm-Github</a><br>3.<a href="http://www.culater.net/software/SIMBL/SIMBL.php" target="_blank" rel="external">SIML</a><br>4.<a href="/download/SIMBL&amp;MouseTerm.zip">SIMBL&amp;MouseTerm下载</a></p>
]]></content>
      
        <categories>
            
            <category> MAC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MAC </tag>
            
            <tag> vim支持鼠标 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux上配置FTP]]></title>
      <url>http://jasonhzy.github.io/2016/03/11/linux-ftp/</url>
      <content type="html"><![CDATA[<blockquote>
<p>   文件传输协议（File Transfer    Protocol，缩写：FTP）是TCP/IP协议组中的协议之一。它属于网络传输协议的应用层。FTP服务一般运行在20和21两个端口。端口20用于在客户端和服务器之间传输数据流，而端口21用于传输控制流，并且是命令通向ftp服务器的进口。常用的FTP客户端有FileZilla、WinSCP等。</p>
</blockquote>
<p><a href="/images/ftp/ftp.swf"><img src="/images/ftp/ftp.jpg" alt="FTP工作原理"></a></p>
<a id="more"></a>
<h4 id="安装vsftp"><a href="#安装vsftp" class="headerlink" title="安装vsftp"></a>安装vsftp</h4><pre><code>yum install vsftpd -y (Redhat/CentOS)
apt-get install vsftpd -y (Ubuntu/Debian)

systemctl enable vsftpd
systemctl start vsftpd
</code></pre><h4 id="添加FTP账号和目录"><a href="#添加FTP账号和目录" class="headerlink" title="添加FTP账号和目录"></a>添加FTP账号和目录</h4><p>检查一下nologin的位置，通常在/usr/sbin/nologin或者/sbin/nologin(不允许用户登陆)下</p>
<pre><code>定义帐户名和目录
useradd -d /var/ftp -s /sbin/nologin ftp #ftp创建的账号  /var/ftp创建账号对应的目录 

修改该帐户密码
passwd ftp

修改指定目录的权限
chown -R ftp:root /var/ftp
</code></pre><h5 id="配置vsftp"><a href="#配置vsftp" class="headerlink" title="配置vsftp"></a>配置vsftp</h5><p>要修改的主要参数：</p>
<pre><code>anonymous_enable=No
local_enable=YES
write_enable=YES
local_umask=022

#vsftpd服务器的日志功能
xferlog_enable=YES
xferlog_file=/var/log/vsftpd.log

#有选择的把用户限制在家目录中，在文件chroot_list中添加要限制的用户（如上述的ftp）
#注意，多个用户每个用户占一行
chroot_list_enable=YES
chroot_list_file=/etc/vsftpd/chroot_list

#系统内所有的FTP用户都限制在家目录中
chroot_local_user=YES

#绑定IP到vsftpd
listen_address=192.168.11.120

#定制欢迎信息，FTP信息默认的就是.message
dirmessage_enable=YES
message_file=.message
</code></pre><h4 id="SELinux-开启时配置"><a href="#SELinux-开启时配置" class="headerlink" title="SELinux 开启时配置"></a>SELinux 开启时配置</h4><pre><code>主要开启参数：
setsebool ftpd_full_access on
setsebool ftp_home_dir on

查找ftp相关的SELinux bool值，给ftp访问放行
getsebool -a | grep ftp   #或者sestatus  -b | grep ftp
</code></pre><p><img src="/images/ftp/ftp-params.png" alt="FTP"></p>
<h4 id="firewalld开启ftp服务"><a href="#firewalld开启ftp服务" class="headerlink" title="firewalld开启ftp服务"></a>firewalld开启ftp服务</h4><pre><code>firewall-cmd --permanent --zone=public --add-service=ftp
firewall-cmd --reload
</code></pre><h4 id="默认配置："><a href="#默认配置：" class="headerlink" title="默认配置："></a>默认配置：</h4><pre><code>1、允许匿名用户和本地用户登陆
     anonymous_enable=YES
     local_enable=YES

2、匿名用户使用的登陆名为ftp或anonymous，口令为空；匿名用户不能离开匿名用户家目录/var/ftp,且只能下载不能上传。
3、本地用户的登录名为本地用户名，口令为此本地用户的口令；本地用户可以在自己家目录中进行读写操作；本地用户可以离开自家目录切换至有权限访问的其他目录，并在权限允许的情况下进行上传/下载。
    write_enable=YES
4、写在文件/etc/vsftpd.ftpusers中的本地用户禁止登陆。

2、配置文件格式：
vsftpd.conf 的内容非常单纯，每一行即为一项设定。若是空白行或是开头为#的一行，将会被忽略。内容的格式只有一种，如下所示
option=value
要注意的是，等号两边不能加空白。

3、匿名用户（anonymous）设置
anonymous_enable=YES/NO（YES）
控制是否允许匿名用户登入，YES 为允许匿名登入，NO 为不允许。默认值为YES。
write_enable=YES/NO（YES）
是否允许登陆用户有写权限。属于全局设置，默认值为YES。
no_anon_password=YES/NO（NO）
若是启动这项功能，则使用匿名登入时，不会询问密码。默认值为NO。
ftpftp_username=ftp
定义匿名登入的使用者名称。默认值为ftp。
anon_root=/var/ftp
使用匿名登入时，所登入的目录。默认值为/var/ftp。注意ftp目录不能是777的权限属性，即匿名用户的家目录不能有777的权限。
anon_upload_enable=YES/NO（NO）
如果设为YES，则允许匿名登入者有上传文件（非目录）的权限，只有在write_enable=YES时，此项才有效。当然，匿名用户必须要有对上层目录的写入权。默认值为NO。
anon_world_readable_only=YES/NO（YES）
如果设为YES，则允许匿名登入者下载可阅读的档案（可以下载到本机阅读，不能直接在FTP服务器中打开阅读）。默认值为YES。
anon_mkdir_write_enable=YES/NO（NO）
如果设为YES，则允许匿名登入者有新增目录的权限，只有在write_enable=YES时，此项才有效。当然，匿名用户必须要有对上层目录的写入权。默认值为NO。
anon_other_write_enable=YES/NO（NO）
如 果设为YES，则允许匿名登入者更多于上传或者建立目录之外的权限，譬如删除或者重命名。（如果anon_upload_enable=NO，则匿名用户 不能上传文件，但可以删除或者重命名已经存在的文件；如果anon_mkdir_write_enable=NO，则匿名用户不能上传或者新建文件夹，但 可以删除或者重命名已经存在的文件夹。）默认值为NO。
chown_uploads=YES/NO（NO）
设置是否改变匿名用户上传文件（非目录）的属主。默认值为NO。
chown_username=username
设置匿名用户上传文件（非目录）的属主名。建议不要设置为root。
anon_umask=077
设置匿名登入者新增或上传档案时的umask 值。默认值为077，则新建档案的对应权限为700。
deny_email_enable=YES/NO（NO）
若是启动这项功能，则必须提供一个档案/etc/vsftpd/banner_emails，内容为email address。若是使用匿名登入，则会要求输入email address，若输入的email address 在此档案内，则不允许进入。默认值为NO。
banned_email_file=/etc/vsftpd/banner_emails
此文件用来输入email address，只有在deny_email_enable=YES时，才会使用到此档案。若是使用匿名登入，则会要求输入email address，若输入的email address 在此档案内，则不允许进入。

4、本地用户设置
local_enable=YES/NO（YES）
控制是否允许本地用户登入，YES 为允许本地用户登入，NO为不允许。默认值为YES。
local_root=/home/username
当本地用户登入时，将被更换到定义的目录下。默认值为各用户的家目录。
write_enable=YES/NO（YES）
是否允许登陆用户有写权限。属于全局设置，默认值为YES。
local_umask=022
本地用户新增档案时的umask 值。默认值为077。
file_open_mode=0755
本地用户上传档案后的档案权限，与chmod 所使用的数值相同。默认值为0666。

5.欢迎语设置
dirmessage_enable=YES/NO（YES）
如果启动这个选项，那么使用者第一次进入一个目录时，会检查该目录下是否有.message这个档案，如果有，则会出现此档案的内容，通常这个档案会放置欢迎话语，或是对该目录的说明。默认值为开启。
message_file=.message
设置目录消息文件，可将要显示的信息写入该文件。默认值为.message。
banner_file=/etc/vsftpd/banner
当使用者登入时，会显示此设定所在的档案内容，通常为欢迎话语或是说明。默认值为无。如果欢迎信息较多，则使用该配置项。
ftpd_banner=Welcome to BOB&apos;s FTP server
这里用来定义欢迎话语的字符串，banner_file是档案的形式，而ftpd_banner 则是字符串的形式。预设为无。

6、控制用户是否允许切换到上级目录
在默认配置下，本地用户登入FTP后可以使用cd命令切换到其他目录，这样会对系统带来安全隐患。可以通过以下三条配置文件来控制用户切换目录。
chroot_list_enable=YES/NO（NO）
设置是否启用chroot_list_file配置项指定的用户列表文件。默认值为NO。
chroot_list_file=/etc/vsftpd.chroot_list
用于指定用户列表文件，该文件用于控制哪些用户可以切换到用户家目录的上级目录。
chroot_local_user=YES/NO（NO）
用于指定用户列表文件中的用户是否允许切换到上级目录。默认值为NO。
通过搭配能实现以下几种效果：
①当chroot_list_enable=YES，chroot_local_user=YES时，在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；未在文件中列出的用户，不能切换到其他目录。
②当chroot_list_enable=YES，chroot_local_user=NO时，在/etc/vsftpd.chroot_list文件中列出的用户，不能切换到其他目录；未在文件中列出的用户，可以切换到其他目录。
③当chroot_list_enable=NO，chroot_local_user=YES时，所有的用户均不能切换到其他目录。
④当chroot_list_enable=NO，chroot_local_user=NO时，所有的用户均可以切换到其他目录。

7、数据传输模式设置
FTP在传输数据时，可以使用二进制方式，也可以使用ASCII模式来上传或下载数据。
ascii_upload_enable=YES/NO（NO）
设置是否启用ASCII 模式上传数据。默认值为NO。
ascii_download_enable=YES/NO（NO）
设置是否启用ASCII 模式下载数据。默认值为NO。

8、访问控制设置
两种控制方式：一种控制主机访问，另一种控制用户访问。
①控制主机访问：
tcp_wrappers=YES/NO（YES）
设 置vsftpd是否与tcp wrapper相结合来进行主机的访问控制。默认值为YES。如果启用，则vsftpd服务器会检查/etc/hosts.allow 和/etc/hosts.deny 中的设置，来决定请求连接的主机，是否允许访问该FTP服务器。这两个文件可以起到简易的防火墙功能。
比如：若要仅允许192.168.0.1—192.168.0.254的用户可以连接FTP服务器，则在/etc/hosts.allow文件中添加以下内容：
vsftpd:192.168.0. :allow
all:all :deny
②控制用户访问：
对于用户的访问控制可以通过/etc目录下的vsftpd.user_list和ftpusers文件来实现。
userlist_file=/etc/vsftpd.user_list
控制用户访问FTP的文件，里面写着用户名称。一个用户名称一行。
userlist_enable=YES/NO（NO）
是否启用vsftpd.user_list文件。
userlist_deny=YES/NO（YES）
决定vsftpd.user_list文件中的用户是否能够访问FTP服务器。若设置为YES，则vsftpd.user_list文件中的用户不允许访问FTP，若设置为NO，则只有vsftpd.user_list文件中的用户才能访问FTP。
/etc /vsftpd/ftpusers文件专门用于定义不允许访问FTP服务器的用户列表（注意:如果 userlist_enable=YES,userlist_deny=NO,此时如果在vsftpd.user_list和ftpusers中都有某个 用户时，那么这个用户是不能够访问FTP的，即ftpusers的优先级要高）。默认情况下vsftpd.user_list和ftpusers，这两个 文件已经预设置了一些不允许访问FTP服务器的系统内部账户。如果系统没有这两个文件，那么新建这两个文件，将用户添加进去即可。

9、访问速率设置
anon_max_rate=0
设置匿名登入者使用的最大传输速度，单位为B/s，0 表示不限制速度。默认值为0。
local_max_rate=0
本地用户使用的最大传输速度，单位为B/s，0 表示不限制速度。预设值为0。

10、超时时间设置
accept_timeout=60
设置建立FTP连接的超时时间，单位为秒。默认值为60。
connect_timeout=60
PORT 方式下建立数据连接的超时时间，单位为秒。默认值为60。
data_connection_timeout=120
设置建立FTP数据连接的超时时间，单位为秒。默认值为120。
idle_session_timeout=300
设置多长时间不对FTP服务器进行任何操作，则断开该FTP连接，单位为秒。默认值为300 。

11、日志文件设置
xferlog_enable= YES/NO（YES）
是否启用上传/下载日志记录。如果启用，则上传与下载的信息将被完整纪录在xferlog_file 所定义的档案中。预设为开启。
xferlog_file=/var/log/vsftpd.log
设置日志文件名和路径，默认值为/var/log/vsftpd.log。
xferlog_std_format=YES/NO（NO）
如果启用，则日志文件将会写成xferlog的标准格式，如同wu-ftpd 一般。默认值为关闭。
log_ftp_protocol=YES|NO（NO）
如果启用此选项，所有的FTP请求和响应都会被记录到日志中，默认日志文件在/var/log/vsftpd.log。启用此选项时，xferlog_std_format不能被激活。这个选项有助于调试。默认值为NO。

12、定义用户配置文件
在vsftpd中，可以通过定义用户配置文件来实现不同的用户使用不同的配置。
user_config_dir=/etc/vsftpd/userconf
设置用户配置文件所在的目录。当设置了该配置项后，用户登陆服务器后，系统就会到/etc/vsftpd/userconf目录下，读取与当前用户名相同的文件，并根据文件中的配置命令，对当前用户进行更进一步的配置。
例 如：定义user_config_dir=/etc/vsftpd/userconf，且主机上有使用者 test1,test2，那么我们就在user_config_dir 的目录新增文件名为test1和test2两个文件。若是test1 登入，则会读取user_config_dir 下的test1 这个档案内的设定。默认值为无。利用用户配置文件，可以实现对不同用户进行访问速度的控制，在各用户配置文件中定义local_max_rate=XX， 即可。

13、FTP的工作方式与端口设置
FTP有两种工作方式：PORT FTP（主动模式）和PASV FTP（被动模式）
listen_port=21
设置FTP服务器建立连接所监听的端口，默认值为21。
connect_from_port_20=YES/NO
指定FTP使用20端口进行数据传输，默认值为YES。
ftp_data_port=20
设置在PORT方式下，FTP数据连接使用的端口，默认值为20。
pasv_enable=YES/NO（YES）
若设置为YES，则使用PASV工作模式；若设置为NO，则使用PORT模式。默认值为YES，即使用PASV工作模式。
pasv_max_port=0
在PASV工作模式下，数据连接可以使用的端口范围的最大端口，0 表示任意端口。默认值为0。
pasv_min_port=0
在PASV工作模式下，数据连接可以使用的端口范围的最小端口，0 表示任意端口。默认值为0。

14、与连接相关的设置
listen=YES/NO（YES）
设 置vsftpd服务器是否以standalone模式运行。以standalone模式运行是一种较好的方式，此时listen必须设置为YES，此为默 认值。建议不要更改，有很多与服务器运行相关的配置命令，需要在此模式下才有效。若设置为NO，则vsftpd不是以独立的服务运行，要受到xinetd 服务的管控，功能上会受到限制。
max_clients=0
设置vsftpd允许的最大连接数，默认值为0，表示不受限制。若设置为100时，则同时允许有100个连接，超出的将被拒绝。只有在standalone模式运行才有效。
max_per_ip=0
设置每个IP允许与FTP服务器同时建立连接的数目。默认值为0，表示不受限制。只有在standalone模式运行才有效。
listen_address=IP地址
设置FTP服务器在指定的IP地址上侦听用户的FTP请求。若不设置，则对服务器绑定的所有IP地址进行侦听。只有在standalone模式运行才有效。
setproctitle_enable=YES/NO（NO）
设置每个与FTP服务器的连接，是否以不同的进程表现出来。默认值为NO，此时使用ps aux |grep ftp只会有一个vsftpd的进程。若设置为YES，则每个连接都会有一个vsftpd的进程。

15、虚拟用户设置
虚拟用户使用PAM认证方式。
pam_service_name=vsftpd
设置PAM使用的名称，默认值为/etc/pam.d/vsftpd。
guest_enable= YES/NO（NO）
启用虚拟用户。默认值为NO。
guest_username=ftp
这里用来映射虚拟用户。默认值为ftp。
virtual_use_local_privs=YES/NO（NO）
当该参数激活（YES）时，虚拟用户使用与本地用户相同的权限。当此参数关闭（NO）时，虚拟用户使用与匿名用户相同的权限。默认情况下此参数是关闭的（NO）。

16、其他设置
text_userdb_names= YES/NO（NO）
设置在执行ls –la之类的命令时，是显示UID、GID还是显示出具体的用户名和组名。默认值为NO，即以UID和GID方式显示。若希望显示用户名和组名，则设置为YES。
ls_recurse_enable=YES/NO（NO）
若是启用此功能，则允许登入者使用ls –R（可以查看当前目录下子目录中的文件）这个指令。默认值为NO。
hide_ids=YES/NO（NO）
如果启用此功能，所有档案的拥有者与群组都为ftp，也就是使用者登入使用ls -al之类的指令，所看到的档案拥有者跟群组均为ftp。默认值为关闭。
download_enable=YES/NO（YES）
如果设置为NO，所有的文件都不能下载到本地，文件夹不受影响。默认值为YES。
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> FTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeigniter集成smarty]]></title>
      <url>http://jasonhzy.github.io/2016/02/27/ci-smarty/</url>
      <content type="html"><![CDATA[<blockquote>
<p>CodeIgniter 是一个小巧但功能强大的 PHP 框架，作为一个简单而“优雅”的工具包，它可以为开发者们建立功能完善的<br>Web应用程序,smarty的模板机制很强大，一般情况下CI无需整合其他模板标签，因为PHP本身就是一种标签，简单易用。但两者配合起来使用，更加快了开发效率。</p>
</blockquote>
<a id="more"></a>
<p>codeigniter集成smarty配置如下：</p>
<h4 id="准备代码包"><a href="#准备代码包" class="headerlink" title="准备代码包"></a>准备代码包</h4><p>下载codeigniter最新版本：<a href="http://codeigniter.org.cn/" target="_blank" rel="external">http://codeigniter.org.cn/</a><br>下载smarty最新版本：<a href="http://www.smarty.net/" target="_blank" rel="external">http://www.smarty.net/</a></p>
<h4 id="配置smarty"><a href="#配置smarty" class="headerlink" title="配置smarty"></a>配置smarty</h4><p>在CodeIgniter的application目录下的third_party目录中新建一个名为smarty的目录，将解压出来的libs包复制到该目录中<br><img src="/images/ci_smarty/smarty.png" alt="ci_smarty"><br><img src="/images/ci_smarty/smarty_lib.png" alt="ci_smarty"></p>
<h4 id="创建模板目录"><a href="#创建模板目录" class="headerlink" title="创建模板目录"></a>创建模板目录</h4><p>在application目录的views目录中创建两个文件夹templates、templates_c</p>
<h4 id="编写安装代码"><a href="#编写安装代码" class="headerlink" title="编写安装代码"></a>编写安装代码</h4><p>从<a href="http://www.coolphptools.com/codeigniter-smarty下载代码,Smarty.php(复制至appliction/libraries目录中)，并将文件名修改为Ci_smarty.php" target="_blank" rel="external">http://www.coolphptools.com/codeigniter-smarty下载代码,Smarty.php(复制至appliction/libraries目录中)，并将文件名修改为Ci_smarty.php</a></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line"><span class="keyword">if</span> (!defined(<span class="string">'BASEPATH'</span>)) <span class="keyword">exit</span>(<span class="string">'No direct script access allowed'</span>);</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Smarty Class</div><div class="line"> *</div><div class="line"> * <span class="doctag">@package</span>		CodeIgniter</div><div class="line"> * <span class="doctag">@subpackage</span>	Libraries</div><div class="line"> * <span class="doctag">@category</span>	Smarty</div><div class="line"> * <span class="doctag">@author</span>		Kepler Gelotte</div><div class="line"> * <span class="doctag">@link</span>		http://www.coolphptools.com/codeigniter-smarty</div><div class="line"> */</div><div class="line"><span class="keyword">require_once</span>( APPPATH.<span class="string">'third_party/smarty/libs/Smarty.class.php'</span> );</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CI_Smarty</span> <span class="keyword">extends</span> <span class="title">Smarty</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">parent</span>::__construct();</div><div class="line"></div><div class="line">		<span class="keyword">$this</span>-&gt;compile_dir = APPPATH . <span class="string">"views/templates_c"</span>;</div><div class="line">		<span class="keyword">$this</span>-&gt;template_dir = APPPATH . <span class="string">"views/templates"</span>;</div><div class="line">		<span class="keyword">$this</span>-&gt;assign( <span class="string">'APPPATH'</span>, APPPATH );</div><div class="line">		<span class="keyword">$this</span>-&gt;assign( <span class="string">'BASEPATH'</span>, BASEPATH );</div><div class="line"></div><div class="line">		<span class="comment">// Assign CodeIgniter object by reference to CI</span></div><div class="line">		<span class="keyword">if</span> ( method_exists( <span class="keyword">$this</span>, <span class="string">'assignByRef'</span>) )</div><div class="line">		&#123;</div><div class="line">			$ci =&amp; get_instance();</div><div class="line">			<span class="keyword">$this</span>-&gt;assignByRef(<span class="string">"ci"</span>, $ci);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		log_message(<span class="string">'debug'</span>, <span class="string">"Smarty Class Initialized"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *  Parse a template using the Smarty engine</div><div class="line">	 *</div><div class="line">	 * This is a convenience method that combines assign() and</div><div class="line">	 * display() into one step. </div><div class="line">	 *</div><div class="line">	 * Values to assign are passed in an associative array of</div><div class="line">	 * name =&gt; value pairs.</div><div class="line">	 *</div><div class="line">	 * If the output is to be returned as a string to the caller</div><div class="line">	 * instead of being output, pass true as the third parameter.</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@access</span>	public</div><div class="line">	 * <span class="doctag">@param</span>	string</div><div class="line">	 * <span class="doctag">@param</span>	array</div><div class="line">	 * <span class="doctag">@param</span>	bool</div><div class="line">	 * <span class="doctag">@return</span>	string</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">view</span><span class="params">($template, $data = array<span class="params">()</span>, $return = FALSE)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">foreach</span> ($data <span class="keyword">as</span> $key =&gt; $val)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">$this</span>-&gt;assign($key, $val);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> ($return == <span class="keyword">FALSE</span>)</div><div class="line">		&#123;</div><div class="line">			$CI =&amp; get_instance();</div><div class="line">			<span class="keyword">if</span> (method_exists( $CI-&gt;output, <span class="string">'set_output'</span> ))</div><div class="line">			&#123;</div><div class="line">				$CI-&gt;output-&gt;set_output( <span class="keyword">$this</span>-&gt;fetch($template) );</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				$CI-&gt;output-&gt;final_output = <span class="keyword">$this</span>-&gt;fetch($template);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;fetch($template);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// END Smarty Class</span></div></pre></td></tr></table></figure>
<h4 id="更新CodeIgniter配置"><a href="#更新CodeIgniter配置" class="headerlink" title="更新CodeIgniter配置"></a>更新CodeIgniter配置</h4><p>修改application/config/autoload.php文件中的libraries项，让页面自动载入smarty，即：$autoload[‘libraries’]<br>= array(‘ci_smarty’)。如果不在这里配置，只需在要用到smarty的地方显示调用$this-&gt;load-&gt;library(‘ci_smarty’);</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>编写控制器：application/controllers/Example.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">CI_Controller</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// This example is taken from the Smarty demo and modified slightly</span></div><div class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"Name"</span>,<span class="string">"Fred Irving Johnathan Bradley Peppergill"</span>);</div><div class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"FirstName"</span>,<span class="keyword">array</span>(<span class="string">"John"</span>,<span class="string">"Mary"</span>,<span class="string">"James"</span>,<span class="string">"Henry"</span>));</div><div class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"LastName"</span>,<span class="keyword">array</span>(<span class="string">"Doe"</span>,<span class="string">"Smith"</span>,<span class="string">"Johnson"</span>,<span class="string">"Case"</span>));</div><div class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"Class"</span>,<span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>), <span class="keyword">array</span>(<span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"G"</span>, <span class="string">"H"</span>), </div><div class="line">				<span class="keyword">array</span>(<span class="string">"I"</span>, <span class="string">"J"</span>, <span class="string">"K"</span>, <span class="string">"L"</span>), <span class="keyword">array</span>(<span class="string">"M"</span>, <span class="string">"N"</span>, <span class="string">"O"</span>, <span class="string">"P"</span>)));</div><div class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"contacts"</span>, <span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">"phone"</span> =&gt; <span class="string">"555-1234"</span>, <span class="string">"fax"</span> =&gt; <span class="string">"555-2345"</span>, </div><div class="line">			<span class="string">"cell"</span> =&gt; <span class="string">"999-9999"</span>), <span class="keyword">array</span>(<span class="string">"phone"</span> =&gt; <span class="string">"555-4444"</span>, <span class="string">"fax"</span> =&gt; <span class="string">"555-3333"</span>, <span class="string">"cell"</span> =&gt; <span class="string">"888-8888"</span>)));</div><div class="line"></div><div class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"state_values"</span>, <span class="keyword">array</span>( <span class="string">'AL'</span>, <span class="string">'AK'</span>, <span class="string">'AZ'</span>, <span class="string">'AR'</span>, <span class="string">'CA'</span>, <span class="string">'CO'</span>, <span class="string">'CT'</span>, <span class="string">'DE'</span>, </div><div class="line">			<span class="string">'FL'</span>, <span class="string">'GA'</span>, <span class="string">'HI'</span>, <span class="string">'ID'</span>, <span class="string">'IL'</span>, <span class="string">'IN'</span>, <span class="string">'IA'</span>, <span class="string">'KS'</span>, <span class="string">'KY'</span>, <span class="string">'LA'</span>, <span class="string">'ME'</span>, <span class="string">'MD'</span>, <span class="string">'MA'</span>, <span class="string">'MI'</span>, <span class="string">'MN'</span>, </div><div class="line">			<span class="string">'MS'</span>, <span class="string">'MO'</span>, <span class="string">'MT'</span>, <span class="string">'NE'</span>, <span class="string">'NV'</span>, <span class="string">'NH'</span>, <span class="string">'NJ'</span>, <span class="string">'NM'</span>, <span class="string">'NY'</span>, <span class="string">'NC'</span>, <span class="string">'ND'</span>, <span class="string">'OH'</span>, <span class="string">'OK'</span>, <span class="string">'OR'</span>, <span class="string">'PA'</span>, </div><div class="line">			<span class="string">'RI'</span>, <span class="string">'SC'</span>, <span class="string">'SD'</span>, <span class="string">'TN'</span>, <span class="string">'TX'</span>, <span class="string">'UT'</span>, <span class="string">'VT'</span>, <span class="string">'VA'</span>, <span class="string">'WA'</span>, <span class="string">'WV'</span>, <span class="string">'WI'</span>, <span class="string">'WY'</span> ));</div><div class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"state_output"</span>, <span class="keyword">array</span>( <span class="string">'Alabama'</span>, <span class="string">'Alaska'</span>, <span class="string">'Arizona'</span>, <span class="string">'Arkansas'</span>, <span class="string">'California'</span>,</div><div class="line">			<span class="string">'Colorado'</span>, <span class="string">'Connecticut'</span>, <span class="string">'Delaware'</span>, <span class="string">'Florida'</span>, <span class="string">'Georgia'</span>, <span class="string">'Hawaii'</span>, <span class="string">'Idaho'</span>, <span class="string">'Illinois'</span>, <span class="string">'Indiana'</span>, </div><div class="line">			<span class="string">'Iowa'</span>, <span class="string">'Kansas'</span>, <span class="string">'Kentucky'</span>, <span class="string">'Louisiana'</span>, <span class="string">'Maine'</span>, <span class="string">'Maryland'</span>, <span class="string">'Massachusetts'</span>, <span class="string">'Michigan'</span>, </div><div class="line">			<span class="string">'Minnesota'</span>, <span class="string">'Mississippi'</span>, <span class="string">'Missouri'</span>, <span class="string">'Montana'</span>, <span class="string">'Nebraska'</span>, <span class="string">'Nevada'</span>, <span class="string">'New hampshire'</span>, </div><div class="line">			<span class="string">'New Jersey'</span>, <span class="string">'New Mexico'</span>, <span class="string">'New York'</span>, <span class="string">'North Carolina'</span>, <span class="string">'North Dakota'</span>, <span class="string">'Ohio'</span>, <span class="string">'Oklahoma'</span>, </div><div class="line">			<span class="string">'Oregon'</span>, <span class="string">'Pennsylvania'</span>, <span class="string">'Rhode Island'</span>, <span class="string">'South Carolina'</span>, <span class="string">'South Dakota'</span>, <span class="string">'Tennessee'</span>, </div><div class="line">			<span class="string">'Texas'</span>, <span class="string">'Utah'</span>, <span class="string">'Vermont'</span>, <span class="string">'Virginia'</span>, <span class="string">'Washington'</span>,	<span class="string">'West Virginia'</span>, <span class="string">'Wisconsin'</span>, <span class="string">'Wyoming'</span> ));</div><div class="line"></div><div class="line">		<span class="comment">// english is the default if you don't set lang</span></div><div class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;assign(<span class="string">"lang"</span>, <span class="string">"english"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// Set the validation rules if this is a submit</span></div><div class="line">		<span class="keyword">if</span> ( <span class="keyword">$this</span>-&gt;input-&gt;post(<span class="string">'action'</span>) == <span class="string">'submit'</span> )</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">$this</span>-&gt;form_validation-&gt;set_rules(<span class="string">'username'</span>, <span class="string">'Username'</span>, </div><div class="line">					<span class="string">'trim|required|min_length[5]|max_length[12]|xss_clean'</span>);</div><div class="line">			<span class="keyword">$this</span>-&gt;form_validation-&gt;set_rules(<span class="string">'password'</span>, <span class="string">'Password'</span>, </div><div class="line">					<span class="string">'trim|required|matches[passconf]|md5'</span>);</div><div class="line">			<span class="keyword">$this</span>-&gt;form_validation-&gt;set_rules(<span class="string">'passconf'</span>, <span class="string">'Password Confirmation'</span>, <span class="string">'trim|required'</span>);</div><div class="line">			<span class="keyword">$this</span>-&gt;form_validation-&gt;set_rules(<span class="string">'email'</span>, <span class="string">'Email'</span>, <span class="string">'trim|required|valid_email'</span>);</div><div class="line">			<span class="keyword">$this</span>-&gt;form_validation-&gt;set_rules(<span class="string">'state'</span>, <span class="string">'State'</span>, <span class="string">''</span>);</div><div class="line"></div><div class="line">			<span class="keyword">if</span> ( ! <span class="keyword">$this</span>-&gt;form_validation-&gt;run() )</div><div class="line">			&#123;</div><div class="line">				$data[<span class="string">'error'</span>] = <span class="string">'Check and fix the form errors below'</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				$data[<span class="string">'message'</span>] = <span class="string">'Thanks for posting!'</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// These assignments are passed by the associative array</span></div><div class="line">		$data[<span class="string">'title'</span>] = <span class="string">'Welcome to the Smarty Website'</span>;</div><div class="line">		$data[<span class="string">'bold'</span>] = <span class="keyword">true</span>;</div><div class="line">		$data[<span class="string">'ip_address'</span>] = <span class="keyword">$this</span>-&gt;input-&gt;server(<span class="string">'REMOTE_ADDR'</span>);</div><div class="line"></div><div class="line">		<span class="comment">// Calling the convenience function view() that allows passing data</span></div><div class="line">		<span class="keyword">$this</span>-&gt;ci_smarty-&gt;view( <span class="string">'example.tpl'</span>, $data );</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="/images/ci_smarty/ci_example.png" alt="Example"></p>
<p>参考资料<br><a href="http://www.coolphptools.com/codeigniter-smarty" target="_blank" rel="external">CodeIgniter+Smarty - Perfect Together</a><br><a href="/download/codeigniter-smarty-3.1.zip">代码下载</a></p>
]]></content>
      
        <categories>
            
            <category> Codeigniter </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Codeigniter </tag>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SVN 服务器搭建]]></title>
      <url>http://jasonhzy.github.io/2016/02/26/create-svn/</url>
      <content type="html"><![CDATA[<blockquote>
<p>   SVN是Subversion的简称，是一个开放源代码的版本控制系统，相较于RCS、CVS，它采用了分支管理系统，它的设计目标就是取代CVS。互联网上很多版本控制服务已从CVS迁移到Subversion。</p>
</blockquote>
<a id="more"></a>
<h4 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h4><pre><code>svnadmin create /var/svn/svnrepos
</code></pre><h4 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h4><pre><code>svn import ./myproject svn://127.0.0.1:3390/myproject -m &quot;import project&quot;　(默认端口3690)
</code></pre><h4 id="配置authz-passwd-svnserve-conf"><a href="#配置authz-passwd-svnserve-conf" class="headerlink" title="配置authz passwd  svnserve.conf"></a>配置authz passwd  svnserve.conf</h4><h5 id="authz：文件是权限控制文件"><a href="#authz：文件是权限控制文件" class="headerlink" title="authz：文件是权限控制文件"></a>authz：文件是权限控制文件</h5><pre><code>[groups]
admin = jason,test

[test:/]
@admin = rw
test1 = rw
* = r
</code></pre><h5 id="passwd：帐号密码文件"><a href="#passwd：帐号密码文件" class="headerlink" title="passwd：帐号密码文件"></a>passwd：帐号密码文件</h5><pre><code>[users]
jason = 123
test = 123
test1 = 123
</code></pre><h5 id="svnserve-conf：SVN服务配置文件"><a href="#svnserve-conf：SVN服务配置文件" class="headerlink" title="svnserve.conf：SVN服务配置文件"></a>svnserve.conf：SVN服务配置文件</h5><pre><code>anon-access = none
auth-access = write
password-db = passwd
authz-db = authz
realm = test
</code></pre><h4 id="启动svn版本库"><a href="#启动svn版本库" class="headerlink" title="启动svn版本库"></a>启动svn版本库</h4><pre><code>svnserve -d -r /var/svn/svnrepos
svnserve -d -r /var/svn/svnrepos --listen-port 3390 #如果已经有svn在运行，可以换一个端口运行
</code></pre><h4 id="显示项目列表"><a href="#显示项目列表" class="headerlink" title="显示项目列表"></a>显示项目列表</h4><pre><code>svn list svn://127.0.0.1:3390/myproject
</code></pre><h4 id="删除项目或者文件"><a href="#删除项目或者文件" class="headerlink" title="删除项目或者文件"></a>删除项目或者文件</h4><pre><code>svn delete -m &quot;delete project&quot; svn://127.0.0.1/pinet
svn delete -m &quot;delete file&quot; svn://127.0.0.1/pinet/test.php
</code></pre><h4 id="SVN的基本操作命令"><a href="#SVN的基本操作命令" class="headerlink" title="SVN的基本操作命令"></a>SVN的基本操作命令</h4><pre><code>A = 已将一个文件添加到您的工作副本中。
U = 已更新您的工作副本中的一个文件。
D = 已从您的工作副本中删除一个文件。
R = 已替换您的工作副本中的一个文件。
G = 已成功合并了一个文件。
C = 一个文件已合并了必须手动解决的冲突
X =    未纳入版本控制的目录，但是与Subversion的外部定义关联，可以参考“外部定义”
? = 未纳入版本控制
! = 该项目已遗失(被非 svn 命令删除)或不完整
~ = 版本控制下的项目与其它类型的项目重名

1、svn add */file/dir  #添加文件或者文件夹，强制添加加上参数--force即可
2、svn commit -m “提交的信息”　#提交代码
3、svn update                    #获取代码
4、svn revert -R 文件或者文件夹 #恢复代码
5、svn status -u 　            #显示更新信息，包括当前版本
6、svn info                    #显示详细信息
</code></pre><h4 id="忽略文件或者文件夹"><a href="#忽略文件或者文件夹" class="headerlink" title="忽略文件或者文件夹"></a>忽略文件或者文件夹</h4><pre><code>忽略文件夹，则当前文件夹必须在版本库内，例如：uploads文件夹信息
/uploads
/uploads/banner
/uploads/banner/aaa
/uploads/activity
/uploads/activity/bbb

uploads必须已经在版本库中
1）、现在忽略uploads下的所有文件（包括文件、文件夹）
即：svn propset svn:ignore ‘*’ /uploads
2）、现在忽略uploads下的文件夹activity
即：svn propset svn:ignore ‘activity’ /uploads
3）、svn提交错误”svn丢失了预定增加的”
解决方案：svn revert –recursive .
</code></pre><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>当我们提交或更新SVN文件时，经常会遇到如下冲突提示:</p>
<pre><code>Select: (p) postpone, (df) diff-full, (e) edit, (r) resolved,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options:
</code></pre><p>输入 ‘s’ 显示所有选项</p>
<pre><code>Select: (p) postpone, (df) diff-full, (e) edit, (r) resolved,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options: s

(e)  - 在编辑器中修改合并后的文件  [edit]
(df) - 显示写入合并文件的所有改动
(r)  - 接受文件的合并版本
(dc) - 显示所有冲突 (忽略已合并版本)
(mc) - 对于所有冲突，使用我的版本 [mine-conflict]
(tc) - 对于所有冲突，使用他们的版本 [theirs-conflict]
(mf) - 整个文件使用我的版本(纵然没有冲突) [mine-full]
(tf) - 整个文件使用他们的版本 [theirs-full]
(m)  - 使用内部合并工具解决冲突
(l)  - 执行外部工具解决冲突 [launch]
(p)  - 编辑冲突推迟解决 [postpone]
(q)  - 推迟解决所有剩余的冲突
(s)  - 显示此列表(同 &apos;h&apos; 或 &apos;?&apos;)
</code></pre><p>根据不同需求进行选择操作，习惯的操作是先显示文件冲突的地方：<br><img src="/images/svn/svn-conflict-df.png" alt="svn冲突"></p>
<p>当选择‘p’时结果如下：<br><img src="/images/svn/svn-conflict-p.png" alt="svn冲突"></p>
<pre><code>a.php.mine             是冲突前自己的文件
a.php.版本号           是冲突前本地的版本文件
a.php.服务器的版本号   是冲突后服务器版本文件
冲突解决之后提交代码的时候，注意把这三个文件删除
</code></pre><h4 id="SVN标准目录结构"><a href="#SVN标准目录结构" class="headerlink" title="SVN标准目录结构"></a>SVN标准目录结构</h4><pre><code>myproject/
    trunk/
        pinet/
        test.php
    branches/
    tags/
</code></pre><p>1、创建分支<br>svn copy svn://192.168.11.110/myproject/trunk/pinet  svn://192.168.11.110/myproject/branches/pinet01 -m “create new branch”<br>2、分支合并<br>假设现在Branch上fix了一系列的bug，现在我们想把针对Branch的改变同步到Trunk上：<br>a)切换分支：svn switch svn://192.168.11.110/myproject/trunk/pinet<br>b)合并：svn merge svn://192.168.11.110/myproject/branches/pinet01<br>c)出现冲突则解决冲突问题，之后标记解决冲突：svn resolved file.txt或者svn resolve –accept working<br>d)查看当前Branch中已经有那些改动已经被合并到Trunk中:<br>svn mergeinfo svn://192.168.11.110/pinet/branches/pinet01<br>e)查看Branch中那些改动还未合并:<br>svn mergeinfo svn://192.168.11.110/pinet/branches/pinet01 –show-revs eligible</p>
]]></content>
      
        <categories>
            
            <category> SVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SVN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法]]></title>
      <url>http://jasonhzy.github.io/2016/02/19/sort-algorithm/</url>
      <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>&emsp;&emsp;<strong>排序(Sorting)</strong>是计算机程序设计中的一种重要操作，它的功能是将一个数据元素（或记录）的任意序列，重新排列成一个关键字有序的序列。排序有内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p>
<p>&emsp;&emsp;<strong>排序的稳定性</strong>：假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，ri=rj，且ri在rj之前，而在排序后的序列中，ri仍在rj之前，则称这种排序算法是稳定的；否则称为不稳定的。<br><a id="more"></a><br>算法性能比较如下图所示：</p>
<p><img src="/images/sort-algorithm/sort.png" alt="排序算法"></p>
<h3 id="排序算法归纳"><a href="#排序算法归纳" class="headerlink" title="排序算法归纳"></a>排序算法归纳</h3><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><h5 id="直接插入排序-Straight-Insertion-Sort"><a href="#直接插入排序-Straight-Insertion-Sort" class="headerlink" title="直接插入排序(Straight Insertion Sort)"></a>直接插入排序(Straight Insertion Sort)</h5><p><strong>基本思想</strong>：将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。<br>要点：设立哨兵，作为临时存储和判断数组边界之用。<br>直接插入排序示例：<br><img src="/images/sort-algorithm/straight_insertion.jpg" alt="排序示例"></p>
<p>如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，<font color="red">我所以插入排序是稳定的</font></p>
<p><strong>算法的实现</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span><span class="params">($a, $num)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span>($i= <span class="number">1</span>; $i&lt;$num; $i++) &#123;  </div><div class="line">		<span class="keyword">if</span>($a[$i] &lt; $a[$i<span class="number">-1</span>]) &#123;               <span class="comment">//若第i个元素大于i-1元素，直接插入。小于的话，移动有序表后插入  </span></div><div class="line">			$j= $i<span class="number">-1</span>;   </div><div class="line">			$x = $a[$i];        <span class="comment">//复制为哨兵，即存储待排序元素  </span></div><div class="line">			$a[$i] = $a[$i<span class="number">-1</span>];           <span class="comment">//先后移一个元素  </span></div><div class="line">			<span class="keyword">while</span>($x &lt; $a[$j])&#123;  <span class="comment">//查找在有序表的插入位置  </span></div><div class="line">				$a[$j+<span class="number">1</span>] = $a[$j];  </div><div class="line">				$j--;         <span class="comment">//元素后移  </span></div><div class="line">			&#125;  </div><div class="line">			$a[$j+<span class="number">1</span>] = $x; <span class="comment">//插入到正确位置</span></div><div class="line">		&#125;  </div><div class="line">		<span class="keyword">echo</span> $i . <span class="string">':'</span> . implode($a, <span class="string">','</span>).PHP_EOL; <span class="comment">//打印每趟排序的结果</span></div><div class="line">	&#125;  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertion_sort</span><span class="params">(&amp;$arr)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt; count($arr); $i++) &#123;</div><div class="line">		$temp = $arr[$i];</div><div class="line">		<span class="keyword">for</span> ($j = $i - <span class="number">1</span>; $j &gt;= <span class="number">0</span> &amp;&amp; $arr[$j] &gt; $temp; $j--)</div><div class="line">			$arr[$j + <span class="number">1</span>] = $arr[$j];</div><div class="line">	 	$arr[$j + <span class="number">1</span>] = $temp;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">echo</span> implode($arr, <span class="string">','</span>).PHP_EOL; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h5><p><strong>基本思想</strong><br>1）计算 0 ~ i-1 的中间点，用 i 索引处的元素与中间值进行比较，如果 i<br>引处的元素大，说明要插入的这个元素应该在中间值和刚加入i索引之间，反之，就是在刚开始的位置 到中间值的位置，这样很简单的完成了折半；<br>2）在相应的半个范围里面找插入的位置时，不断的用（1）步骤缩小范围，不停的折半，范围依次缩小为 1/2  1/4  1/8 …….快速的确定出第 i<br>个元素要插在什么地方；<br>3）确定位置之后，将整个序列后移，并将元素插入到相应位置。</p>
<p><strong>算法实现</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BInsertSort</span><span class="params">($arr, $count)</span>  </span>&#123; <span class="comment">/*对作折半插入排序。*/</span>  </div><div class="line">	<span class="keyword">for</span>($i=<span class="number">1</span>; $i&lt;$count; ++$i) 	&#123;  </div><div class="line">		$temp = $arr[$i]; <span class="comment">/* 将$arr[$i]暂存到$temp */</span>  </div><div class="line">		$low=<span class="number">0</span>;  </div><div class="line">		$high=$i<span class="number">-1</span>;  </div><div class="line">		<span class="keyword">while</span>($low&lt;=$high)  </div><div class="line">		&#123;</div><div class="line">			<span class="comment">/* 在$arr[low..high]中折半查找有序插入的位置 */</span>  </div><div class="line">			$mid= intval(($low+$high)/<span class="number">2</span>); <span class="comment">/* 折半 * */</span>  </div><div class="line">			<span class="keyword">if</span>($temp &lt; $arr[$mid])  </div><div class="line">				$high = $mid<span class="number">-1</span>; <span class="comment">/* 插入点在低半区* */</span>  </div><div class="line">			<span class="keyword">else</span>  </div><div class="line">				$low = $mid + <span class="number">1</span>; <span class="comment">/* 插入点在高半区* */</span>  </div><div class="line">		&#125;  </div><div class="line">		<span class="keyword">for</span>($j=$i<span class="number">-1</span>;$j&gt;=$mid;$j--)  </div><div class="line">			$arr[$j+<span class="number">1</span>]=$arr[$j]; <span class="comment">/* 记录后移 * */</span>  </div><div class="line">		$arr[$low]=$temp; <span class="comment">/* 插入 * */</span>  </div><div class="line">	&#125;  </div><div class="line">	<span class="keyword">echo</span> implode($arr,<span class="string">','</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="希尔排序（Shell-s-Sort）"><a href="#希尔排序（Shell-s-Sort）" class="headerlink" title="希尔排序（Shell`s Sort）"></a>希尔排序（Shell`s Sort）</h5><p>希尔排序是1959 年由D.L.Shell 提出来的，相对直接排序有较大的改进。希尔排序又叫缩小增量排序</p>
<p><strong>基本思想</strong><br>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。操作方法：<br>1、选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；<br>2、按增量序列个数k，对序列进行k 趟排序；<br>3、每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m<br>的子序列，分别对各子表进行直接插入排序。仅增量因子为1时，整个序列作为一个表来处理，表长度即为整个序列的长度。<br>希尔排序的示例：<br><img src="/images/sort-algorithm/shell-sort.jpg" alt="希尔排序"></p>
<p><strong>算法实现</strong></p>
<p>简单处理增量序列：增量序列d = {n/2 ,n/4, n/8 …..1} n为要排序数的个数<br>即：先将要排序的一组记录按某个增量d（n/2,n为要排序数的个数）分成若干组子序列，每组中记录的下标相差d.对每组中全部元素进行直接插入排序，然后再用一个较小的增量（d/2）对它进行分组，在每组中再进行直接插入排序。继续不断缩小增量直至为1，最后使用直接插入排序完成排序。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span><span class="params">($a)</span> </span>&#123;</div><div class="line">	$l = count($a);</div><div class="line">	$d = floor($l/<span class="number">2</span>);</div><div class="line">	<span class="keyword">while</span>($d&gt;=<span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">for</span>($i=$d; $i&lt;$l; $i++) &#123;</div><div class="line">			$t = $a[$i];</div><div class="line">			$j = $i-$d;<span class="comment">// 获取组内上一个数据 , 然后不断往前与当前数据比较</span></div><div class="line">			<span class="keyword">while</span>($j&gt;=<span class="number">0</span> &amp;&amp; $a[$j]&gt;$t)&#123;</div><div class="line">				$a[$j+$d] = $a[$j];</div><div class="line">				$j -= $d;</div><div class="line">			&#125;</div><div class="line">			$a[$j+$d] = $t;</div><div class="line">		&#125;</div><div class="line">		$d = floor($d/<span class="number">2</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> $a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><h5 id="简单选择排序（Simple-Selection-Sort）"><a href="#简单选择排序（Simple-Selection-Sort）" class="headerlink" title="简单选择排序（Simple Selection Sort）"></a>简单选择排序（Simple Selection Sort）</h5><p><strong>基本思想</strong>：在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。<br>第一趟，从n 个记录中找出关键码最小的记录与第一个记录交换；<br>第二趟，从第二个记录开始的n-1 个记录中再选出关键码最小的记录与第二个记录交换；<br>以此类推…..<br>第i 趟，则从第i个记录开始的n-i+1 个记录中选出关键码最小的记录与第i 个记录交换，直到整个序列按关键码有序。</p>
<p><strong>算法实现</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span><span class="params">($arr)</span> </span>&#123;</div><div class="line">	<span class="comment">//双重循环完成，外层控制轮数，内层控制比较次数</span></div><div class="line">	$len=count($arr);</div><div class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;$len<span class="number">-1</span>; $i++) &#123;</div><div class="line">        <span class="comment">//先假设最小的值的位置</span></div><div class="line">        $p = $i;</div><div class="line">        <span class="keyword">for</span>($j=$i+<span class="number">1</span>; $j&lt;$len; $j++) &#123;</div><div class="line">            <span class="comment">//$arr[$p] 是当前已知的最小值</span></div><div class="line">            <span class="keyword">if</span>($arr[$p] &gt; $arr[$j]) &#123;</div><div class="line">				<span class="comment">//比较，发现更小的,记录下最小值的位置；并且在下次比较时采用已知的最小值进行比较。</span></div><div class="line">                $p = $j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//已经确定了当前的最小值的位置，保存到$p中。如果发现最小值的位置与当前假设的位置$i不同，</span></div><div class="line">		<span class="comment">//则位置互换即可。</span></div><div class="line">        <span class="keyword">if</span>($p != $i) &#123;</div><div class="line">            $tmp = $arr[$p];</div><div class="line">            $arr[$p] = $arr[$i];</div><div class="line">            $arr[$i] = $tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//返回最终结果</span></div><div class="line">    <span class="keyword">return</span> $arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="二元选择排序-简单选择排序的改进"><a href="#二元选择排序-简单选择排序的改进" class="headerlink" title="二元选择排序(简单选择排序的改进)"></a>二元选择排序(简单选择排序的改进)</h5><p>简单选择排序，每趟循环只能确定一个元素排序后的定位。我们可以考虑改进为每趟循环确定两个元素（当前趟最大和最小记录）的位置,从而减少排序所需的循环次数。改进后对n个数据进行排序，最多只需进行[n/2]趟循环即可。具体实现如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">improve_selectSort</span><span class="params">(&amp;$arr, $n)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span>($i=<span class="number">1</span>; $i &lt;= $n/<span class="number">2</span>; $i++) &#123;    </div><div class="line">		<span class="comment">// 做不超过n/2趟选择排序   </span></div><div class="line">		$min = $i; </div><div class="line">		$max = $i ; <span class="comment">//分别记录最大和最小关键字记录位置  </span></div><div class="line">		<span class="keyword">for</span> ($j= $i+<span class="number">1</span>; $j&lt;= $n-$i; $j++) &#123;  </div><div class="line">			<span class="keyword">if</span> ($arr[$j] &gt; $arr[$max]) &#123;   </div><div class="line">				$max = $j ; <span class="keyword">continue</span> ;   </div><div class="line">			&#125;    </div><div class="line">			<span class="keyword">if</span> ($arr[$j]&lt; $arr[$min]) &#123;   </div><div class="line">				$min = $j ;   </div><div class="line">			&#125;     </div><div class="line">		&#125;    </div><div class="line">		<span class="comment">//该交换操作还可分情况讨论以提高效率  </span></div><div class="line">		$tmp = $arr[$i<span class="number">-1</span>]; $arr[$i<span class="number">-1</span>] = $arr[$min]; $arr[$min] = $tmp;  </div><div class="line">		$tmp = $arr[$n-$i]; $arr[$n-$i] = $arr[$max]; $arr[$max] = $tmp;   </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="堆排序（Heap-Sort）"><a href="#堆排序（Heap-Sort）" class="headerlink" title="堆排序（Heap Sort）"></a>堆排序（Heap Sort）</h5><p>堆排序是一种树形选择排序，是对直接选择排序的有效改进</p>
<p><strong>基本思想</strong>：堆的定义如下：具有n个元素的序列（k1,k2,…,kn),当且仅当满足<br><img src="/images/sort-algorithm/heap_sort0.jpg" alt="堆排序"></p>
<p>时称之为堆。由堆的定义可以看出，堆顶元素（即第一个元素）必为最小项（小顶堆）。<br>若以一维数组存储一个堆，则堆对应一棵完全二叉树，且所有非叶结点的值均不大于(或不小于)其子女的值，根结点（堆顶元素）的值是最小(或最大)的。如：</p>
<p>a)大顶堆序列：(96, 83,27,38,11,09)<br>b)小顶堆序列：(12，36，24，85，47，30，53，91)<br><img src="/images/sort-algorithm/heap_sort1.jpg" alt="堆排序"></p>
<p>初始时把要排序的n个数的序列看作是一棵顺序存储的二叉树（一维数组存储二叉树），调整它们的存储序，使之成为一个堆，将堆顶元素输出，得到n<br>个元素中最小(或最大)的元素，这时堆的根节点的数最小（或者最大）。然后对前面(n-1)个元素重新调整使之成为堆，输出堆顶元素，得到n<br>个元素中次小(或次大)的元素。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有n个节点的有序序列。称这个过程为堆排序。</p>
<p>因此，实现堆排序需解决两个问题：</p>
<ol>
<li>如何将n 个待排序的数建成堆；</li>
<li>输出堆顶元素后，怎样调整剩余n-1 个元素，使其成为一个新堆。</li>
</ol>
<p>首先讨论第二个问题：输出堆顶元素后，对剩余n-1元素重新建成堆的调整过程。<br>调整小顶堆的方法：</p>
<p>1）设有m 个元素的堆，输出堆顶元素后，剩下m-1<br>个元素。将堆底元素送入堆顶（（最后一个元素与堆顶进行交换），堆被破坏，其原因仅是根结点不满足堆的性质。</p>
<p>2）将根结点与左、右子树中较小元素的进行交换。</p>
<p>3）若与左子树交换：如果左子树堆被破坏，即左子树的根结点不满足堆的性质，则重复方法 （2）.</p>
<p>4）若与右子树交换，如果右子树堆被破坏，即右子树的根结点不满足堆的性质。则重复方法 （2）.</p>
<p>5）继续对不满足堆性质的子树进行上述交换操作，直到叶子结点，堆被建成。</p>
<p>称这个自根结点到叶子结点的调整过程为筛选。如图：<br><img src="/images/sort-algorithm/heap_sort2.jpg" alt="堆排序"></p>
<p>再讨论对n 个元素初始建堆的过程。<br>建堆方法：对初始序列建堆的过程，就是一个反复进行筛选的过程。</p>
<p>1）n 个结点的完全二叉树，则最后一个结点是第个结点的子树。</p>
<p>2）筛选从第个结点为根的子树开始，该子树成为堆。</p>
<p>3）之后向前依次对各结点为根的子树进行筛选，使之成为堆，直到根结点。</p>
<p>如图建堆初始过程：无序序列：（49，38，65，97，76，13，27，49）<br><img src="/images/sort-algorithm/heap_sort3.jpg" alt="堆排序"></p>
<p><strong>算法的实现</strong><br>从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> *   已知$arr[s…m]除了$arr[s] 外均满足堆的定义 </div><div class="line"> *   调整$arr[s],使其成为大顶堆.即将对第s个结点为根的子树筛选,  </div><div class="line"> *   </div><div class="line"> *   <span class="doctag">@param</span> $arr是待调整的堆数组 </div><div class="line"> *   <span class="doctag">@param</span> $s是待调整的数组元素的位置 </div><div class="line"> *   <span class="doctag">@param</span> $length是数组的长度 </div><div class="line"> *  */  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapAdjust</span><span class="params">(&amp;$arr, $s, $length)</span>  </span></div><div class="line">&#123;  </div><div class="line">	$tmp  = $arr[$s];  </div><div class="line">	$child = <span class="number">2</span>*$s+<span class="number">1</span>; <span class="comment">//左孩子结点的位置。($i+1 为当前调整结点的右孩子结点的位置)  </span></div><div class="line">	<span class="keyword">while</span> ($child &lt; $length) &#123;  </div><div class="line">		<span class="keyword">if</span>($child+<span class="number">1</span> &lt; $length &amp;&amp; $arr[$child] &lt; $arr[$child+<span class="number">1</span>]) &#123; <span class="comment">// 如果右孩子大于左孩子(找到比当前待调整结点大的孩子结点)  </span></div><div class="line">			++$child ;  </div><div class="line">		&#125;  </div><div class="line">		<span class="keyword">if</span>($arr[$s]&lt;$arr[$child]) &#123;  <span class="comment">// 如果较大的子结点大于父结点  </span></div><div class="line">			$arr[$s] = $arr[$child]; <span class="comment">// 那么把较大的子结点往上移动，替换它的父结点  </span></div><div class="line">			$s = $child;       <span class="comment">// 重新设置$s ,即待调整的下一个结点的位置 $i </span></div><div class="line">			$child = <span class="number">2</span>*$s+<span class="number">1</span>;  </div><div class="line">		&#125;  <span class="keyword">else</span> &#123;            <span class="comment">// 如果当前待调整结点大于它的左右孩子，则不需要调整，直接退出  </span></div><div class="line">			<span class="keyword">break</span>;  </div><div class="line">		&#125;  </div><div class="line">		$arr[$s] = $tmp;         <span class="comment">// 当前待调整的结点放到比其大的孩子结点位置上  </span></div><div class="line">	&#125;  </div><div class="line">	<span class="keyword">echo</span> implode(<span class="string">','</span>, $arr).PHP_EOL;</div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"> *  * 初始堆进行调整 </div><div class="line"> *   * 将$arr[0..length-1]建成堆 </div><div class="line"> *    * 调整完之后第一个元素是序列的最小的元素 </div><div class="line"> *     */  </div><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">buildingHeap</span><span class="params">( &amp;$arr , $length)</span>  </span></div><div class="line">&#123;   </div><div class="line">	<span class="comment">//最后一个有孩子的节点的位置 $i=  ($length -1) / 2  </span></div><div class="line">	<span class="keyword">for</span> ($i = ($length <span class="number">-1</span>) / <span class="number">2</span> ; $i &gt;= <span class="number">0</span>; --$i)  </div><div class="line">		heapAdjust($arr, $i, $length);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * 堆排序算法 </div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span><span class="params">( &amp;$arr, $length)</span>  </span></div><div class="line">&#123;  </div><div class="line">	<span class="comment">//初始堆  </span></div><div class="line">	buildingHeap($arr, $length);  </div><div class="line">	<span class="comment">//从最后一个元素开始对序列进行调整  </span></div><div class="line">	<span class="keyword">for</span> ($i = $length - <span class="number">1</span>; $i &gt; <span class="number">0</span>; --$i)  </div><div class="line">	&#123;  </div><div class="line">		<span class="comment">//交换堆顶元素H[0]和堆中最后一个元素  </span></div><div class="line">		$temp = $arr[$i]; $arr[$i] = $arr[<span class="number">0</span>]; $arr[<span class="number">0</span>] = $temp;  </div><div class="line">		<span class="comment">//每次交换堆顶元素和堆中最后一个元素之后，都要对堆进行调整  </span></div><div class="line">		heapAdjust($arr,<span class="number">0</span>,$i);  </div><div class="line">	&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h4><h5 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h5><p><strong>基本思想</strong>：在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。<br>冒泡排序的示例：<br><img src="/images/sort-algorithm/bubble _sort.jpg" alt="冒泡排序"></p>
<p><strong>算法的实现</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span><span class="params">(&amp;$arr, $n)</span></span>&#123;  </div><div class="line">	<span class="keyword">for</span>($i =<span class="number">0</span> ; $i&lt; $n<span class="number">-1</span>; ++$i) &#123;  </div><div class="line">		<span class="keyword">for</span>($j = <span class="number">0</span>; $j &lt; $n-$i<span class="number">-1</span>; ++$j) &#123;  </div><div class="line">			<span class="keyword">if</span>($arr[$j] &gt; $arr[$j+<span class="number">1</span>])  </div><div class="line">			&#123;  </div><div class="line">				$tmp = $arr[$j]; </div><div class="line">				$arr[$j] = $arr[$j+<span class="number">1</span>] ;</div><div class="line">				$arr[$j+<span class="number">1</span>] = $tmp;  </div><div class="line">			&#125;  </div><div class="line">		&#125;  </div><div class="line">	&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>冒泡排序算法的改进</strong><br>对冒泡排序常见的改进方法是加入一标志性变量exchange，用于标志某一趟排序过程中是否有数据交换，如果进行某一趟排序时并没有进行数据交换，则说明数据已经按要求排列好，可立即结束排序，避免不必要的比较过程。本文再提供以下两种改进算法：<br>1．设置一标志性变量$bFlag ,用于记录每趟排序中是否有位置交换，如果没有则直接结束外层循环，否则进行交换。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span><span class="params">($arr)</span></span>&#123;<span class="comment">//$arr(1...n)是待排序的文件，采用自下向上扫描，对$arr做冒泡排序</span></div><div class="line">    $bFlag = <span class="keyword">true</span>; <span class="comment">//交换标志</span></div><div class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;count($arr); $i++)&#123; <span class="comment">//最多做n-1趟排序</span></div><div class="line">        $bFlag = <span class="keyword">false</span>; <span class="comment">//本趟排序开始前，交换标志应为假</span></div><div class="line">        <span class="keyword">for</span>($j = count($arr)<span class="number">-2</span>; $j &gt;= $i; $j--)&#123; <span class="comment">//对当前无序区$arr[i..n]自下向上扫描</span></div><div class="line">            <span class="keyword">if</span>( $arr[$j+<span class="number">1</span>] &lt; $arr[$j] )&#123;<span class="comment">//交换记录</span></div><div class="line">                $temp = $arr[$j+<span class="number">1</span>]; <span class="comment">//$temp不是哨兵，仅做暂存单元</span></div><div class="line">                $arr[$j+<span class="number">1</span>] = $arr[$j];</div><div class="line">                $arr[$j] = $temp;</div><div class="line">                $bFlag = <span class="keyword">true</span>; <span class="comment">//发生了交换，故将交换标志置为真</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!$bFlag)&#123; <span class="comment">//本趟排序未发生交换，提前终止算法</span></div><div class="line">             <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="comment">//endfor(外循环)</span></div><div class="line">    print_r($arr);</div><div class="line">&#125; <span class="comment">//BubbleSort</span></div></pre></td></tr></table></figure></p>
<p>2.传统冒泡排序中每一趟排序操作只能找到一个最大值或最小值,我们考虑利用在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者), 从而使排序趟数几乎减少了一半。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span> <span class="params">( $arr, $n)</span></span>&#123;  </div><div class="line">	$low = <span class="number">0</span>;   </div><div class="line">	$high = $n <span class="number">-1</span>; <span class="comment">//设置变量的初始值  </span></div><div class="line">	<span class="keyword">while</span> ($low &lt; $high) &#123;  </div><div class="line">		<span class="keyword">for</span> ($j = $low; $j&lt; $high; ++$j) <span class="comment">//正向冒泡,找到最大者  </span></div><div class="line">			<span class="keyword">if</span> ($arr[$j]&gt; $arr[$j+<span class="number">1</span>]) &#123;  </div><div class="line">				$tmp = $arr[$j]; </div><div class="line">				$arr[$j]=$arr[$j+<span class="number">1</span>];</div><div class="line">				$arr[$j+<span class="number">1</span>]=$tmp;  </div><div class="line">			&#125;   </div><div class="line">		--$high;                 <span class="comment">//修改high值, 前移一位  </span></div><div class="line">		<span class="keyword">for</span> ( $j=$high; $j&gt;$low; --$j) <span class="comment">//反向冒泡,找到最小者  </span></div><div class="line">			<span class="keyword">if</span> ($arr[$j]&lt;$arr[$j<span class="number">-1</span>]) &#123;  </div><div class="line">				$tmp = $arr[$j]; </div><div class="line">				$arr[$j]=$arr[$j<span class="number">-1</span>];</div><div class="line">				$arr[$j<span class="number">-1</span>]=$tmp;  </div><div class="line">			&#125;  </div><div class="line">		++$low;                  <span class="comment">//修改low值,后移一位  </span></div><div class="line">	&#125;   </div><div class="line">	<span class="keyword">echo</span> implode(<span class="string">','</span>, $arr);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="交换排序-1"><a href="#交换排序-1" class="headerlink" title="交换排序"></a>交换排序</h4><h5 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h5><p><strong>基本思想</strong>：<br>1）选择一个基准元素,通常选择第一个元素或者最后一个元素,<br>2）通过一趟排序讲待排序的记录分割成独立的两部分，其中一部分记录的元素值均比基准元素值小。另一部分记录的<br>元素值比基准值大。<br>3）此时基准元素在其排好序后的正确位置<br>4）然后分别对这两部分记录用同样的方法继续进行排序，直到整个序列有序。</p>
<p>快速排序的示例：<br>（a）一趟排序的过程：<br><img src="/images/sort-algorithm/quick_sort1.jpg" alt="first quick sort"><br>（b）排序的全过程：<br><img src="/images/sort-algorithm/quick_sort2.jpg" alt="quick sort"></p>
<p><strong>算法的实现</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span><span class="params">($array)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (count( $array ) &lt;= <span class="number">1</span>) <span class="keyword">return</span> $array;</div><div class="line">    $key = $array [<span class="number">0</span>];</div><div class="line">    $left_arr = <span class="keyword">array</span> ();</div><div class="line">    $right_arr = <span class="keyword">array</span> ();</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>($i = <span class="number">1</span>; $i &lt; count( $array ); $i ++) &#123;</div><div class="line">        <span class="keyword">if</span> ($array [$i] &lt;= $key)</div><div class="line">            $left_arr [] = $array [$i];</div><div class="line">        <span class="keyword">else</span></div><div class="line">            $right_arr [] = $array [$i];</div><div class="line">    &#125;</div><div class="line">    $left_arr = quick_sort ( $left_arr );</div><div class="line">    $right_arr = quick_sort ( $right_arr );</div><div class="line">    <span class="keyword">return</span> array_merge ( $left_arr, <span class="keyword">array</span> ($key ), $right_arr );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>附：相关资料<br><a href="http://blog.csdn.net/hguisu/article/details/7776068" target="_blank" rel="external">八大排序算法</a></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql 数据库主从同步(Master-Slave)]]></title>
      <url>http://jasonhzy.github.io/2016/02/05/master-slave/</url>
      <content type="html"><![CDATA[<p><img src="/images/master-slave/master-slave.jpg" alt="原理图"></p>
<a id="more"></a>
<h2 id="主从复制的原理"><a href="#主从复制的原理" class="headerlink" title="主从复制的原理"></a>主从复制的原理</h2><blockquote>
<p>分为同步复制和异步复制，实际复制架构中大部分为异步复制。 复制的基本过程如下：<br>1).Slave上面的IO进程连接上Master，并请求从指定日志文件的指定位置（或者从最开始的日志）之后的日志内容；<br>2).Master接收到来自Slave的IO进程的请求后，通过负责复制的IO进程根据请求信息读取制定日志指定位置之后的日志信息，返回给Slave<br>的IO进程。返回信息中除了日志所包含的信息之外，还包括本次返回的信息已经到Master端的bin-log文件的名称以及bin-log的位置；<br>3).Slave的IO进程接收到信息后，将接收到的日志内容依次添加到Slave端的relay-log文件的最末端，并将读取到的Master端的<br>bin-log的文件名和位置记录到master-info文件中，以便在下一次读取的时候能够清楚的告诉Master“我需要从某个bin-log的哪个位置开始往后的日志内容，请发给我”；<br>4).Slave的Sql进程检测到relay-log中新增加了内容后，会马上解析relay-log的内容成为在Master端真实执行时候的那些可执行的内容，并在自身执行。</p>
</blockquote>
<h2 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h2><ul>
<li>OS：CentOS</li>
<li>主服务器master：192.168.11.120</li>
<li>从服务器slave：192.168.11.139</li>
</ul>
<h2 id="mysql主从配置"><a href="#mysql主从配置" class="headerlink" title="mysql主从配置"></a>mysql主从配置</h2><h3 id="mysql主服务器配置-master"><a href="#mysql主服务器配置-master" class="headerlink" title="mysql主服务器配置(master)"></a>mysql主服务器配置(master)</h3><p>master服务器配置:<br>vim /etc/my.cnf</p>
<pre><code>[mysqld]
server-id=120
log-bin=/var/lib/mysql/mysql-bin # 启用二进制日志
binlog-do-db=jasontest #指定数据库，如果不指定就是全部数据库
#binlog-ignore-db = mysql,information_schema #忽略写入binlog的库
</code></pre><p>重启服务器：</p>
<pre><code>service mysqld  restart #systemctl restart mysqld.service --- centos7.x重启mysql
</code></pre><p>在主服务器上建立帐户并授权slave：</p>
<pre><code>#创建slave帐号，密码123456
mysql&gt; GRANT REPLICATION SLAVE ON *.* to &apos;slave&apos;@&apos;192.168.11.%&apos; identified by &apos;123456&apos; WITH GRANT OPTION; 
#更新数据库权限
mysql&gt;flush privileges;
</code></pre><p>查询master的状态：</p>
<pre><code>mysql&gt; show master status;
</code></pre><p>显示结果：<br>        <img src="/images/master-slave/master-status.png" alt="slave status"></p>
<p>注：执行完这个步骤后不要再操作主数据库了，防止主数据库状态值变化</p>
<h3 id="mysql从服务器配置-slave"><a href="#mysql从服务器配置-slave" class="headerlink" title="mysql从服务器配置(slave)"></a>mysql从服务器配置(slave)</h3><p>slave服务器配置:<br>vim /etc/my.cnf</p>
<pre><code>[mysqld]
server-id=139
log-bin=/var/lib/mysql/mysql-bin # 启用二进制日志
binlog-do-db=jasontest #指定数据库，如果不指定就是全部数据库
</code></pre><p>重启服务器：</p>
<pre><code>service mysqld  restart #systemctl restart mysqld.service --- centos7.x重启mysql
</code></pre><p>设置同步源：</p>
<pre><code>mysql&gt; CHANGE MASTER TO MASTER_HOST=&apos;192.168.11.120&apos;, #主服务器master的ip
    MASTER_USER=&apos;slave&apos;,
    MASTER_PASSWORD=&apos;123456&apos;,
    MASTER_LOG_FILE=&apos;mysql-bin.000022&apos;,  #对应show master status中File
    MASTER_LOG_POS=245;                     #对应show master status中Position
</code></pre><p>启用同步：</p>
<pre><code>mysql&gt;start slave
</code></pre><p>停止同步：</p>
<pre><code>mysql&gt;stop slave
</code></pre><p>检查从服务器状态：</p>
<pre><code>mysql&gt; SHOW SLAVE STATUS\G;
</code></pre><p>显示结果：<br>    <img src="/images/master-slave/slave-status.png" alt="slave status"></p>
<p><strong>注意：</strong>Slave_IO_Running及Slave_SQL_Running进程必须正常运行，即YES状态，否则说明同步失败</p>
<p>下面介绍几个比较关键的参数，全面的说明可阅读<a href="https://dev.mysql.com/doc/refman/5.5/en/show-slave-status.html" target="_blank" rel="external">参考手册</a>。</p>
<ul>
<li>Slave_IO_Running: IO线程是否正常运行</li>
<li>Slave_SQL_Running: SQL线程是否正常运行</li>
<li>Master_Log_File: IO线程正在读取的主服务器日志文件</li>
<li>Read_Master_Log_Pos: IO线程正在读取的主服务器日志文件的位置</li>
<li>Relay_Log_File: SQL线程正在读取和执行的本地日志文件</li>
<li>Relay_Log_Pos: SQL线程正在读取和执行的本地日志文件的位置</li>
<li>Relay_Master_Log_File: SQL线程正在重演的事件所在的主服务器日志文件</li>
<li>Exec_Master_Log_Pos: SQL线程正在重演的事件在主服务器日志文件中的位置</li>
<li>Seconds_Behind_Master:如果网络没有明显的延迟，该参数标志着SQL线程的事件重演速度。如果该值较大且不断递增，调整<a href="https://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit" target="_blank" rel="external">innodb_flush_log_at_trx_commit</a>会有比较明显的效果，但是可能会在MySQL进程崩溃时丢失数据。</li>
</ul>
<h3 id="mysql数据库同步验证"><a href="#mysql数据库同步验证" class="headerlink" title="mysql数据库同步验证"></a>mysql数据库同步验证</h3><p>主从数据库设置工作已经完成，可以在master新建数据库和表，插入和修改数据，查看slave是否获得同步，测试一下是否成功。</p>
<h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><p>1、Slave_IO_Running: No Slave_SQL_Running: No</p>
<pre><code>需要开启slave，即：start slave
</code></pre><p>2、Slave_IO_Running: No Slave_SQL_Running: Yes</p>
<pre><code>出现error，如Last_IO_Error: error connecting to master &apos;slave@192.168.11.120:3306&apos; - retry-time: 60  retries: 86400
</code></pre><p>解决方案：</p>
<pre><code>1).mysql -h192.168.11.120 -uslave  -p
如果出现ERROR 2003 (HY000): Can&apos;t connect to MySQL server on &apos;192.168.11.120&apos; (113) 说明服务器不允许远程访问

2).netstat -an | grep 3306
查看是否开启远程访问的端口3306

3).centos下配置开启3306端口：
centos7.x下：
vim /etc/firewalld/zones/public.xml 添加3306端口：

&lt;zone&gt;
    &lt;short&gt;Public&lt;/short&gt;
    &lt;description&gt;For use in public areas. You do not trust the other computers on networks 
        to not harm your computer. Only selected incoming connections are accepted.&lt;/description&gt;
    &lt;service name=&quot;dhcpv6-client&quot;/&gt;
    &lt;service name=&quot;ssh&quot;/&gt;
    &lt;service name=&quot;http&quot;/&gt;
    &lt;port protocol=&quot;tcp&quot; port=&quot;3306&quot;/&gt;
&lt;/zone&gt;
重启firewalld：systemctl restart firewalld.service

centos6.x下：
vim /etc/sysconfig/iptables 添加3306端口：

-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT   #允许80端口通过防火墙
-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT   #允许3306端口通过防火墙
-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT

如果/etc/my.cnf或者/etc/mysql/my.cnf配置文件中有bind-address，则需要修改配置：
（1）注释掉 即：#bind-address=127.0.0.1
（2）修改为：bind-addess=192.168.11.120 即本机的ip
（3）修改为：bind-address=0.0.0.0
</code></pre>]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How to Keep Alive SSH Sessions]]></title>
      <url>http://jasonhzy.github.io/2016/02/03/ssh-alive/</url>
      <content type="html"><![CDATA[<p>Many NAT firewalls time out idle sessions after a certain period of time to keep their trunks clean. Sometimes the interval between session drops is 24 hours, but on many commodity firewalls, connections are killed after as little as 300 seconds. To avoid having your SSH sessions become unresponsive after e.g. 5 minutes, do the following:<br><a id="more"></a></p>
<h2 id="On-Windows-PuTTY"><a href="#On-Windows-PuTTY" class="headerlink" title="On Windows (PuTTY) "></a>On Windows (PuTTY) <img src="/images/ssh/putty.png" alt="putty"></h2><p>In your session properties, go to Connection and under Sending of null packets to keep session active, set Seconds between keepalives (0 to turn off)<br>to e.g. 300 (5 minutes).</p>
<h2 id="On-Linux-ssh"><a href="#On-Linux-ssh" class="headerlink" title="On Linux (ssh) "></a>On Linux (ssh) <img src="/images/ssh/konsole.png" alt="terminal"></h2><p>To enable the keep alive system-wide (root access required), edit <strong>/etc/ssh/ssh_config</strong>; to set the settings for just your user, edit<br><strong>~/.ssh/config</strong>(create the file if it doesn’t exist). Insert the following:</p>
<pre><code>Host *
    ServerAliveInterval 300
    ServerAliveCountMax 2
</code></pre><p>You can also make your OpenSSH server keep alive all connections with clients by adding the following to <strong>/etc/ssh/sshd_config</strong>:</p>
<pre><code>ClientAliveInterval 300
ClientAliveCountMax 2
</code></pre><p>These settings will make the SSH client or server send a null packet to the other side every <strong>300 seconds</strong> (5 minutes), and give up if it doesn’t receive any response after <strong>2 tries</strong>, at which point the connection is likely to have been discarded anyway.<br>From the <strong>ssh_config</strong> man page:</p>
<blockquote>
<p><strong>ServerAliveCountMax</strong><br>Sets the number of server alive messages (see below) which may be sent without ssh(1) receiving any messages back from the server. If this threshold is reached while server alive messages are being sent, ssh will disconnect from the server, terminating the session. It is important to note that the use of server alive messages is very different from TCPKeepAlive (below). The server alive messages are sent through the encrypted channel and therefore will not be spoofable. The TCP keepalive option enabled by TCPKeepAlive is spoofable. The server alive mechanism is valuable when the client or server depend on knowing when a connection has become inactive.</p>
<p>The default value is 3. If, for example, ServerAliveInterval (see below) is set to 15 and ServerAliveCountMax is left at the default, if the server becomes unresponsive, ssh will disconnect after approximately 45 seconds. This option applies to protocol version 2 only; in protocol version 1 there is no mechanism to request a response from the server to the server alive messages, so disconnection is the responsibility of the TCP stack.</p>
<p><strong>ServerAliveInterval</strong><br>Sets a timeout interval in seconds after which if no data has been received from the server, ssh(1) will send a message through the encrypted channel to request a response from the server. The default is 0, indicating that these messages will not be sent to the server, or 300 if the BatchMode option is set. This option applies to protocol version 2 only. ProtocolKeepAlives and SetupTimeOut are Debian-specific compatibility aliases for this option.</p>
</blockquote>
<p>文章摘自：<a href="https://patrickmn.com/aside/how-to-keep-alive-ssh-sessions/" target="_blank" rel="external">How to Keep Alive SSH Sessions</a></p>
]]></content>
      
        <categories>
            
            <category> SSH </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git基本命令]]></title>
      <url>http://jasonhzy.github.io/2016/02/03/git-tech/</url>
      <content type="html"><![CDATA[<h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><p><img src="/images/git.jpg" alt="Git command"></p>
<a id="more"></a>
<h3 id="安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中"><a href="#安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中" class="headerlink" title="安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中"></a>安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中</h3><pre><code>git config --global user.name &quot;jasonhzy&quot;
git config --global user.email &quot;lotush@163.com&quot;
</code></pre><p>检查你的设置(Checking Your Settings) 命令：</p>
<pre><code>git config --list
　　user.name=Scott Chacon
　　user.email=schacon@gmail.com
　　color.status=auto
　　color.branch=auto
　　color.interactive=auto
　　color.diff=auto
　　...
</code></pre><h3 id="创建一个本地仓库的克隆版本"><a href="#创建一个本地仓库的克隆版本" class="headerlink" title="创建一个本地仓库的克隆版本"></a>创建一个本地仓库的克隆版本</h3><p>初始化Git仓库</p>
<pre><code>git init --bare xxxx.git #xxx.git即仓库名称    
</code></pre><p>克隆代码仓库</p>
<pre><code>git clone https://github.com/PinetTech/pinet-wechat.git &lt;指定目录&gt;
</code></pre><p>克隆指定分支(jason分支)</p>
<pre><code>git clone -b jason https://github.com/PinetTech/pinet-wechat.git
</code></pre><h3 id="添加文件到缓冲区"><a href="#添加文件到缓冲区" class="headerlink" title="添加文件到缓冲区"></a>添加文件到缓冲区</h3><pre><code>git add &lt;filename&gt;或者git add *
</code></pre><h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><pre><code>git commit -m &quot;代码提交信息&quot;
</code></pre><p>对于已经修改提交过的注释，如果需要修改</p>
<pre><code>git commit --amend
</code></pre><h3 id="你的改动现在已经在本地仓库的-HEAD-中了。执行如下命令以将这些改动提交到远端仓库"><a href="#你的改动现在已经在本地仓库的-HEAD-中了。执行如下命令以将这些改动提交到远端仓库" class="headerlink" title="你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库"></a>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库</h3><pre><code>git push origin &lt;branchName&gt;
</code></pre><h3 id="可以把-master-换成想要推送的任何分支，创建分支并切换过去"><a href="#可以把-master-换成想要推送的任何分支，创建分支并切换过去" class="headerlink" title="可以把 master 换成想要推送的任何分支，创建分支并切换过去"></a>可以把 master 换成想要推送的任何分支，创建分支并切换过去</h3><pre><code>git checkout -b &lt;branchName&gt;
</code></pre><p>切换回某个分支：</p>
<pre><code>git checkout &lt;branchName&gt;
</code></pre><h3 id="创建、查看、删除、重命名分支"><a href="#创建、查看、删除、重命名分支" class="headerlink" title="创建、查看、删除、重命名分支"></a>创建、查看、删除、重命名分支</h3><p>创建分支：</p>
<pre><code>git branch &lt;branchName&gt;
</code></pre><p>查看分支：</p>
<pre><code>git branch #查看本地分支
git branch -a #查看远程分支
</code></pre><p>删掉新建的分支(本地分支)：</p>
<pre><code>git branch -d &lt;branchName&gt;
</code></pre><p>删除远程分支:</p>
<pre><code>git push origin --delete &lt;branchName&gt; 或者 git push origin :&lt;branchName&gt;
</code></pre><p>重命名本地分支：</p>
<pre><code>git branch -m &lt;old_branch_name&gt; &lt;new_branch_name&gt;
</code></pre><p>删除不存在对应远程分支的本地分支:</p>
<pre><code>git remote prune origin或者git fetch -p
</code></pre><h3 id="git上修改后还原所有的"><a href="#git上修改后还原所有的" class="headerlink" title="git上修改后还原所有的"></a>git上修改后还原所有的</h3><pre><code>git reset --hard
</code></pre><h3 id="提交之前撤销add操作"><a href="#提交之前撤销add操作" class="headerlink" title="提交之前撤销add操作"></a>提交之前撤销add操作</h3><pre><code>git reset HEAD 或者    git revert HEAD --no-commit
</code></pre><h3 id="查看文件被谁改动"><a href="#查看文件被谁改动" class="headerlink" title="查看文件被谁改动"></a>查看文件被谁改动</h3><pre><code>git blame FILE
</code></pre><h3 id="还原已经add或commit的"><a href="#还原已经add或commit的" class="headerlink" title="还原已经add或commit的"></a>还原已经add或commit的</h3><p>git log 命令查看提交的历史记录<br>在Git中，用HEAD表示当前版本，也就是最新的提交(commit)，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100，例如回退到上一个版本：</p>
<pre><code>git reset HEAD^/commit id
#改变本地HEAD的指针还原到工作区，即已经提交的可以恢复到当前工作区，可以再次修改提交
git reset --hard HEAD^/commit id
#强制移动指针到这个分支，会销毁它前面的所有的信息，本地也没有了，即不可恢复到工作区进行修改了
</code></pre><p><strong>注意</strong>:<br>1).新建的文件和目录，且从未提交至版本库.此类文件的状态为Untracked files ，撤销方法如下:</p>
<pre><code>git clean -fd . #其中的.表示当前目录及所有子目录中的文件，也可以直接指定对应的文件路径
</code></pre><p>2)提交过版本库，但未提交至暂存区的文件（未执行git add）,此类文件的状态为Changes not staged for commit，撤销方法:</p>
<pre><code>git checkout . #其中的.表示当前目录及所有子目录中的文件，也可以直接指定对应的文件路径
</code></pre><h3 id="恢复到某个版本"><a href="#恢复到某个版本" class="headerlink" title="恢复到某个版本"></a>恢复到某个版本</h3><p>git reflog用来记录每一次操作的命令，记录着每次操作的commit_id<br>如果回退到某个版本:</p>
<pre><code>git reset --hard &lt;commit id&gt;
git revert &lt;commit id&gt;
</code></pre><h3 id="忽略已跟踪文件的改动"><a href="#忽略已跟踪文件的改动" class="headerlink" title="忽略已跟踪文件的改动"></a>忽略已跟踪文件的改动</h3><p>有时需让git忽略某个文件的更新，比如配置文件</p>
<pre><code>git update-index --assume-unchanged /path/to/filgit old-branchese #忽略跟踪
git update-index --no-assume-unchanged /path/to/file  #恢复跟踪
</code></pre><h3 id="Git补丁管理-方便在多台机器上开发同步时用"><a href="#Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a>Git补丁管理(方便在多台机器上开发同步时用)</h3><p>生成补丁:</p>
<pre><code>git diff &gt; ../sync.patch
</code></pre><p>打补丁:</p>
<pre><code>git apply ../sync.patch
</code></pre><p>测试补丁能否成功:</p>
<pre><code>git apply --check  ../sync.patch
</code></pre><p>注意：在相同分支下操作</p>
<h3 id="Pull-远程分支"><a href="#Pull-远程分支" class="headerlink" title="Pull 远程分支"></a>Pull 远程分支</h3><p>Pull 远程分支是指，取回远程服务器上某个分支的更新，再与本地的指定分支合并。其格式为：</p>
<pre><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;
</code></pre><p>例如：取回 origin 主机的 dev 分支，与本地的 master 分支合并</p>
<pre><code>git pull origin dev:master
</code></pre><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略：</p>
<pre><code>git pull origin dev
</code></pre><p>如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，<br>由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。但是，你可以改变这个行为，加上参数-p<br>就会在本地删除远程已经删除的分支。</p>
<pre><code>git pull -p
</code></pre><h3 id="Git-push到多个远程库"><a href="#Git-push到多个远程库" class="headerlink" title="Git push到多个远程库"></a>Git push到多个远程库</h3><pre><code>git remote add origin git@github.com:looly/hutool.git #远程仓库1
git remote add osc git@git.oschina.net:loolly/hutool.git #远程仓库2
git add . 
git commit -m &apos;First commit&apos; 
git push origin master
git push osc master

git remote rm   [alias]      #删除一个别名,eg:origin osc
git remote rename [old-alias] [new-alias] #重命名,eg:git remote rename osc test
git remote show [主机名] #加上主机名，可以查看该主机的详细信息
</code></pre><h3 id="远程url切换"><a href="#远程url切换" class="headerlink" title="远程url切换"></a>远程url切换</h3><pre><code>git remote set-url origin &lt;URL&gt; #origin是可以替换的
</code></pre><h3 id="在已忽略文件夹中不忽略指定文件夹，例如："><a href="#在已忽略文件夹中不忽略指定文件夹，例如：" class="headerlink" title="在已忽略文件夹中不忽略指定文件夹，例如："></a>在已忽略文件夹中不忽略指定文件夹，例如：</h3><pre><code>themes/*
!themes/jacman/
</code></pre><p>注意点：</p>
<ul>
<li>空行不匹配任何内容,所以可以作为块分隔符；</li>
<li># 开头表示注释,如果相匹配 #,可以在前面加一个反斜杠,即 #</li>
<li>除非加了反斜杠,否则一连串的空格会被忽略；</li>
<li>如果在匹配的内容前面加上 ! ,则这些匹配过的部分将被移出,如果要匹配以 ! 开头的内容,需要加上反斜杠,如 !important.txt</li>
<li>如果一个匹配 pattern 后面有一个斜杠,如 foo/,则默认会匹配所有（包含父子文件夹）中的 foo 文件夹内容</li>
<li>如果一个匹配 pattern 不包含斜杠,如 foo,Git 会将其作为一个 shell 的查找命令匹配内容</li>
</ul>
<h3 id="Git查看、删除、重命名tag"><a href="#Git查看、删除、重命名tag" class="headerlink" title="Git查看、删除、重命名tag"></a>Git查看、删除、重命名tag</h3><p>创建tag：</p>
<pre><code>git tag &lt;tagname&gt; 或者 git tag -a &lt;tagname&gt; -m &quot;create tag desc&quot;
</code></pre><p>把本地tag推送到远程：</p>
<pre><code>git push --tags
</code></pre><p>获取远程tag</p>
<pre><code>git fetch origin tag &lt;tagname&gt;
</code></pre><p>删除tag：</p>
<pre><code>git tag -d &lt;tagname&gt;   #删除本地tag
git push origin --delete tag &lt;tagname&gt; #删除远程tag
git push origin :refs/tags/&lt;tagname&gt;  #删除远tag
</code></pre><h3 id="用diff来检查改动"><a href="#用diff来检查改动" class="headerlink" title="用diff来检查改动"></a>用diff来检查改动</h3><p><img src="/images/git-diff.jpg" alt="git diff"></p>
<p>比较分支和版本</p>
<p>比较两个分支，或是两个特定项目版本。来让我们看看在 “jason” 分支的哪些改动并不存在于“master”上：</p>
<pre><code>git diff master..jason
</code></pre><p>这些比较信息仅仅是在分支层面上的，你也可以比较任意的两个项目版本之间的内容：</p>
<pre><code>git diff 0023cdd..fcd6199
</code></pre><h2 id="Git支持四种数据传输协议，四种传输协议各自的优势和不足"><a href="#Git支持四种数据传输协议，四种传输协议各自的优势和不足" class="headerlink" title="Git支持四种数据传输协议，四种传输协议各自的优势和不足"></a>Git支持四种数据传输协议，四种传输协议各自的优势和不足</h2><table>
<thead>
<tr>
<th>传输协议</th>
<th>优势</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>本地传输</td>
<td>1. 远程仓库部署在本地目录，Git client-server之间的数据通信类似本地文件的复制剪切，数据的通信速度较快；2.资源的权限沿用本地操作系统的文件权限和网络访问权限，不需要单独配置。</td>
<td>1.由于远程仓库在本地目录，资源毁灭性丢失的危险性增大。</td>
</tr>
<tr>
<td>ssh协议(安全外壳传输协议ssh://)</td>
<td>1.服务搭建相对较简单；2.基于公钥私钥对的方式进行加密授权数据传输；3.同时支持数据的读和写操作。</td>
<td>1.不支持匿名访问，必须通过ssh访问主机才能读写仓库。</td>
</tr>
<tr>
<td>Git协议(git://)</td>
<td>1.自身携带的传输协议，传输速度最快的协议；2.使用类似ssh相同的数据传输机制，但取消了加密解密的开销。</td>
<td>1.没有授权机制，要么所有客户端都可读，要么所有客户端都可写，不能根据情况选择性配置读写权限；2.服务搭建相对较复杂。</td>
</tr>
<tr>
<td>http/https协议（超文本传输协议）</td>
<td>1.服务搭建相对较简单，基于Apache等web容器就可以实现；2.授权机制简单，能够访问Git仓库所在服务器的web服务的人都可以获取远程仓库资源。</td>
<td>1. 数据通信网络开销较大；2. 执行写操作需要基于ssh协议。</td>
</tr>
</tbody>
</table>
<h2 id="常见解决问题方案"><a href="#常见解决问题方案" class="headerlink" title="常见解决问题方案"></a>常见解决问题方案</h2><p>1.git add添加要提交的文件的时候，如果文件名是中文，会显示形如274\232\350\256\256\346\200\273\347\273\223.png 的乱码,core.quotepath设为false的话，就不会对0x80以上的字符进行quote,中文显示正常。有两种解决方案：<br>1）利用git命令配置core.quotepath为false</p>
<pre><code>git config --global core.quotepath false
</code></pre><p>2）修改 ~/.gitconfig，找到 [core] 的位置後面，加上：</p>
<pre><code>[core]
    quotepath = false
</code></pre><p>附：相关资料</p>
<ul>
<li><a href="http://www.bootcss.com/p/git-guide/" target="_blank" rel="external">git - 简易指南</a>  </li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">git 官网</a></li>
<li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">猴子都能懂的git入门</a></li>
<li><a href="/download/msysGit.png">msysGit</a></li>
<li><a href="/download/git.jpeg">Git学习</a></li>
<li><a href="http://zengrong.net/post/1249.htm" target="_blank" rel="external">git乱码解决方案汇总</a></li>
<li><a href="https://www.zybuluo.com/phper/note/223883" target="_blank" rel="external">git reset&amp;revert</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vim IDE搭建]]></title>
      <url>http://jasonhzy.github.io/2016/02/03/vim-ide/</url>
      <content type="html"><![CDATA[<p>VIM IDE界面：<br><img src="/images/vim-ide.png" alt="vim ide"></p>
<a id="more"></a>
<p>.vimrc基本配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div></pre></td><td class="code"><pre><div class="line"> <span class="string">"开启语法高亮功能</span></div><div class="line"> syntax enable</div><div class="line"> "允许用指定语法高亮配色方案替换默认方案</div><div class="line"> syntax on</div><div class="line"></div><div class="line"> <span class="built_in">set</span> nocompatible <span class="string">" not compatible with vi</span></div><div class="line"> set autoread " detect when a file is changed</div><div class="line"></div><div class="line"> <span class="string">" make backspace behave in a sane manner</span></div><div class="line"> set backspace=indent,eol,start</div><div class="line"></div><div class="line"> " <span class="built_in">set</span> a map leader <span class="keyword">for</span> more key combos</div><div class="line"> <span class="built_in">let</span> mapleader = <span class="string">','</span></div><div class="line"> <span class="built_in">let</span> g:mapleader = <span class="string">','</span></div><div class="line"></div><div class="line"></div><div class="line"> <span class="string">"可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）</span></div><div class="line"> if has('mouse')</div><div class="line">  set mouse=a</div><div class="line"> endif</div><div class="line"> "<span class="built_in">set</span> selection=exclusive</div><div class="line"> <span class="string">"set selectmode=mouse,key  </span></div><div class="line"></div><div class="line"> "显示行号</div><div class="line"> <span class="built_in">set</span> nu</div><div class="line"></div><div class="line"> <span class="built_in">set</span> shiftwidth=4 <span class="string">" 设定 &lt;&lt; 和 &gt;&gt; 命令移动时的宽度为 4</span></div><div class="line"> set shiftround " round indent to a multiple of <span class="string">'shiftwidth'</span></div><div class="line"> <span class="built_in">set</span> softtabstop=4 <span class="string">" 使得按退格键时可以一次删掉 4 个空格</span></div><div class="line"> set tabstop=4 " 设定 tab 长度为 4</div><div class="line"> <span class="string">"set expandtab</span></div><div class="line"> set showmatch        " 设置匹配模式，显示匹配的括号</div><div class="line"></div><div class="line"> <span class="built_in">set</span> hlsearch <span class="string">"highlight searches</span></div><div class="line"> set incsearch "<span class="keyword">do</span> incremental searching</div><div class="line"> <span class="built_in">set</span> ignorecase</div><div class="line"></div><div class="line"> <span class="built_in">set</span> wrap <span class="string">"turn on line wrapping</span></div><div class="line"> set wrapmargin=8 " wrap lines when coming within n characters from side</div><div class="line"> <span class="built_in">set</span> linebreak <span class="string">" set soft wrapping</span></div><div class="line"></div><div class="line"> </div><div class="line"> set autoindent " automatically <span class="built_in">set</span> indent of new line</div><div class="line"> <span class="string">"set smartindent        "</span> 智能对齐方式</div><div class="line"></div><div class="line"></div><div class="line"> <span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></div><div class="line"> " =&gt; vim支持多种折叠：</div><div class="line"> <span class="string">"		手动建立折叠（manual）、</span></div><div class="line"> "		基于缩进进行折叠（indent）、</div><div class="line"> <span class="string">"		基于语法进行折叠（syntax）、</span></div><div class="line"> "		未更改文本构成折叠（diff）等</div><div class="line"> <span class="string">" =&gt; 折叠快捷方式： </span></div><div class="line"> "		za 打开或关闭当前折叠</div><div class="line"> <span class="string">"		zM 关闭所有折叠</span></div><div class="line"> "		zR 打开所有折叠</div><div class="line"> <span class="string">"		zc 折叠</span></div><div class="line"> "		zC 对所在范围内所有嵌套的折叠点进行折叠</div><div class="line"> <span class="string">"		zo 展开折叠</span></div><div class="line"> "		zO 对所在范围内所有嵌套的折叠点展开</div><div class="line"> <span class="string">"		[z 到当前打开的折叠的开始处。</span></div><div class="line"> "		]z 到当前打开的折叠的末尾处。</div><div class="line"> <span class="string">"		zj 向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。</span></div><div class="line"> "		zk 向上移动到前一折叠的结束处。关闭的折叠也被计入。</div><div class="line"> <span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></div><div class="line"> " 基于缩进进行代码折叠</div><div class="line"> <span class="built_in">set</span> foldmethod=indent</div><div class="line"> <span class="string">" 启动 vim 时关闭折叠代码</span></div><div class="line"> set nofoldenable</div><div class="line"></div><div class="line">  </div><div class="line"> "<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></div><div class="line"> <span class="string">" =&gt; Files, backups, and undo</span></div><div class="line"> "<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></div><div class="line"> <span class="string">"</span></div><div class="line"> "<span class="built_in">set</span> nobackup</div><div class="line"> <span class="string">"set nowritebackup</span></div><div class="line"> "禁止生成临时文件,*.swp</div><div class="line"> <span class="built_in">set</span> noswapfile</div><div class="line"> <span class="built_in">set</span> backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp</div><div class="line"> <span class="built_in">set</span> directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp</div><div class="line"></div><div class="line"> <span class="string">"在编辑过程中，在右下角显示光标位置的状态行</span></div><div class="line"> set ruler</div><div class="line"></div><div class="line"> "<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></div><div class="line"> <span class="string">" =&gt; StatusLine</span></div><div class="line"> " <span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></div><div class="line"> set laststatus=2 " show the satus line all the time</div><div class="line"></div><div class="line"></div><div class="line"> <span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></div><div class="line"> " =&gt; Mappings</div><div class="line"> <span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></div><div class="line"> " General mappings/shortcuts <span class="keyword">for</span> functionality</div><div class="line"> <span class="string">" Additional, plugin-specific mappings are located under</span></div><div class="line"> " the plugins section</div><div class="line"> <span class="string">"Close the current buffer</span></div><div class="line"> noremap &lt;C-d&gt; :q&lt;cr&gt;</div><div class="line"></div><div class="line"> "不显示行号 </div><div class="line"> nmap &lt;F3&gt; :<span class="built_in">set</span> nu!&lt;CR&gt;</div><div class="line"></div><div class="line"> <span class="string">"撤销修改</span></div><div class="line"> nnoremap &lt;S-z&gt; &lt;ESC&gt;u&lt;cr&gt;</div><div class="line"> inoremap &lt;S-z&gt; &lt;ESC&gt;u&lt;cr&gt;</div><div class="line"> vnoremap &lt;S-z&gt; &lt;ESC&gt;u&lt;cr&gt;</div><div class="line"></div><div class="line"> map &lt;C-a&gt; ggVG</div><div class="line"> map! &lt;C-a&gt; ggVG</div><div class="line"> vnoremap &lt;C-c&gt; "+y</div><div class="line"> <span class="string">"map &lt;C-v&gt; "</span>+p</div><div class="line"> map &lt;C-S-x&gt; gU</div><div class="line"> map &lt;c<span class="_">-s</span>-y&gt; gu</div><div class="line"></div><div class="line"> <span class="string">"使用箭头导航buffer"</span></div><div class="line"> map &lt;S-right&gt; :bn&lt;cr&gt;</div><div class="line"> map &lt;S-left&gt; :bp&lt;cr&gt;</div><div class="line"> <span class="built_in">set</span> autowrite <span class="string">"在切换buffer时自动保存当前的文件</span></div><div class="line"></div><div class="line"> "ALT+up/down行内容的移动(<span class="keyword">for</span> linux)</div><div class="line"> map &lt;M-Up&gt; dd&lt;Up&gt;&lt;Up&gt;p </div><div class="line"> map &lt;M-Down&gt; ddp</div><div class="line"></div><div class="line"> <span class="string">"ALT+up/down行内容的移动(mac)</span></div><div class="line"> " Normal mode</div><div class="line"> <span class="string">"nnoremap &lt;S-j&gt; :m .+1&lt;CR&gt;==</span></div><div class="line"> "nnoremap &lt;S-k&gt; :m .-2&lt;CR&gt;==</div><div class="line"></div><div class="line"> <span class="string">" Insert mode</span></div><div class="line"> "inoremap &lt;S-j&gt; &lt;ESC&gt;:m .+1&lt;CR&gt;==gi</div><div class="line"> <span class="string">"inoremap &lt;S-k&gt; &lt;ESC&gt;:m .-2&lt;CR&gt;==gi</span></div><div class="line"> </div><div class="line"> " Visual mode</div><div class="line"> <span class="string">"vnoremap &lt;S-j&gt; :m '&gt;+1&lt;CR&gt;gv=gv</span></div><div class="line"> "vnoremap &lt;S-k&gt; :m <span class="string">'&lt;-2&lt;CR&gt;gv=gv</span></div><div class="line"></div><div class="line"></div><div class="line"> "toggle invisible characters</div><div class="line"> "set invlist</div><div class="line"> "set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮</div><div class="line"> "highlight SpecialKey ctermbg=none " make the highlighting of tabs less annoying</div><div class="line"> "set showbreak=↳</div><div class="line"> "nmap &lt;leader&gt;l :set list!&lt;cr&gt;</div><div class="line"> </div><div class="line"> cmap w!! w !sudo tee &gt;/dev/null %</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> "Plugins</div><div class="line"> set nocompatible                " be iMproved</div><div class="line"> filetype off                    " required!</div><div class="line"> set rtp+=~/.vim/bundle/Vundle.vim</div><div class="line"> call vundle#begin()</div><div class="line"> "plugin  </div><div class="line"> Plugin 'VundleVim/Vundle.vim<span class="string">'</span></div><div class="line"> Plugin 'scrooloose/nerdtree<span class="string">'</span></div><div class="line"> Plugin 'scrooloose/nerdcommenter<span class="string">' "code comment</span></div><div class="line"> Plugin 'scrooloose/syntastic<span class="string">'</span></div><div class="line"> Plugin 'Valloric/YouCompleteMe<span class="string">'</span></div><div class="line"> Plugin 'bling/vim-airline<span class="string">'</span></div><div class="line"> Plugin 'majutsushi/tagbar<span class="string">'		"install ctags plugin firstly		</span></div><div class="line"> Plugin 'terryma/vim-multiple-cursors<span class="string">'</span></div><div class="line"> Plugin 'tpope/vim-fugitive<span class="string">'		"git plugin</span></div><div class="line"> Plugin 'kien/ctrlp.vim<span class="string">'			"search file plugin</span></div><div class="line"> Plugin 'AutoClose<span class="string">'			"输入(，&#123;等需要配对的符号时，自动帮你补全剩余半个		</span></div><div class="line"> Plugin 'Tabular<span class="string">'				"代码更加易于纵向排版，以=或,符号对齐</span></div><div class="line"> Plugin 'shawncplus/phpcomplete.vim<span class="string">'</span></div><div class="line"> Plugin 'suan/vim-instant-markdown<span class="string">' "[sudo] npm -g install instant-markdown-d,实时预览markdown文件</span></div><div class="line"> call vundle#end()            " required</div><div class="line"> filetype plugin indent on    " required</div><div class="line"></div><div class="line"></div><div class="line"> "MiniBufferExplorer</div><div class="line"> let g:miniBufExplMapWindowNavVim = 1 </div><div class="line"> let g:miniBufExplMapWindowNavArrows = 1 </div><div class="line"> let g:miniBufExplMapCTabSwitchBufs = 1 </div><div class="line"> let g:miniBufExplModSelTarget = 1 </div><div class="line"></div><div class="line"> "NERDTree</div><div class="line"> " 使用 NERDTree 插件查看工程文件。设置快捷键，速记：file list</div><div class="line"> nmap &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;</div><div class="line"> " 设置NERDTree子窗口宽度</div><div class="line"> let NERDTreeWinSize=32</div><div class="line"> " 设置NERDTree子窗口位置</div><div class="line"> let NERDTreeWinPos="left"</div><div class="line"> " 显示隐藏文件</div><div class="line"> let NERDTreeShowHidden=1</div><div class="line"> " NERDTree 子窗口中不显示冗余帮助信息</div><div class="line"> let NERDTreeMinimalUI=1</div><div class="line"> " 删除文件时自动删除文件对应 buffer</div><div class="line"> let NERDTreeAutoDeleteBuffer=1</div><div class="line"> let NERDTreeQuitOnOpen=0 "打开文件后不关闭NERDTreeFind窗口</div><div class="line"></div><div class="line"> "autocmd vimenter * NERDTree</div><div class="line"> autocmd bufenter * if (winnr("$") == 1 &amp;&amp; exists("b:NERDTreeType") &amp;&amp; b:NERDTreeType == "primary") | q | endif</div><div class="line"> autocmd VimEnter * wincmd p " 默认进入右侧编辑区</div><div class="line"> "autocmd VimEnter,BufWinEnter * NERDTreeFind | wincmd p "进入vim时打开 NERDTreeFind窗口</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line"> "powerline</div><div class="line"> "set laststatus=2</div><div class="line"> "set guifont=PowerlineSymbols\ for\ Powerline</div><div class="line"> "set nocompatible</div><div class="line"> "set t_Co=256</div><div class="line"> "let g:Powerline_symbols = 'unicode<span class="string">'</span></div><div class="line"></div><div class="line"> "airline</div><div class="line"> set t_Co=256</div><div class="line"> let g:airline_powerline_fonts = 1</div><div class="line"> "let g:airline_theme='wombat<span class="string">'</span></div><div class="line"> " display open buffers in tabline</div><div class="line"> let g:airline#extensions#tabline#enabled = 1 </div><div class="line"> let g:airline#extensions#tabline#buffer_nr_show = 1</div><div class="line"></div><div class="line"> "Tagbar settings</div><div class="line"> nmap &lt;F8&gt; :TagbarToggle&lt;CR&gt;   </div><div class="line"> let g:tagbar_autofocus = 1</div><div class="line"></div><div class="line"> </div><div class="line"> " map fuzzyfinder (CtrlP) plugin</div><div class="line"> " nmap &lt;silent&gt; &lt;leader&gt;t :CtrlP&lt;cr&gt;</div><div class="line"> " nmap &lt;silent&gt; &lt;leader&gt;r :CtrlPBuffer&lt;cr&gt;</div><div class="line"> let g:ctrlp_map='&lt;C-S-h&gt;<span class="string">'</span></div><div class="line"> let g:ctrlp_dotfiles=1</div><div class="line"> let g:ctrlp_working_path_mode = 'ra<span class="string">'</span></div><div class="line"></div><div class="line"> </div><div class="line"> " CtrlP ignore patterns</div><div class="line"> " let g:ctrlp_custom_ignore = &#123;</div><div class="line"> "             \ 'dir<span class="string">':</span></div><div class="line"> " '\.git$\|node_modules$\|bower_components$\|\.hg$\|\.svn$<span class="string">',</span></div><div class="line"> "             \ 'file<span class="string">': '</span>\.exe$\|\.so$<span class="string">'</span></div><div class="line"> "             \ &#125;</div><div class="line"> " only show files that are not ignored by git</div><div class="line"> let g:ctrlp_user_command = ['.git/<span class="string">', '</span>git --git-dir=%s/.git ls-files -oc --exclude-standard<span class="string">']</span></div><div class="line"> </div><div class="line"> " search the nearest ancestor that contains .git, .hg, .svn</div><div class="line"> let g:ctrlp_working_path_mode = 2</div><div class="line"></div><div class="line"></div><div class="line"> "NERD Commenter</div><div class="line"> "&lt;leader&gt;ca 转换注释的方式，比如： /**/和//</div><div class="line"> "&lt;leader&gt;cc 注释当前行和选中行</div><div class="line"> "&lt;leader&gt;c  如果被选区域有部分被注释，则对被选区域执行取消注释操作，其它情况执行反转注释操作</div><div class="line"> "&lt;leader&gt;cs 添加性感的注释，代码开头介绍部分通常使用该注释</div><div class="line"> "&lt;leader&gt;cA 跳转到该行结尾添加注释，并进入编辑模式</div><div class="line"> "&lt;leader&gt;cu 取消注释</div><div class="line"> "&lt;leader&gt;ci 执行反转注释操作，选中区域注释部分取消注释，非注释部分添加注释</div><div class="line"> "&lt;leader&gt;cm 对被选区域用一对注释符进行注释，前面的注释对每一行都会添加注释</div><div class="line"> "&lt;leader&gt;cy 添加注释，并复制被添加注释的部分 </div><div class="line"> "&lt;leader&gt;c$ 注释当前光标到改行结尾的内容  </div><div class="line"></div><div class="line"></div><div class="line"> " Fugitive Shortcuts</div><div class="line"> "nmap &lt;silent&gt; &lt;leader&gt;gs :Gstatus&lt;cr&gt;</div><div class="line"> "nmap &lt;leader&gt;ge :Gedit&lt;cr&gt;</div><div class="line"> "nmap &lt;silent&gt;&lt;leader&gt;gr :Gread&lt;cr&gt;</div><div class="line"> "nmap &lt;silent&gt;&lt;leader&gt;gb :Gblame&lt;cr&gt;</div><div class="line"> nmap gs :Gstatus&lt;cr&gt;</div><div class="line"> nmap ge :Gedit&lt;cr&gt;</div><div class="line"> nmap gr :Gread&lt;cr&gt;</div><div class="line"> nmap gb :Gblame&lt;cr&gt;</div><div class="line"></div><div class="line"></div><div class="line"> " syntastic</div><div class="line"> let g:syntastic_check_on_open = 0 "是否在打开文件时检查</div><div class="line"> let g:syntastic_check_on_wq = 1 "是否在保存文件后检查</div><div class="line"> let g:syntastic_error_symbol = '✗<span class="string">'</span></div><div class="line"> let g:syntastic_warning_symbol = '⚠<span class="string">'</span></div><div class="line"> let g:syntastic_auto_loc_list = 1</div><div class="line"> let g:syntastic_loc_list_height = 5</div><div class="line"> let g:syntastic_enable_highlighting = 0</div><div class="line"> let g:syntastic_php_checkers = ['php<span class="string">', '</span>phpcs<span class="string">', '</span>phpmd<span class="string">', '</span>phplint<span class="string">']</span></div><div class="line"> let g:syntastic_html_checkers = []</div><div class="line"></div><div class="line"> " YouCompleteMe</div><div class="line"> autocmd FileType php set omnifunc=phpcomplete#CompletePHP</div><div class="line"> let g:ycm_complete_in_comments = 1                "在注释输入中也能补全</div><div class="line"> let g:ycm_complete_in_strings = 1                "在字符串输入中也能补全</div><div class="line"> let g:ycm_collect_identifiers_from_tags_files=1                 " 开启 YCM 基于标签引擎</div><div class="line"> let g:ycm_collect_identifiers_from_comments_and_strings = 1    "注释和字符串中的文字也会被收入补全</div><div class="line"> let g:ycm_seed_identifiers_with_syntax=1            "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开</div><div class="line"> let g:ycm_collect_identifiers_from_tags_files = 1</div><div class="line"> let g:ycm_min_num_of_chars_for_completion=2            " 从第2个键入字符就开始罗列匹配项`</div><div class="line"> let g:ycm_key_invoke_completion = '&lt;C-n&gt;<span class="string">' "直接触发自动补全, &lt;C-Space&gt;for mac</span></div><div class="line"> let g:ycm_cache_omnifunc=0  " 禁止缓存匹配项,每次都重新生成匹配项</div><div class="line"> let g:ycm_seed_identifiers_with_syntax=1	" 开启语义补全</div><div class="line"> let g:ycm_complete_in_comments = 1 " 在注释输入中也能补全</div><div class="line"> let g:ycm_complete_in_strings = 1 " 在字符串输入中也能补全</div><div class="line"> set completeopt-=preview  " YCM的previw窗口比较恼人，还是关闭比较好"</div><div class="line"></div><div class="line"> " 比较喜欢用tab来选择补全...</div><div class="line"> function! MyTabFunction ()</div><div class="line">let line = getline('.<span class="string">')</span></div><div class="line">let substr = strpart(line, -1, col('.<span class="string">')+1)</span></div><div class="line">let substr = matchstr(substr, "[^ \t]*$")</div><div class="line">if strlen(substr) == 0</div><div class="line">return "\&lt;tab&gt;"</div><div class="line">endif</div><div class="line">return pumvisible() ? "\&lt;c-n&gt;" :</div><div class="line">"\&lt;c-x&gt;\&lt;c-o&gt;"</div><div class="line"> endfunction</div><div class="line"> inoremap &lt;tab&gt; &lt;c-r&gt;=MyTabFunction()&lt;cr&gt;"</div><div class="line"></div><div class="line"></div><div class="line"> " 跳转到定义处, 分屏打开 </div><div class="line"> let g:ycm_goto_buffer_command = 'horizontal-split<span class="string">'</span></div><div class="line"> let g:ycm_error_symbol = '&gt;&gt;<span class="string">'</span></div><div class="line"> let g:ycm_warning_symbol = '&gt;*<span class="string">'</span></div><div class="line"> nmap &lt;leader&gt;gd :YcmDiags&lt;CR&gt;</div><div class="line"> nnoremap &lt;leader&gt;gl :YcmCompleter GoToDeclaration&lt;CR&gt;           " 跳转到申明处</div><div class="line"> nnoremap &lt;leader&gt;gf :YcmCompleter GoToDefinition&lt;CR&gt;            " 跳转到定义处</div><div class="line"> nnoremap &lt;leader&gt;gg :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;</div><div class="line"></div><div class="line"> "minibufexplorer</div><div class="line"> "let g:miniBufExplorerMoreThanOne=0   "避免出现多个窗口</div><div class="line"></div><div class="line"> "multiple-cursors</div><div class="line"> let g:multi_cursor_use_default_mapping=0</div><div class="line"></div><div class="line"> " Default mapping</div><div class="line"> let g:multi_cursor_next_key='&lt;C-n&gt;<span class="string">'</span></div><div class="line"> let g:multi_cursor_prev_key='&lt;C-p&gt;<span class="string">'</span></div><div class="line"> let g:multi_cursor_skip_key='&lt;C-x&gt;<span class="string">'</span></div><div class="line"> let g:multi_cursor_quit_key='&lt;Esc&gt;<span class="string">'</span></div><div class="line"></div><div class="line"> "tabular</div><div class="line"> "eg :Tab /|, :Tab/:, :Tab /:\zs</div><div class="line"> let g:tabular_loaded = 1</div><div class="line"></div><div class="line"></div><div class="line"> "与tmux中使用up/down/left/right键出现ABCD冲突, 使用tmux时要禁用</div><div class="line"> let g:autoclose_on = 1</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Apache htaccess]]></title>
      <url>http://jasonhzy.github.io/2016/02/03/apache-htaccess/</url>
      <content type="html"><![CDATA[<blockquote>
<p>&emsp;&emsp;.htaccess文件(或者”分布式配置文件”)提供了针对目录改变配置的方法，即在一个特定的文档目录中放置一个包含一个或多个指令的文件，以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。</p>
</blockquote>
<a id="more"></a>
<p>.htaccess编写是用正则的方式，整理分享一下.htaccess 的参数说明:</p>
<pre><code>[F] —— Forbidden(禁止): 命令服务器返回 403 Forbidden错误给用户浏览器
[L] —— Last rule(最后一条规则): 告诉服务器在本条规则执行完后停止重写URL
[N] —— Next(下一条规则): 告诉服务器继续重写，指导所有重写指令都执行过
[G] —— Gone(丢失): 命令服务器返回410 GONE(no longer exists)错误消息
[P] —— Proxy(代理): 告诉服务器通过mod_proxy模块处理用户请求
[C] —— Chain(捆绑): 告诉服务器将当前的规则和前面的规则进行捆绑
[R] —— Redirect(重定向):命令服务器发出重定向消息，以便用户浏览器发出
        rewritten/modified(重写/修改)URL的请求
[NC] —— No Case(不区分大小写): 对客户端请求的URL不区分大小写
[PT] —— Pass Through(放行): 让mod_rewrite模块将重写的URL传回给Apache做进一步处理
[OR] —— Or(逻辑或): 用逻辑“或”将两个表达式连接在一起，如果结果为“真”，则会应用后继的相关规则
[NE] —— No Escape(禁用转义): 命令服务器在输出时禁用转义字符
[NS] —— No Subrequest(禁用子请求): 如果存在内部子请求，则跳过当前命令
[QSA] —— Append Query String(追加查询字符串): 命令服务器在URL末尾追加查询字符串
[S=x] —— Skip(跳过): 如果满足某指定的条件，则跳过后面第x调规则
[E=variable:value] —— Environmental Variable(环境变量): 命令服务器将值value赋给变量variable
[T=MIME-type] —— Mime Type(MIME类型): 声明目标资源所属的MIME类型

# —— 位于行首时表示注释。
- —— 命令Apache“不要”重写URL，例如“xxx.domain.com.* – [F]”
! —— 逻辑非。例如“!string” 将会匹配除了“string”以外的所有字符串
^$ —— 匹配“空字符”、“空行”
-d —— 测试字符串是否是已存在的目录，例如RewriteCond %{REQUEST_FILENAME} !-d
-f —— 测试字符串是否是已存在的文件 例如 RewriteCond %{REQUEST_FILENAME} !-f
-s —— 测试字符串所指文件是否有“非零”值
</code></pre><p>.htaccess文件禁止访问.git、.svn等目录。打开.htaccess文件，添加如下代码：</p>
<pre><code>RewriteEngine on
RewriteRule ^.git - [F,L]
</code></pre><p><strong>Example:</strong></p>
<pre><code>RewriteEngine on 打开引擎
RewriteRule test.html /test.php [L] 
RewriteRule test.html?$ /tianqi.php?s1=&amp;s2=&amp;S3= [QSA,L] 用于多个参数的情况
RewriteRule tianqi-([0-9]+).html /tianqi.php?id=$1 [L]
RewriteCond %{HTTP_HOST} ^www.pinet.cc [NC]  
RewriteRule ^(.*)$ http://pinet.cc/$1 [L,R=301]  
</code></pre><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><ul>
<li>‘redirect|R [=code]’ (强制重定向 redirect)<br>以http: //thishost[:thisport]/(使新的URL成为一个URI)为前缀的Substitution可以强制性执行一个外部重定向。如果code没有指定，则产生一个HTTP响应代码302(临时性移动)。如果需要使用在300-400范围内的其他响应代码，只需在此指定这个数值即可，另外，还可以使用下列符号名称之一: temp (默认的), permanent,seeother.用它可以把规范化的URL反馈给客户端，如, 重写<code>/~&#39;&#39;为</code>/u/‘’，或对/u/user加上斜杠，等等。<br>注意:在使用这个标记时，必须确保该替换字段是一个有效的URL!否则，它会指向一个无效的位置!并且要记住，此标记本身只是对URL加上<a href="http://thishost[:thisport]/的前缀，重写操作仍然会继续。通常，你会希望停止重写操作而立即重定向，则还需要使用&#39;L&#39;标记" target="_blank" rel="external">http://thishost[:thisport]/的前缀，重写操作仍然会继续。通常，你会希望停止重写操作而立即重定向，则还需要使用&#39;L&#39;标记</a>.</li>
<li>‘forbidden|F’ (强制URL为被禁止的 forbidden)<br>强制当前URL为被禁止的，即，立即反馈一个HTTP响应代码403(被禁止的)。使用这个标记，可以链接若干RewriteConds以有条件地阻塞某些URL。</li>
<li>‘gone|G’ (强制URL为已废弃的 gone)<br>强制当前URL为已废弃的，即，立即反馈一个HTTP响应代码410(已废弃的)。使用这个标记，可以标明页面已经被废弃而不存在了.</li>
<li>‘proxy|P’ (强制为代理 proxy)<br>此 标记使替换成分被内部地强制为代理请求，并立即(即重写规则处理立即中断)把处理移交给代理模块。你必须确保此替换串是一个有效的(比如常见的以<a href="http://hostname开头的)能够为Apache代理模块所处理的URI。使用这个标记，可以把某些远程成分映射到本地服务器名称空间，从而增强了ProxyPass指令的功能。" target="_blank" rel="external">http://hostname开头的)能够为Apache代理模块所处理的URI。使用这个标记，可以把某些远程成分映射到本地服务器名称空间，从而增强了ProxyPass指令的功能。</a><br>注意:要使用这个功能，代理模块必须编译在Apache服务器中。如果你不能确定，可以检查<code>httpd -l&#39;&#39;的输出中是否有mod_proxy.c。如果有，则mod_rewrite可以使用这个功能；如果没有，则必须启用mod_proxy并重新编译</code>httpd’’程序。</li>
<li>‘last|L’ (最后一个规则 last)<br>立即停止重写操作，并不再应用其他重写规则。它对应于Perl中的last命令或C语言中的break命令。这个标记可以阻止当前已被重写的URL为其后继的规则所重写。举例，使用它可以重写根路径的URL(‘/‘)为实际存在的URL, 比如, ‘/e/www/‘.</li>
<li>‘next|N’ (重新执行 next round)<br>重新执行重写操作(从第一个规则重新开 始).这时再次进行处理的URL已经不是原始的URL了，而是经最后一个重写规则处理的URL。它对应于Perl中的next命令或C语言中的continue命令。<br>此标记可以重新开始重写操作，即立即回到循环的头部。但是要小心，不要制造死循环!</li>
<li>‘chain|C’ (与下一个规则相链接 chained)<br>此标记使当前规则与下一个(其本身又可以与其后继规则相链接的，并可以如此反复的)规则相链接。 它产生这样一个效果:如果一个规则被匹配，通常会继续处理其后继规则，即这个标记不起作用；如果规则不能被匹配，则其后继的链接的规则会被忽略。比如，在执行一个外部重定向时，对一个目录级规则集，你可能需要删除<code>.www&#39;&#39; (此处不应该出现</code>.www’’的’)。</li>
<li>‘type|T=MIME-type’ (强制MIME类型 type)<br>强制目标文件的MIME类型为MIME-type。比如，它可以用于模拟mod_alias中的ScriptAlias指令，以内部地强制被映射目录中的所有文件的MIME类型为``application/x-httpd-cgi’’.</li>
<li>‘nosubreq|NS’ (仅用于不对内部子请求进行处理 no internal sub-request)<br>在当前请求是一个内部子请求时，此标记强制重写引擎跳过该重写规则。比如，在mod_include试图搜索可能的目录默认文件(index.xxx)时，Apache会内部地产生子请求。对子请求，它不一定有用的，而且如果整个规则集都起作用，它甚至可能会引发错误。所以，可以用这个标记来排除某些规则。<br>根据你的需要遵循以下原则:<br>如果你使用了有CGI脚本的URL前缀，以强制它们由CGI脚本处理，而对子请求处理的出错率(或者开销)很高，在这种情况下，可以使用这个标记。</li>
<li>‘nocase|NC’ (忽略大小写 no case)<br>它使Pattern忽略大小写，即, 在Pattern与当前URL匹配时，’A-Z’ 和’a-z’没有区别。</li>
<li>‘qsappend|QSA’ (追加请求串 query string append)<br>此标记强制重写引擎在已有的替换串中追加一个请求串，而不是简单的替换。如果需要通过重写规则在请求串中增加信息，就可以使用这个标记。</li>
<li>‘noescape|NE’ (在输出中不对URI作转义 no URI escaping)<br>此 标记阻止mod_rewrite对重写结果应用常规的URI转义规则。一般情况下，特殊字符(如’%’, ‘$’, ‘;’等)会被转义为等值的十六进制编码。此标记可以阻止这样的转义，以允许百分号等符号出现在输出中，如： RewriteRule /foo/(.*) /bar?arg=P1\%3d$1 [R,NE] 可以使’/foo/zed’转向到一个安全的请求’/bar?arg=P1=zed’.</li>
<li>‘passthrough|PT’ (移交给下一个处理器 pass through)<br>此标记强制重写引擎将内部结构request_rec中的uri字段设置为filename字段的值，它只是一个小修改，使之能对来自其他URI到文件名翻译器的Alias，ScriptAlias, Redirect等指令的输出进行后续处理。举一个能说明其含义的例子：<br>如果要通过mod_rewrite的重写引擎重写/abc为/def，然后通过mod_alias使/def转变为/ghi，可以这样:<br>  RewriteRule ^/abc(.*) /def$1 [PT]<br>  Alias /def /ghi<br>如果省略了PT标记，虽然mod_rewrite运作正常， 即作为一个使用API的URI到文件名翻译器，它可以重写uri=/abc/…为filename=/def/…，但是，后续的mod_alias在试图作URI到文件名的翻译时，则会失效。<br>注意: 如果需要混合使用不同的包含URI到文件名翻译器的模块时，就必须使用这个标记。混合使用mod_alias和mod_rewrite就是个典型的例子。<br>For Apache hackers<br>如果当前Apache API除了URI到文件名hook之外，还有一个文件名到文件名的hook，就不需要这个标记了! 但是，如果没有这样一个hook，则此标记是唯一的解决方案。Apache Group讨论过这个问题，并在Apache 2.0 版本中会增加这样一个hook。</li>
<li>‘skip|S=num’ (跳过后继的规则 skip)<br>此标记强制重写引擎跳过当前匹配规则后继的num个规则。它可以实现一个伪if-then-else的构造:最后一个规则是then从句，而被跳过的skip=N个规则是else从句.(它和’chain|C’标记是不同的!)</li>
<li>‘env|E=VAR:VAL’ (设置环境变量 environment variable)<br>此标记使环境变量VAR的值为VAL, VAL可以包含可扩展的反向引用的正则表达式$N和%N。此标记可以多次使用以设置多个变量。这些变量可以在其后许多情况下被间接引用，但通常是在XSSI(via or CGI (如$ENV{‘VAR’})中，也可以在后继的RewriteCond指令的pattern中通过%{ENV:VAR}作引用。使用它可以从URL中剥离并记住一些信息。’cookie|CO=NAME:VAL:domain[:lifetime[:path]]’ (设置cookie)它在客户端浏览器上设置一个cookie。 cookie的名称是NAME，其值是VAL。domain字段是该cookie的域，比如’.apache.org’,可选的lifetime是cookie生命期的分钟数，可选的path是cookie的路径。)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Apache </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Apache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP状态码]]></title>
      <url>http://jasonhzy.github.io/2016/02/01/http-status/</url>
      <content type="html"><![CDATA[<blockquote>
<p>HTTP状态码（英语：HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">范围</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1XX</td>
<td style="text-align:center">100-101</td>
<td style="text-align:center">信息提示</td>
</tr>
<tr>
<td style="text-align:center">2XX</td>
<td style="text-align:center">200-206</td>
<td style="text-align:center">成功</td>
</tr>
<tr>
<td style="text-align:center">3XX</td>
<td style="text-align:center">300-305</td>
<td style="text-align:center">重定向</td>
</tr>
<tr>
<td style="text-align:center">4XX</td>
<td style="text-align:center">400-415</td>
<td style="text-align:center">客户端错误</td>
</tr>
<tr>
<td style="text-align:center">5XX</td>
<td style="text-align:center">500-505</td>
<td style="text-align:center">服务器错误</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>下面列出了各种HTTP状态码的含义：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>状态码</strong></th>
<th style="text-align:left"><strong>状态信息</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">100</td>
<td style="text-align:left">Continue</td>
<td style="text-align:left">初始的请求已经接受，客户应当继续发送请求的其余部分(HTTP 1.1新)</td>
</tr>
<tr>
<td style="text-align:center">101</td>
<td style="text-align:left">Switching Protocols</td>
<td style="text-align:left">服务器将遵从客户的请求转换到另外一种协议(HTTP 1.1新)</td>
</tr>
<tr>
<td style="text-align:center">200</td>
<td style="text-align:left">OK</td>
<td style="text-align:left">一切正常，对GET和POST请求的应答文档跟在后面</td>
</tr>
<tr>
<td style="text-align:center">201</td>
<td style="text-align:left">Created</td>
<td style="text-align:left">服务器已经创建了文档，Location头给出了它的URL</td>
</tr>
<tr>
<td style="text-align:center">202</td>
<td style="text-align:left">Accepted</td>
<td style="text-align:left">已经接受请求，但处理尚未完成</td>
</tr>
<tr>
<td style="text-align:center">203</td>
<td style="text-align:left">Non-Authoritative Information</td>
<td style="text-align:left">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝</td>
</tr>
<tr>
<td style="text-align:center">204</td>
<td style="text-align:left">No Content</td>
<td style="text-align:left">没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的</td>
</tr>
<tr>
<td style="text-align:center">205</td>
<td style="text-align:left">Reset Content</td>
<td style="text-align:left">没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容</td>
</tr>
<tr>
<td style="text-align:center">206</td>
<td style="text-align:left">Partial Content</td>
<td style="text-align:left">客户发送了一个带有Range头的GET请求，服务器完成了它</td>
</tr>
<tr>
<td style="text-align:center">300</td>
<td style="text-align:left">Multiple Choices</td>
<td style="text-align:left">客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明</td>
</tr>
<tr>
<td style="text-align:center">301</td>
<td style="text-align:left">Moved Permanently</td>
<td style="text-align:left">客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL</td>
</tr>
<tr>
<td style="text-align:center">302</td>
<td style="text-align:left">Found</td>
<td style="text-align:left">类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求<a href="http://host/~user（缺少了后面的斜杠），有的服务器返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。" target="_blank" rel="external">http://host/~user（缺少了后面的斜杠），有的服务器返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。</a></td>
</tr>
<tr>
<td style="text-align:center">303</td>
<td style="text-align:left">See Other</td>
<td style="text-align:left">类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取</td>
</tr>
<tr>
<td style="text-align:center">304</td>
<td style="text-align:left">Not Modified</td>
<td style="text-align:left">客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用</td>
</tr>
<tr>
<td style="text-align:center">305</td>
<td style="text-align:left">Use Proxy</td>
<td style="text-align:left">客户请求的文档应该通过Location头所指明的代理服务器提取</td>
</tr>
<tr>
<td style="text-align:center">306</td>
<td style="text-align:left">Unused</td>
<td style="text-align:left">此代码被用于前一版本。目前已不再使用，但是代码依然被保留</td>
</tr>
<tr>
<td style="text-align:center">307</td>
<td style="text-align:left">Temporary Redirect</td>
<td style="text-align:left">和302（Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才能重定向。由于这个原因，HTTP1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只能跟随对GET请求的重定向</td>
</tr>
<tr>
<td style="text-align:center">400</td>
<td style="text-align:left">Bad Request</td>
<td style="text-align:left">请求出现语法错误</td>
</tr>
<tr>
<td style="text-align:center">401</td>
<td style="text-align:left">Unauthorized</td>
<td style="text-align:left">客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填写合适的Authorization头后再次发出请求</td>
</tr>
<tr>
<td style="text-align:center">402</td>
<td style="text-align:left">Payment Required</td>
<td style="text-align:left">该状态码是为了将来可能的需求而预留的</td>
</tr>
<tr>
<td style="text-align:center">403</td>
<td style="text-align:left">Forbidden</td>
<td style="text-align:left">资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致</td>
</tr>
<tr>
<td style="text-align:center">404</td>
<td style="text-align:left">Not Found</td>
<td style="text-align:left">无法找到指定位置的资源。这也是一个常用的应答</td>
</tr>
<tr>
<td style="text-align:center">405</td>
<td style="text-align:left">Method Not Allowed</td>
<td style="text-align:left">请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用</td>
</tr>
<tr>
<td style="text-align:center">406</td>
<td style="text-align:left">Not Acceptable</td>
<td style="text-align:left">指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容</td>
</tr>
<tr>
<td style="text-align:center">407</td>
<td style="text-align:left">Proxy Authentication Required</td>
<td style="text-align:left">类似于401，表示客户必须先经过代理服务器的授权</td>
</tr>
<tr>
<td style="text-align:center">408</td>
<td style="text-align:left">Request Timeout</td>
<td style="text-align:left">在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求</td>
</tr>
<tr>
<td style="text-align:center">409</td>
<td style="text-align:left">Conflict</td>
<td style="text-align:left">通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功</td>
</tr>
<tr>
<td style="text-align:center">410</td>
<td style="text-align:left">Gone</td>
<td style="text-align:left">所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而404表示由于未知的原因文档不可用</td>
</tr>
<tr>
<td style="text-align:center">411</td>
<td style="text-align:left">Length Required</td>
<td style="text-align:left">服务器不能处理请求，除非客户发送一个Content-Length头</td>
</tr>
<tr>
<td style="text-align:center">412</td>
<td style="text-align:left">Precondition Failed</td>
<td style="text-align:left">请求头中指定的一些前提条件失败</td>
</tr>
<tr>
<td style="text-align:center">413</td>
<td style="text-align:left">Request Entity Too Large</td>
<td style="text-align:left">目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头</td>
</tr>
<tr>
<td style="text-align:center">414</td>
<td style="text-align:left">Request URI Too Long</td>
<td style="text-align:left">URI太长</td>
</tr>
<tr>
<td style="text-align:center">415</td>
<td style="text-align:left">Unsupported Media Type</td>
<td style="text-align:left">对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝</td>
</tr>
<tr>
<td style="text-align:center">416</td>
<td style="text-align:left">Requested Range Not Satisfiable</td>
<td style="text-align:left">服务器不能满足客户在请求中指定的Range头</td>
</tr>
<tr>
<td style="text-align:center">500</td>
<td style="text-align:left">Internal Server Error</td>
<td style="text-align:left">服务器遇到了意料不到的情况，不能完成客户的请求</td>
</tr>
<tr>
<td style="text-align:center">501</td>
<td style="text-align:left">Not Implemented</td>
<td style="text-align:left">服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求</td>
</tr>
<tr>
<td style="text-align:center">502</td>
<td style="text-align:left">Bad Gateway</td>
<td style="text-align:left">服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答</td>
</tr>
<tr>
<td style="text-align:center">503</td>
<td style="text-align:left">Service Unavailable</td>
<td style="text-align:left">服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个 Retry-After头</td>
</tr>
<tr>
<td style="text-align:center">504</td>
<td style="text-align:left">Gateway Timeout</td>
<td style="text-align:left">由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答</td>
</tr>
<tr>
<td style="text-align:center">505</td>
<td style="text-align:left">HTTP Version Not Supported</td>
<td style="text-align:left">服务器不支持请求中所指明的HTTP版本</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> HTTP(s) </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[沁园春·雪]]></title>
      <url>http://jasonhzy.github.io/2016/02/01/poetry-snow/</url>
      <content type="html"><![CDATA[<h2 id="沁园春·雪"><a href="#沁园春·雪" class="headerlink" title="沁园春·雪"></a>沁园春·雪</h2><p>&emsp;&emsp;——— <em> <strong>毛泽东</strong> </em></p>
<a id="more"></a>
<blockquote>
<p>北国风光，千里冰封，万里雪飘。<br>望长城内外，惟余莽莽；<br>大河上下，顿失滔滔。<br>山舞银蛇，原驰蜡象，欲与天公试比高。<br>须晴日，看红装素裹，分外妖娆。<br>江山如此多娇，引无数英雄竞折腰。<br>惜秦皇汉武，略输文采；<br>唐宗宋祖，稍逊风骚。<br>一代天骄，成吉思汗，只识弯弓射大雕。<br>俱往矣，数风流人物，还看今朝。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 诗歌 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 诗歌 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 函数图]]></title>
      <url>http://jasonhzy.github.io/2016/01/31/php-fun/</url>
      <content type="html"><![CDATA[<p>分享一张PHP函数图，便于学习记忆<br><a id="more"></a><br><img src="/images/php-fun.jpg" alt="PHP函数图"></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS7.x 配置LAMP环境]]></title>
      <url>http://jasonhzy.github.io/2016/01/25/centos-install/</url>
      <content type="html"><![CDATA[<h3 id="服务器基本配置"><a href="#服务器基本配置" class="headerlink" title="服务器基本配置"></a>服务器基本配置</h3><h4 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h4><pre><code>/etc/sysconfig/network-scripts/ifcfg-xxxx修改ONBOOT=&quot;yes&quot;
service network restart
</code></pre><a id="more"></a>
<h4 id="firewall配置"><a href="#firewall配置" class="headerlink" title="firewall配置"></a>firewall配置</h4><h5 id="需要开通的服务和端口"><a href="#需要开通的服务和端口" class="headerlink" title="需要开通的服务和端口"></a>需要开通的服务和端口</h5><pre><code>在vim /etc/firewalld/zones/public.xml 加入端口或者服务
    &lt;service name=&quot;http&quot;/&gt; 
    &lt;service name=&quot;https&quot;/&gt; 
    &lt;port protocol=&quot;tcp&quot; port=&quot;8080&quot;/&gt; 

    或者
    firewall-cmd --zone=public --add-port=8080/tcp --permanent
    firewall-cmd --zone=public --add-service=http  --permanent
    firewall-cmd --zone=public --add-service=https --permanent
    命令含义：
    --zone #作用域
    --add-port=80/tcp #添加端口，格式为：端口/通讯协议
    --permanent #永久生效，没有此参数重启后失效

    查看是否启用：
    firewall-cmd --permanent --zone=public --query-port=8080/tcp
    firewall-cmd --permanent --zone=public --query-service=http

    删除端口或者服务：
    firewall-cmd --zone=public --remove-service=http  --permanent
    firewall-cmd --zone=public --remove-port=8080/tcp  --permanent
</code></pre><h5 id="启动firewall"><a href="#启动firewall" class="headerlink" title="启动firewall"></a>启动firewall</h5><pre><code>systemctl enable firewalld #加入开机启动
systemctl start firewalld #启用firewalld
systemctl list-unit-files | grep firewalld #查看是否加入开机启
</code></pre><h3 id="安装网络工具"><a href="#安装网络工具" class="headerlink" title="安装网络工具"></a>安装网络工具</h3><pre><code>yum -y install net-tools 
</code></pre><p>安装过后，就可以用ifconfig命令了</p>
<h3 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h3><pre><code>vi /etc/selinux/config
#SELINUX=enforcing #注释掉
#SELINUXTYPE=targeted #注释掉
SELINUX=disabled #增加
</code></pre><p>重启服务器即可</p>
<h3 id="PHP环境配置"><a href="#PHP环境配置" class="headerlink" title="PHP环境配置"></a>PHP环境配置</h3><h4 id="安装PHP及其扩展"><a href="#安装PHP及其扩展" class="headerlink" title="安装PHP及其扩展"></a>安装PHP及其扩展</h4><pre><code>yum -y install php55w php55w-devel php55w-mysql php55w-mcrypt php55w-mbstring 
                php55w-xml php55w-gd php55w-bcmath php55w-pecl-imagick
</code></pre><h4 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h4><pre><code>yum –y install httpd
</code></pre><h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><pre><code>yum –y install mariadb*
</code></pre><h3 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h3><h4 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h4><pre><code>vim /etc/httpd/conf.d/vhosts.conf  #vhosts.conf 如若没有即表示创建
</code></pre><h4 id="添加VirtualHost"><a href="#添加VirtualHost" class="headerlink" title="添加VirtualHost:"></a>添加VirtualHost:</h4><pre><code>&lt;VirtualHost *:80&gt;
    DocumentRoot &quot;/var/www/project&quot;
    ServerName www.xxx.com
    &lt;Directory &quot;/var/www/project&quot;&gt;
        AllowOverride All
        Options +FollowSymLinks
        Order allow,deny
        Allow from All
    &lt;/Directory&gt;
    ErrorLog &quot;logs/project-error_log&quot;
    CustomLog &quot;logs/project-access_log&quot; common
&lt;/VirtualHost&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SELinux]]></title>
      <url>http://jasonhzy.github.io/2016/01/25/selinux/</url>
      <content type="html"><![CDATA[<p>SELinux 模式</p>
<p>SELinux 拥有三个基本的操作模式，当中 Enforcing 是缺省的模式。此外，它还有一个 targeted 或 mls 的修饰语。这管制 SELinux 规则的应用有多广泛，当中 targeted<br>是较宽松的级别。</p>
<ul>
<li>Enforcing： 这个缺省模式会在系统上启用并实施 SELinux 的安全性政策，拒绝访问及记录行动</li>
<li>Permissive： 在 Permissive 模式下，SELinux 会被启用但不会实施安全性政策，而只会发出警告及记录行动。Permissive 模式在排除 SELinux 的问题时很有用</li>
<li>Disabled： SELinux 已被停用</li>
</ul>
<a id="more"></a>
<h3 id="1-sestatus-v"><a href="#1-sestatus-v" class="headerlink" title="1.sestatus -v"></a>1.sestatus -v</h3><pre><code># sestatus
SELinux status:                 enabled
SELinuxfs mount:                /selinux
Current mode:                   enforcing
Mode from config file:          enforcing
Policy version:                 21
Policy from config file:        targeted
</code></pre><p>如果SELinux status参数为enabled即为开启状态<br>临时关闭（不用重启机器）：<br>setenforce 0  #设置SELinux 成为permissive模式， setenforce 1 设置SELinux 成为enforcing模式</p>
<h3 id="2-修改配置文件需要重启机器"><a href="#2-修改配置文件需要重启机器" class="headerlink" title="2.修改配置文件需要重启机器"></a>2.修改配置文件需要重启机器</h3><p>修改/etc/selinux/config 文件<br>将SELINUX=enforcing改为SELINUX=disabled<br>重启机器即可</p>
<h3 id="3-日志文件"><a href="#3-日志文件" class="headerlink" title="3.日志文件"></a>3.日志文件</h3><p>默认情况下，SELinux的日志信息是由Linux审计系统auditd写在 /var/log/audit/audit.log里<br>autitd守护进程未启动，则写在/var/log/messages里</p>
<h3 id="4-利用-audit2allow-创建自定-SELinux-政策模块"><a href="#4-利用-audit2allow-创建自定-SELinux-政策模块" class="headerlink" title="4.利用 audit2allow 创建自定 SELinux 政策模块"></a>4.利用 audit2allow 创建自定 SELinux 政策模块</h3><pre><code>grep httpd /var/log/audit/audit.log | audit2allow -M httpd
</code></pre><h3 id="5-利用-semodule-这个指令将httpd政策模块装入现有的-SELinux-政策内"><a href="#5-利用-semodule-这个指令将httpd政策模块装入现有的-SELinux-政策内" class="headerlink" title="5.利用 semodule 这个指令将httpd政策模块装入现有的 SELinux 政策内"></a>5.利用 semodule 这个指令将httpd政策模块装入现有的 SELinux 政策内</h3><pre><code>semodule -i httpd.pp
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SELinux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webtatic Yum Repository]]></title>
      <url>http://jasonhzy.github.io/2016/01/25/webtatic-yum-repository/</url>
      <content type="html"><![CDATA[<h4 id="Webtatic-Yum-Repository"><a href="#Webtatic-Yum-Repository" class="headerlink" title="Webtatic Yum Repository"></a>Webtatic Yum Repository</h4><p>The Webtatic Yum repository is a CentOS/RHEL repository containing updated web-related packages. Its main goals are:</p>
<ul>
<li>to provide CentOS/RHEL administrators with the latest stable minor releases of web development/hosting software, which are not provided in CentOS/RHEL<br>distribution minor releases.</li>
<li>to serve as an additional installation option for some of Webtatic’s projects.</li>
</ul>
<a id="more"></a>
<p>All packages are signed using GnuPG, and are verified using the <a href="https://mirror.webtatic.com/yum/RPM-GPG-KEY-webtatic-andy" target="_blank" rel="external">Webtatic EL 5/6</a> and <a href="https://mirror.webtatic.com/yum/RPM-GPG-KEY-webtatic-el7" target="_blank" rel="external">Webtatic<br>EL 7</a> GPG keys:</p>
<h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><p>To set up the repository, install the webtatic-release RPM:</p>
<p>Webtatic EL7 for CentOS/RHEL 7:</p>
<pre><code>rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm
rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
</code></pre><p>Webtatic EL6 for CentOS/RHEL 6:</p>
<pre><code>rpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm
</code></pre><p>Webtatic EL5.1 for CentOS/RHEL 5:</p>
<pre><code>rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm
</code></pre><p>文章摘自：<a href="https://webtatic.com/projects/yum-repository/" target="_blank" rel="external">Webtatic.com</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown]]></title>
      <url>http://jasonhzy.github.io/2016/01/22/markdown/</url>
      <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>自从学习使用 <code>markdown</code> 以来，收集的学习资料、软件工具、使用指南等，如果你没有听说过或者还没有体验过<code>markdown</code> 进行写作文章，强烈建议 have a try !</p>
<a id="more"></a>
<h2 id="markdown-介绍"><a href="#markdown-介绍" class="headerlink" title="markdown 介绍"></a>markdown 介绍</h2><blockquote>
<p>Markdown 是一种轻量级标记语言，它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。 - <strong>wikipedia</strong></p>
</blockquote>
<ul>
<li><a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Daring Fireball: Markdown</a> Project markdown</li>
<li><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">Markdown wikipedia 介绍</a></li>
<li><a href="http://fletcherpenney.net/multimarkdown/" target="_blank" rel="external">MultiMarkdown</a> 引入更多标记特性和输出选项的改进版Markdown</li>
</ul>
<h2 id="why-markdown"><a href="#why-markdown" class="headerlink" title="why markdown"></a>why markdown</h2><ul>
<li>纯文本，兼容性极强，可以用任意文本编辑器打开.</li>
<li>语法简单（the syntax is so simple you can barely call it “syntax.”），零学习成本，极好的可读性，让你专注于文字写作而不是页面排版，并且兼容 HTML，simple<br>but powerful .</li>
<li>格式转换方便，Markdown 的文本你可以轻松转换为 html、pdf、epub、电子书等。</li>
<li>适合团队协作，可以使用 git/svn 等进行版本控制管理。</li>
<li><a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html" target="_blank" rel="external">阳志平：为什么 Markdown 成为科技界写作主流？</a></li>
<li><a href="http://www.ituring.com.cn/article/828?q=markdown" target="_blank" rel="external">图灵社区：用Markdown来写自由书籍-开源技术的方案</a></li>
</ul>
<p>目前很多在线服务商均支持使用markdown编写：</p>
<ul>
<li><a href="https://github.com" target="_blank" rel="external">Github</a> 最先支持，使用Markdown的一个分支版本来格式化评论、消息以及其它内容。</li>
<li><a href="http://stackoverflow.com/" target="_blank" rel="external">Stack Overflow</a> 使用一种 Markdown 的分支作为它的文章格式化系统。</li>
<li><a href="http://www.cnblogs.com/" target="_blank" rel="external">博客园</a> 国内技术人的博客家园，每天活跃上万用户，高质量社区。</li>
<li><a href="http://www.csdn.net/" target="_blank" rel="external">CSDN</a> 号称全球最大中文IT社区，涵盖了多种语言、架构、博客、俱乐部等模块的技术论坛。</li>
<li><a href="http://www.ituring.com.cn/" target="_blank" rel="external">图灵社区</a> 使用markdown语法供用户写作电子书.</li>
<li><a href="http://www.jianshu.com/" target="_blank" rel="external">简书</a> 重拾文字的力量，交流故事，沟通想法，一个基于内容分享的社区。</li>
<li><a href="http://www.wiz.cn/" target="_blank" rel="external">为知笔记</a> 国内顶尖笔记软件，支持使用Markdown语法编辑笔记。</li>
<li>……</li>
</ul>
<h2 id="markdown-使用"><a href="#markdown-使用" class="headerlink" title="markdown 使用"></a>markdown 使用</h2><ul>
<li><a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="external">Markdown: Basics （快速入门）</a></li>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown 完整语法说明 (简体中文版)</a></li>
<li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">Github: Mastering Markdown</a> GitHub 帮助中关于 Markdown 的语法帮助</li>
<li><a href="https://github.com/hzlzh/1MarkDown" target="_blank" rel="external">MarkDown 语法团队规范</a> 语法规范简洁版</li>
<li><a href="http://www.cirosantilli.com/markdown-style-guide/" target="_blank" rel="external">Markdown Style Guide</a> 语法规范复杂版</li>
<li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank" rel="external">Markdown Cheatsheet</a></li>
<li><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="external">GitHub Flavored Markdown</a> GitHub 使用的 Markdown 语法，略微不同于标准 Markdown<br>语法。提供了一些更加简洁的语法，类似 URL autolinking, Strikethrough, Fenced code blocks, Syntax highlighting 等等</li>
<li><a href="http://fletcherpenney.net/multimarkdown/" target="_blank" rel="external">MultiMarkdown 介绍</a> 对 markdown 进行的扩展功能</li>
</ul>
<h2 id="markdown-工具"><a href="#markdown-工具" class="headerlink" title="markdown 工具"></a>markdown 工具</h2><ul>
<li><a href="https://maxiang.info/" target="_blank" rel="external">马克飞象</a> web/chrome 离线客户端，markdown<br>全功能支持，最大特点内容能够同步到印象笔记（evernote）中，笔记的用户重度推荐，按年收费，目前作者 <a href="http://weibo.com/u/2788354117" target="_blank" rel="external">@weibo</a><br>正在开发跨平台的客户端。</li>
<li><a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a> 在线 markdown 编辑器，可同步文档到Google Drive和 Dropbox，可发布文章到 Blogger，GitHub，Google<br>Drive，Dropbox，Tumblr和WordPress。</li>
<li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">cmd 作业部落</a> 支持 win/mac/linux/web/chrome<br>全平台，支持实时同步预览，支持代码高亮、数学公式，区分写作和阅读模式，支持在线存储，分享文稿网址。</li>
<li><a href="http://macdown.uranusjr.com/" target="_blank" rel="external">MacDown</a> OSX 上的 Markdown 开源编辑器，支持代码高亮，实时预览等。</li>
<li><a href="http://www.markdownpad.com/" target="_blank" rel="external">MarkdownPad</a> Windows上的全功能Markdown编辑器，推荐win上使用，基本全部功能。</li>
<li><a href="http://marked2app.com/" target="_blank" rel="external">Marked2</a> 多种 md 显示方案，不能够编辑文件，只用来展示文件，配合 <a href="https://packagecontrol.io/packages/MarkdownEditing" target="_blank" rel="external">subline text markdown<br>edit</a> 插件，完美使用；</li>
<li><a href="http://zh.mweb.im/" target="_blank" rel="external">MWeb</a> 专业的 Markdown<br>写作、记笔记、静态博客生成软件，由国内独立开发者<a href="http://weibo.com/oulvhai" target="_blank" rel="external">@oulvhai</a>开发，支持Toc、Table、代码高亮、支持发布到 Wordrpess<br>博客、支持 Metaweblog API 的博客服务、Wordpress.com、Evernote 和印象笔记、Blogger、Scriptogr.am、Tumblr等服务。</li>
<li><a href="http://pad.haroopress.com/user.html" target="_blank" rel="external">Haroopad</a><br>又一款简洁多功能的跨平台编辑器，全功能支持，再加上对社交网络友好的连接，多种主题等，感兴趣的可以看看。详情参考<a href="https://github.com/xirong/my-markdown/issues/1" target="_blank" rel="external">issue#1</a></li>
<li><a href="http://sspai.com/32483" target="_blank" rel="external">码字必备：18 款优秀的 Markdown 写作工具 | 2015 年度盘点</a> 喜欢哪一款，就看你的了。</li>
<li>这几款就够了，多了就有选择症 ……</li>
</ul>
<h2 id="reference-参考"><a href="#reference-参考" class="headerlink" title="reference 参考"></a>reference 参考</h2><ul>
<li><a href="http://brettterpstra.com/2011/08/31/why-markdown-a-two-minute-explanation/" target="_blank" rel="external">Why Markdown? A two-minute explanation</a></li>
<li><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external">简书：献给写作者的 Markdown 新手指南</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
